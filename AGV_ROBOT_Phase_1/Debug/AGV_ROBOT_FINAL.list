
AGV_ROBOT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800fe40  0800fe40  0001fe40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010780  08010780  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08010780  08010780  00020780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010788  08010788  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010788  08010788  00020788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010790  08010790  00020790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08010794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f88  20000238  080109c8  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  080109c8  000311c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c904  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee0  00000000  00000000  0004cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0004fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00050b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023651  00000000  00000000  00051c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134e1  00000000  00000000  00075279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d40a9  00000000  00000000  0008875a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006108  00000000  00000000  0015c858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe28 	.word	0x0800fe28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800fe28 	.word	0x0800fe28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <DC1_nghich>:
int chuyenChartoInt(char c)
{
		return (int)c-48;
}
void DC1_nghich(int speed)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <DC1_nghich+0x30>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <DC1_nghich+0x34>)
 8001004:	f007 fb72 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <DC1_nghich+0x34>)
 8001010:	f007 fb6c 	bl	80086ec <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200010d8 	.word	0x200010d8
 8001020:	40021000 	.word	0x40021000

08001024 <DC1_thuan>:
void DC1_thuan(int speed)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <DC1_thuan+0x30>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <DC1_thuan+0x34>)
 800103c:	f007 fb56 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <DC1_thuan+0x34>)
 8001048:	f007 fb50 	bl	80086ec <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200010d8 	.word	0x200010d8
 8001058:	40021000 	.word	0x40021000

0800105c <DC3_thuan>:
void DC3_thuan(int speed)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,speed);
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <DC3_thuan+0x30>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <DC3_thuan+0x34>)
 8001074:	f007 fb3a 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <DC3_thuan+0x34>)
 8001080:	f007 fb34 	bl	80086ec <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200010d8 	.word	0x200010d8
 8001090:	40021000 	.word	0x40021000

08001094 <DC3_nghich>:
void DC3_nghich(int speed)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,speed);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <DC3_nghich+0x30>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <DC3_nghich+0x34>)
 80010ac:	f007 fb1e 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <DC3_nghich+0x34>)
 80010b8:	f007 fb18 	bl	80086ec <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200010d8 	.word	0x200010d8
 80010c8:	40021000 	.word	0x40021000

080010cc <DC4_thuan>:

void DC4_thuan(int speed)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,speed);
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <DC4_thuan+0x30>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <DC4_thuan+0x34>)
 80010e4:	f007 fb02 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <DC4_thuan+0x34>)
 80010f0:	f007 fafc 	bl	80086ec <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000fec 	.word	0x20000fec
 8001100:	40020c00 	.word	0x40020c00

08001104 <DC4_nghich>:
void DC4_nghich(int speed)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,speed);
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <DC4_nghich+0x30>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <DC4_nghich+0x34>)
 800111c:	f007 fae6 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <DC4_nghich+0x34>)
 8001128:	f007 fae0 	bl	80086ec <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000fec 	.word	0x20000fec
 8001138:	40020c00 	.word	0x40020c00

0800113c <DC2_nghich>:

void DC2_nghich(int speed)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <DC2_nghich+0x30>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <DC2_nghich+0x34>)
 8001154:	f007 faca 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <DC2_nghich+0x34>)
 8001160:	f007 fac4 	bl	80086ec <HAL_GPIO_WritePin>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200010d8 	.word	0x200010d8
 8001170:	40020c00 	.word	0x40020c00

08001174 <DC2_thuan>:
void DC2_thuan(int speed)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <DC2_thuan+0x30>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <DC2_thuan+0x34>)
 800118c:	f007 faae 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <DC2_thuan+0x34>)
 8001198:	f007 faa8 	bl	80086ec <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200010d8 	.word	0x200010d8
 80011a8:	40020c00 	.word	0x40020c00

080011ac <ngangPhai>:

void ngangPhai()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	DC1_thuan(PWM1);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <ngangPhai+0x30>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff35 	bl	8001024 <DC1_thuan>
	DC3_nghich(PWM3);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <ngangPhai+0x34>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff68 	bl	8001094 <DC3_nghich>
	DC2_nghich(PWM2);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <ngangPhai+0x38>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffb7 	bl	800113c <DC2_nghich>
	DC4_thuan(PWM4);
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <ngangPhai+0x3c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff7a 	bl	80010cc <DC4_thuan>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000f70 	.word	0x20000f70
 80011e0:	20000f78 	.word	0x20000f78
 80011e4:	20000f74 	.word	0x20000f74
 80011e8:	20000f7c 	.word	0x20000f7c

080011ec <ngangTrai>:
void ngangTrai()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	DC1_nghich(PWM1);
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <ngangTrai+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fef9 	bl	8000fec <DC1_nghich>
	DC3_thuan(PWM3);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <ngangTrai+0x34>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff2c 	bl	800105c <DC3_thuan>
	DC2_thuan(PWM2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <ngangTrai+0x38>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffb3 	bl	8001174 <DC2_thuan>
	DC4_nghich(PWM4);
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <ngangTrai+0x3c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff76 	bl	8001104 <DC4_nghich>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000f70 	.word	0x20000f70
 8001220:	20000f78 	.word	0x20000f78
 8001224:	20000f74 	.word	0x20000f74
 8001228:	20000f7c 	.word	0x20000f7c

0800122c <lui>:

void lui()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	DC1_nghich(PWM1);
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <lui+0x30>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fed9 	bl	8000fec <DC1_nghich>
	DC4_nghich(PWM4);
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <lui+0x34>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff60 	bl	8001104 <DC4_nghich>
	DC2_nghich(PWM2);
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <lui+0x38>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff77 	bl	800113c <DC2_nghich>
	DC3_nghich(PWM3);
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <lui+0x3c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff1e 	bl	8001094 <DC3_nghich>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000f70 	.word	0x20000f70
 8001260:	20000f7c 	.word	0x20000f7c
 8001264:	20000f74 	.word	0x20000f74
 8001268:	20000f78 	.word	0x20000f78

0800126c <tien>:

void tien()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	DC1_thuan(PWM1);
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <tien+0x30>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fed5 	bl	8001024 <DC1_thuan>
	DC4_thuan(PWM4);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <tien+0x34>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff24 	bl	80010cc <DC4_thuan>
	DC2_thuan(PWM2);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <tien+0x38>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff73 	bl	8001174 <DC2_thuan>
	DC3_thuan(PWM3);
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <tien+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fee2 	bl	800105c <DC3_thuan>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000f70 	.word	0x20000f70
 80012a0:	20000f7c 	.word	0x20000f7c
 80012a4:	20000f74 	.word	0x20000f74
 80012a8:	20000f78 	.word	0x20000f78

080012ac <xoayTrai>:
void xoayTrai()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	DC1_nghich(PWM1);
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <xoayTrai+0x30>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe99 	bl	8000fec <DC1_nghich>
	DC2_thuan(PWM2);
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <xoayTrai+0x34>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff58 	bl	8001174 <DC2_thuan>
	DC3_nghich(PWM3);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <xoayTrai+0x38>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fee3 	bl	8001094 <DC3_nghich>
	DC4_thuan(PWM4);
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <xoayTrai+0x3c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fefa 	bl	80010cc <DC4_thuan>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000f70 	.word	0x20000f70
 80012e0:	20000f74 	.word	0x20000f74
 80012e4:	20000f78 	.word	0x20000f78
 80012e8:	20000f7c 	.word	0x20000f7c

080012ec <xoayPhai>:
void xoayPhai()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	DC1_thuan(PWM1);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <xoayPhai+0x30>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe95 	bl	8001024 <DC1_thuan>
	DC2_nghich(PWM2);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <xoayPhai+0x34>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff1c 	bl	800113c <DC2_nghich>
	DC3_thuan(PWM3);
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <xoayPhai+0x38>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fea7 	bl	800105c <DC3_thuan>
	DC4_nghich(PWM4);
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <xoayPhai+0x3c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fef6 	bl	8001104 <DC4_nghich>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000f70 	.word	0x20000f70
 8001320:	20000f74 	.word	0x20000f74
 8001324:	20000f78 	.word	0x20000f78
 8001328:	20000f7c 	.word	0x20000f7c

0800132c <dung>:

void dung()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <dung+0x68>)
 8001338:	f007 f9d8 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <dung+0x68>)
 8001344:	f007 f9d2 	bl	80086ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <dung+0x68>)
 8001350:	f007 f9cc 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <dung+0x68>)
 800135c:	f007 f9c6 	bl	80086ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <dung+0x6c>)
 8001368:	f007 f9c0 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <dung+0x6c>)
 8001374:	f007 f9ba 	bl	80086ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <dung+0x6c>)
 8001380:	f007 f9b4 	bl	80086ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <dung+0x6c>)
 800138c:	f007 f9ae 	bl	80086ec <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	40020c00 	.word	0x40020c00

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f006 fa46 	bl	8007830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f82c 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 faa2 	bl	80018f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ac:	f000 fa78 	bl	80018a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013b0:	f000 fa22 	bl	80017f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013b4:	f000 f88e 	bl	80014d4 <MX_TIM1_Init>
  MX_TIM9_Init();
 80013b8:	f000 f9e4 	bl	8001784 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80013bc:	f000 fa46 	bl	800184c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80013c0:	f000 f940 	bl	8001644 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80013c4:	2108      	movs	r1, #8
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <main+0x58>)
 80013c8:	f007 ff3e 	bl	8009248 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80013cc:	210c      	movs	r1, #12
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <main+0x58>)
 80013d0:	f007 ff3a 	bl	8009248 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 80013d4:	2108      	movs	r1, #8
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <main+0x5c>)
 80013d8:	f007 ff36 	bl	8009248 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80013dc:	2104      	movs	r1, #4
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <main+0x58>)
 80013e0:	f007 ff32 	bl	8009248 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim9);
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <main+0x60>)
 80013e6:	f007 fe65 	bl	80090b4 <HAL_TIM_Base_Start_IT>
	//HAL_UART_Receive_IT(&huart3, &pData, 1);
	setup();
 80013ea:	f003 ff4b 	bl	8005284 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80013ee:	f003 ff6b 	bl	80052c8 <loop>
 80013f2:	e7fc      	b.n	80013ee <main+0x52>
 80013f4:	200010d8 	.word	0x200010d8
 80013f8:	20000fec 	.word	0x20000fec
 80013fc:	20001120 	.word	0x20001120

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2230      	movs	r2, #48	; 0x30
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00a f886 	bl	800b520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <SystemClock_Config+0xcc>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <SystemClock_Config+0xcc>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <SystemClock_Config+0xd0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <SystemClock_Config+0xd0>)
 800144a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <SystemClock_Config+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001464:	2310      	movs	r3, #16
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001470:	2308      	movs	r3, #8
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001474:	23a8      	movs	r3, #168	; 0xa8
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800147c:	2304      	movs	r3, #4
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f007 f97d 	bl	8008784 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001490:	f000 fb32 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2105      	movs	r1, #5
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 fbde 	bl	8008c74 <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014be:	f000 fb1b 	bl	8001af8 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3750      	adds	r7, #80	; 0x50
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2220      	movs	r2, #32
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f00a f807 	bl	800b520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <MX_TIM1_Init+0x168>)
 8001514:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <MX_TIM1_Init+0x16c>)
 8001516:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21-1;
 8001518:	4b48      	ldr	r3, [pc, #288]	; (800163c <MX_TIM1_Init+0x168>)
 800151a:	2214      	movs	r2, #20
 800151c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <MX_TIM1_Init+0x168>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <MX_TIM1_Init+0x168>)
 8001526:	f640 729f 	movw	r2, #3999	; 0xf9f
 800152a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM1_Init+0x168>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001532:	4b42      	ldr	r3, [pc, #264]	; (800163c <MX_TIM1_Init+0x168>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM1_Init+0x168>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800153e:	483f      	ldr	r0, [pc, #252]	; (800163c <MX_TIM1_Init+0x168>)
 8001540:	f007 fd68 	bl	8009014 <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800154a:	f000 fad5 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001558:	4619      	mov	r1, r3
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM1_Init+0x168>)
 800155c:	f008 f906 	bl	800976c <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001566:	f000 fac7 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156a:	4834      	ldr	r0, [pc, #208]	; (800163c <MX_TIM1_Init+0x168>)
 800156c:	f007 fe12 	bl	8009194 <HAL_TIM_PWM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001576:	f000 fabf 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001586:	4619      	mov	r1, r3
 8001588:	482c      	ldr	r0, [pc, #176]	; (800163c <MX_TIM1_Init+0x168>)
 800158a:	f008 fcf9 	bl	8009f80 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001594:	f000 fab0 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2204      	movs	r2, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	481f      	ldr	r0, [pc, #124]	; (800163c <MX_TIM1_Init+0x168>)
 80015be:	f008 f813 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015c8:	f000 fa96 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	2208      	movs	r2, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	4819      	ldr	r0, [pc, #100]	; (800163c <MX_TIM1_Init+0x168>)
 80015d6:	f008 f807 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015e0:	f000 fa8a 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	220c      	movs	r2, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <MX_TIM1_Init+0x168>)
 80015ee:	f007 fffb 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015f8:	f000 fa7e 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM1_Init+0x168>)
 8001620:	f008 fd2a 	bl	800a078 <HAL_TIMEx_ConfigBreakDeadTime>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800162a:	f000 fa65 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM1_Init+0x168>)
 8001630:	f005 f944 	bl	80068bc <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3758      	adds	r7, #88	; 0x58
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200010d8 	.word	0x200010d8
 8001640:	40010000 	.word	0x40010000

08001644 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2220      	movs	r2, #32
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f009 ff4f 	bl	800b520 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_TIM8_Init+0x138>)
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <MX_TIM8_Init+0x13c>)
 8001686:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21-1;
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_TIM8_Init+0x138>)
 800168a:	2214      	movs	r2, #20
 800168c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_TIM8_Init+0x138>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000-1;
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <MX_TIM8_Init+0x138>)
 8001696:	f640 729f 	movw	r2, #3999	; 0xf9f
 800169a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <MX_TIM8_Init+0x138>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <MX_TIM8_Init+0x138>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <MX_TIM8_Init+0x138>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016ae:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_TIM8_Init+0x138>)
 80016b0:	f007 fcb0 	bl	8009014 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016ba:	f000 fa1d 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016c8:	4619      	mov	r1, r3
 80016ca:	482c      	ldr	r0, [pc, #176]	; (800177c <MX_TIM8_Init+0x138>)
 80016cc:	f008 f84e 	bl	800976c <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016d6:	f000 fa0f 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016da:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_TIM8_Init+0x138>)
 80016dc:	f007 fd5a 	bl	8009194 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016e6:	f000 fa07 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f6:	4619      	mov	r1, r3
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <MX_TIM8_Init+0x138>)
 80016fa:	f008 fc41 	bl	8009f80 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001704:	f000 f9f8 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	; 0x60
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	2208      	movs	r2, #8
 800172a:	4619      	mov	r1, r3
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <MX_TIM8_Init+0x138>)
 800172e:	f007 ff5b 	bl	80095e8 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001738:	f000 f9de 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM8_Init+0x138>)
 8001760:	f008 fc8a 	bl	800a078 <HAL_TIMEx_ConfigBreakDeadTime>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800176a:	f000 f9c5 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM8_Init+0x138>)
 8001770:	f005 f8a4 	bl	80068bc <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3758      	adds	r7, #88	; 0x58
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000fec 	.word	0x20000fec
 8001780:	40010400 	.word	0x40010400

08001784 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_TIM9_Init+0x6c>)
 8001798:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <MX_TIM9_Init+0x70>)
 800179a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400-1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_TIM9_Init+0x6c>)
 800179e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017a2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 250-1;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017ac:	22f9      	movs	r2, #249	; 0xf9
 80017ae:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017be:	f007 fc29 	bl	8009014 <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80017c8:	f000 f996 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_TIM9_Init+0x6c>)
 80017d8:	f007 ffc8 	bl	800976c <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80017e2:	f000 f989 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20001120 	.word	0x20001120
 80017f4:	40014000 	.word	0x40014000

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_USART2_UART_Init+0x50>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART2_UART_Init+0x4c>)
 8001830:	f008 fc88 	bl	800a144 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800183a:	f000 f95d 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20001168 	.word	0x20001168
 8001848:	40004400 	.word	0x40004400

0800184c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <MX_USART3_UART_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_USART3_UART_Init+0x4c>)
 8001884:	f008 fc5e 	bl	800a144 <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800188e:	f000 f933 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20001034 	.word	0x20001034
 800189c:	40004800 	.word	0x40004800

080018a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_DMA_Init+0x4c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <MX_DMA_Init+0x4c>)
 80018b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_DMA_Init+0x4c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2010      	movs	r0, #16
 80018c8:	f006 f923 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018cc:	2010      	movs	r0, #16
 80018ce:	f006 f93c 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2011      	movs	r0, #17
 80018d8:	f006 f91b 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018dc:	2011      	movs	r0, #17
 80018de:	f006 f934 	bl	8007b4a <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a75      	ldr	r2, [pc, #468]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b68      	ldr	r3, [pc, #416]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a67      	ldr	r2, [pc, #412]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <MX_GPIO_Init+0x1f4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2140      	movs	r1, #64	; 0x40
 8001996:	4854      	ldr	r0, [pc, #336]	; (8001ae8 <MX_GPIO_Init+0x1f8>)
 8001998:	f006 fea8 	bl	80086ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80019a2:	4852      	ldr	r0, [pc, #328]	; (8001aec <MX_GPIO_Init+0x1fc>)
 80019a4:	f006 fea2 	bl	80086ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80019ae:	4850      	ldr	r0, [pc, #320]	; (8001af0 <MX_GPIO_Init+0x200>)
 80019b0:	f006 fe9c 	bl	80086ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7;
 80019b4:	2389      	movs	r3, #137	; 0x89
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	484b      	ldr	r0, [pc, #300]	; (8001af4 <MX_GPIO_Init+0x204>)
 80019c8:	f006 fcdc 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80019cc:	2346      	movs	r3, #70	; 0x46
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4844      	ldr	r0, [pc, #272]	; (8001af4 <MX_GPIO_Init+0x204>)
 80019e2:	f006 fccf 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	483a      	ldr	r0, [pc, #232]	; (8001ae8 <MX_GPIO_Init+0x1f8>)
 80019fe:	f006 fcc1 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a02:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4834      	ldr	r0, [pc, #208]	; (8001aec <MX_GPIO_Init+0x1fc>)
 8001a1c:	f006 fcb2 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	482d      	ldr	r0, [pc, #180]	; (8001af0 <MX_GPIO_Init+0x200>)
 8001a3a:	f006 fca3 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4824      	ldr	r0, [pc, #144]	; (8001ae8 <MX_GPIO_Init+0x1f8>)
 8001a56:	f006 fc95 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481f      	ldr	r0, [pc, #124]	; (8001aec <MX_GPIO_Init+0x1fc>)
 8001a70:	f006 fc88 	bl	8008384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <MX_GPIO_Init+0x1fc>)
 8001a88:	f006 fc7c 	bl	8008384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2006      	movs	r0, #6
 8001a92:	f006 f83e 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a96:	2006      	movs	r0, #6
 8001a98:	f006 f857 	bl	8007b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2007      	movs	r0, #7
 8001aa2:	f006 f836 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001aa6:	2007      	movs	r0, #7
 8001aa8:	f006 f84f 	bl	8007b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2008      	movs	r0, #8
 8001ab2:	f006 f82e 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f006 f847 	bl	8007b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2017      	movs	r0, #23
 8001ac2:	f006 f826 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ac6:	2017      	movs	r0, #23
 8001ac8:	f006 f83f 	bl	8007b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2102      	movs	r1, #2
 8001ad0:	2028      	movs	r0, #40	; 0x28
 8001ad2:	f006 f81e 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad6:	2028      	movs	r0, #40	; 0x28
 8001ad8:	f006 f837 	bl	8007b4a <HAL_NVIC_EnableIRQ>

}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40020800 	.word	0x40020800

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>

08001b02 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	08010240 	.word	0x08010240

08001b44 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
      data()
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ffe8 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ffcf 	bl	8001b02 <_ZN3ros4TimeC1Ev>
    {
    }
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08010228 	.word	0x08010228

08001b74 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b2ca      	uxtb	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0a19      	lsrs	r1, r3, #8
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	0c19      	lsrs	r1, r3, #16
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3302      	adds	r3, #2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0e19      	lsrs	r1, r3, #24
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0a19      	lsrs	r1, r3, #8
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3301      	adds	r3, #1
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2ca      	uxtb	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	0c19      	lsrs	r1, r3, #16
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0e19      	lsrs	r1, r3, #24
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3303      	adds	r3, #3
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c16:	68fb      	ldr	r3, [r7, #12]
    }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	440b      	add	r3, r1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	440b      	add	r3, r1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3303      	adds	r3, #3
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	440b      	add	r3, r1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	061b      	lsls	r3, r3, #24
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3304      	adds	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3303      	adds	r3, #3
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	440b      	add	r3, r1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cde:	68fb      	ldr	r3, [r7, #12]
    }
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0800fe40 	.word	0x0800fe40

08001d08 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	0800fe50 	.word	0x0800fe50

08001d24 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fef8 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	809a      	strh	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
    {
    }
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	08010210 	.word	0x08010210
 8001d68:	0800fe74 	.word	0x0800fe74

08001d6c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8899      	ldrh	r1, [r3, #4]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	b2ca      	uxtb	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	889b      	ldrh	r3, [r3, #4]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa12 	bl	80001d0 <strlen>
 8001dac:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fefc 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	18d0      	adds	r0, r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f009 fb98 	bl	800b504 <memcpy>
      offset += length_topic_name;
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe f9f5 	bl	80001d0 <strlen>
 8001de6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fedf 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	18d0      	adds	r0, r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f009 fb7b 	bl	800b504 <memcpy>
      offset += length_message_type;
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4413      	add	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe f9d8 	bl	80001d0 <strlen>
 8001e20:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fec2 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3304      	adds	r3, #4
 8001e34:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	18d0      	adds	r0, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4619      	mov	r1, r3
 8001e44:	f009 fb5e 	bl	800b504 <memcpy>
      offset += length_md5sum;
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e56:	68f9      	ldr	r1, [r7, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0a19      	lsrs	r1, r3, #8
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b2ca      	uxtb	r2, r1
 8001e70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0c19      	lsrs	r1, r3, #16
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2ca      	uxtb	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0e19      	lsrs	r1, r3, #24
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	61fb      	str	r3, [r7, #28]
      return offset;
 8001e98:	69fb      	ldr	r3, [r7, #28]
    }
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b08a      	sub	sp, #40	; 0x28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	889b      	ldrh	r3, [r3, #4]
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	440b      	add	r3, r1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fe7e 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4413      	add	r3, r2
 8001f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d20c      	bcs.n	8001f24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	441a      	add	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	440b      	add	r3, r1
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	e7ec      	b.n	8001efe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	4413      	add	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fe4b 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20c      	bcs.n	8001f8a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	441a      	add	r2, r3
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	3301      	adds	r3, #1
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	e7ec      	b.n	8001f64 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b01      	subs	r3, #1
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	441a      	add	r2, r3
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fe18 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	441a      	add	r2, r3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e7ec      	b.n	8001fca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	3b01      	subs	r3, #1
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	441a      	add	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440a      	add	r2, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	3301      	adds	r3, #1
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	440b      	add	r3, r1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4313      	orrs	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3302      	adds	r3, #2
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	440b      	add	r3, r1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	4313      	orrs	r3, r2
 8002048:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3303      	adds	r3, #3
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4313      	orrs	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3304      	adds	r3, #4
 8002066:	61bb      	str	r3, [r7, #24]
     return offset;
 8002068:	69bb      	ldr	r3, [r7, #24]
    }
 800206a:	4618      	mov	r0, r3
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800fe78 	.word	0x0800fe78

08002090 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800fe94 	.word	0x0800fe94

080020ac <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fd34 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	711a      	strb	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80020cc:	609a      	str	r2, [r3, #8]
    {
    }
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	080101f8 	.word	0x080101f8
 80020dc:	0800fe74 	.word	0x0800fe74

080020e0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	7912      	ldrb	r2, [r2, #4]
 80020f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f863 	bl	80001d0 <strlen>
 800210a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fd4d 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	18d0      	adds	r0, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4619      	mov	r1, r3
 800212e:	f009 f9e9 	bl	800b504 <memcpy>
      offset += length_msg;
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
      return offset;
 800213a:	68fb      	ldr	r3, [r7, #12]
    }
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3301      	adds	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	441a      	add	r2, r3
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fd3d 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3304      	adds	r3, #4
 800217a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d20c      	bcs.n	80021a6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	441a      	add	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3b01      	subs	r3, #1
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	440b      	add	r3, r1
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e7ec      	b.n	8002180 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	3b01      	subs	r3, #1
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	441a      	add	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
     return offset;
 80021ca:	693b      	ldr	r3, [r7, #16]
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	0800feb8 	.word	0x0800feb8

080021f0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0800fecc 	.word	0x0800fecc

0800220c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fc84 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	080101e0 	.word	0x080101e0

08002268 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	b2ca      	uxtb	r2, r1
 8002282:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0a19      	lsrs	r1, r3, #8
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	3301      	adds	r3, #1
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	b2ca      	uxtb	r2, r1
 8002294:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0c19      	lsrs	r1, r3, #16
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3302      	adds	r3, #2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	b2ca      	uxtb	r2, r1
 80022a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0e19      	lsrs	r1, r3, #24
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	3303      	adds	r3, #3
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	b2ca      	uxtb	r2, r1
 80022b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3304      	adds	r3, #4
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d22b      	bcs.n	8002326 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	b2ca      	uxtb	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	0a19      	lsrs	r1, r3, #8
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	0c19      	lsrs	r1, r3, #16
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	3302      	adds	r3, #2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	b2ca      	uxtb	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	0e19      	lsrs	r1, r3, #24
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3303      	adds	r3, #3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3304      	adds	r3, #4
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	3301      	adds	r3, #1
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	e7ce      	b.n	80022c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4413      	add	r3, r2
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	0a19      	lsrs	r1, r3, #8
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4413      	add	r3, r2
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	0c19      	lsrs	r1, r3, #16
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3302      	adds	r3, #2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	b2ca      	uxtb	r2, r1
 8002356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	0e19      	lsrs	r1, r3, #24
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3303      	adds	r3, #3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	b2ca      	uxtb	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3304      	adds	r3, #4
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	429a      	cmp	r2, r3
 800237c:	d22b      	bcs.n	80023d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0a19      	lsrs	r1, r3, #8
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3301      	adds	r3, #1
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	b2ca      	uxtb	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0c19      	lsrs	r1, r3, #16
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3302      	adds	r3, #2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	b2ca      	uxtb	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	0e19      	lsrs	r1, r3, #24
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3303      	adds	r3, #3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	3304      	adds	r3, #4
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	e7ce      	b.n	8002374 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69d9      	ldr	r1, [r3, #28]
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	b2ca      	uxtb	r2, r1
 80023e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	0a19      	lsrs	r1, r3, #8
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	3301      	adds	r3, #1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	0c19      	lsrs	r1, r3, #16
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3302      	adds	r3, #2
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4413      	add	r3, r2
 8002404:	b2ca      	uxtb	r2, r1
 8002406:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	0e19      	lsrs	r1, r3, #24
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3303      	adds	r3, #3
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	b2ca      	uxtb	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	3304      	adds	r3, #4
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	429a      	cmp	r2, r3
 800242c:	d228      	bcs.n	8002480 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd fec8 	bl	80001d0 <strlen>
 8002440:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	6979      	ldr	r1, [r7, #20]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fbb2 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3304      	adds	r3, #4
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	18d0      	adds	r0, r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4619      	mov	r1, r3
 800246c:	f009 f84a 	bl	800b504 <memcpy>
      offset += length_stringsi;
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	4413      	add	r3, r2
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3301      	adds	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e7d1      	b.n	8002424 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800248a:	b580      	push	{r7, lr}
 800248c:	b08e      	sub	sp, #56	; 0x38
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	3301      	adds	r3, #1
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	3302      	adds	r3, #2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	3303      	adds	r3, #3
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80024d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024da:	3304      	adds	r3, #4
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d90a      	bls.n	80024fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f009 fe96 	bl	800c224 <realloc>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	429a      	cmp	r2, r3
 8002510:	d236      	bcs.n	8002580 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	440a      	add	r2, r1
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	3301      	adds	r3, #1
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	440b      	add	r3, r1
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	3302      	adds	r3, #2
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	440b      	add	r3, r1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254c:	3303      	adds	r3, #3
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	440b      	add	r3, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	3304      	adds	r3, #4
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	3301      	adds	r3, #1
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	e7c3      	b.n	8002508 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	3301      	adds	r3, #1
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	4313      	orrs	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	3302      	adds	r3, #2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	3303      	adds	r3, #3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	3304      	adds	r3, #4
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d90a      	bls.n	80025e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f009 fe22 	bl	800c224 <realloc>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d236      	bcs.n	8002668 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	440a      	add	r2, r1
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	3301      	adds	r3, #1
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	440b      	add	r3, r1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	3302      	adds	r3, #2
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	440b      	add	r3, r1
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	3303      	adds	r3, #3
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	440b      	add	r3, r1
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	3304      	adds	r3, #4
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	3214      	adds	r2, #20
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	3301      	adds	r3, #1
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	e7c3      	b.n	80025f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4413      	add	r3, r2
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	3302      	adds	r3, #2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	3303      	adds	r3, #3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	3304      	adds	r3, #4
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d90a      	bls.n	80026ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f009 fdae 	bl	800c224 <realloc>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026de:	429a      	cmp	r2, r3
 80026e0:	d23f      	bcs.n	8002762 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	441a      	add	r2, r3
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fa7e 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	3304      	adds	r3, #4
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	429a      	cmp	r2, r3
 8002708:	d20c      	bcs.n	8002724 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	441a      	add	r2, r3
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3b01      	subs	r3, #1
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	440b      	add	r3, r1
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3301      	adds	r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e7ec      	b.n	80026fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	3b01      	subs	r3, #1
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	3b01      	subs	r3, #1
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	441a      	add	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4413      	add	r3, r2
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	3220      	adds	r2, #32
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	3301      	adds	r3, #1
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002760:	e7ba      	b.n	80026d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002764:	4618      	mov	r0, r3
 8002766:	3738      	adds	r7, #56	; 0x38
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	080100d4 	.word	0x080100d4

08002788 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	0800fef0 	.word	0x0800fef0

080027a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68d8      	ldr	r0, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6891      	ldr	r1, [r2, #8]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4798      	blx	r3
 80027f0:	4603      	mov	r3, r0
  };
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
  }
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <_ZN13STM32HardwareC1Ev+0x34>)
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20001168 	.word	0x20001168

08002870 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f804 	bl	8002886 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289a:	4619      	mov	r1, r3
 800289c:	f007 fd4e 	bl	800a33c <HAL_UART_Receive_DMA>
    }
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
      int c = -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffa8 	bl	8002812 <_ZN13STM32Hardware10getRdmaIndEv>
 80028c2:	4603      	mov	r3, r0
 80028c4:	429c      	cmp	r4, r3
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028d8:	1c59      	adds	r1, r3, #1
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	791b      	ldrb	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80028f8:	68fb      	ldr	r3, [r7, #12]
    }
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
	...

08002904 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	d108      	bne.n	800292c <_ZN13STM32Hardware5flushEv+0x28>
 800291a:	4b28      	ldr	r3, [pc, #160]	; (80029bc <_ZN13STM32Hardware5flushEv+0xb8>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	f083 0301 	eor.w	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <_ZN13STM32Hardware5flushEv+0x28>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <_ZN13STM32Hardware5flushEv+0x2a>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03f      	beq.n	80029b2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <_ZN13STM32Hardware5flushEv+0xb8>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002944:	429a      	cmp	r2, r3
 8002946:	d031      	beq.n	80029ac <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002954:	429a      	cmp	r2, r3
 8002956:	d20a      	bcs.n	800296e <_ZN13STM32Hardware5flushEv+0x6a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002966:	b29b      	uxth	r3, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	e006      	b.n	800297c <_ZN13STM32Hardware5flushEv+0x78>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002974:	b29b      	uxth	r3, r3
 8002976:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800297a:	b29b      	uxth	r3, r3
 800297c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002988:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	89fa      	ldrh	r2, [r7, #14]
 8002992:	4619      	mov	r1, r3
 8002994:	f007 fc54 	bl	800a240 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	4413      	add	r3, r2
 80029a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <_ZN13STM32Hardware5flushEv+0xb8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
      }
    }
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200002b0 	.word	0x200002b0

080029c0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
      int n = length;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d6:	bfa8      	it	ge
 80029d8:	f44f 7300 	movge.w	r3, #512	; 0x200
 80029dc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80029e4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4293      	cmp	r3, r2
 80029ec:	bf28      	it	cs
 80029ee:	4613      	movcs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80029f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f008 fd7d 	bl	800b504 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4413      	add	r3, r2
 8002a14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d00b      	beq.n	8002a3e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	18d1      	adds	r1, r2, r3
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f008 fd63 	bl	800b504 <memcpy>
      }

      flush();
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff ff60 	bl	8002904 <_ZN13STM32Hardware5flushEv>
    }
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	f004 ff52 	bl	80078fc <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
      data("")
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f858 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <_ZN8std_msgs6StringC1Ev+0x28>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002a7e:	605a      	str	r2, [r3, #4]
    {
    }
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	0801019c 	.word	0x0801019c
 8002a90:	0800fe74 	.word	0x0800fe74

08002a94 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fb92 	bl	80001d0 <strlen>
 8002aac:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 f87c 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	18d0      	adds	r0, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f008 fd18 	bl	800b504 <memcpy>
      offset += length_data;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4413      	add	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
      return offset;
 8002adc:	68fb      	ldr	r3, [r7, #12]
    }
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	441a      	add	r2, r3
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 f875 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d20c      	bcs.n	8002b36 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	441a      	add	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e7ec      	b.n	8002b10 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
     return offset;
 8002b5a:	693b      	ldr	r3, [r7, #16]
    }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	0800ff14 	.word	0x0800ff14

08002b80 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	0800ff24 	.word	0x0800ff24

08002b9c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ffbc 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08010184 	.word	0x08010184

08002bec <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002bec:	b480      	push	{r7}
 8002bee:	b08b      	sub	sp, #44	; 0x2c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c00:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0a:	6838      	ldr	r0, [r7, #0]
 8002c0c:	4401      	add	r1, r0
 8002c0e:	b2d3      	uxtb	r3, r2
 8002c10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	0a02      	lsrs	r2, r0, #8
 8002c20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c24:	0a0b      	lsrs	r3, r1, #8
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	3101      	adds	r1, #1
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	4401      	add	r1, r0
 8002c2e:	b2d3      	uxtb	r3, r2
 8002c30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	0c02      	lsrs	r2, r0, #16
 8002c40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c44:	0c0b      	lsrs	r3, r1, #16
 8002c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c48:	3102      	adds	r1, #2
 8002c4a:	6838      	ldr	r0, [r7, #0]
 8002c4c:	4401      	add	r1, r0
 8002c4e:	b2d3      	uxtb	r3, r2
 8002c50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	0e02      	lsrs	r2, r0, #24
 8002c60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c64:	0e0b      	lsrs	r3, r1, #24
 8002c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c68:	3103      	adds	r1, #3
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	4401      	add	r1, r0
 8002c6e:	b2d3      	uxtb	r3, r2
 8002c70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	000a      	movs	r2, r1
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c84:	3104      	adds	r1, #4
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	4401      	add	r1, r0
 8002c8a:	b2d3      	uxtb	r3, r2
 8002c8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	0a0a      	lsrs	r2, r1, #8
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca0:	3105      	adds	r1, #5
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	4401      	add	r1, r0
 8002ca6:	b2d3      	uxtb	r3, r2
 8002ca8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002caa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	0c0a      	lsrs	r2, r1, #16
 8002cb8:	2300      	movs	r3, #0
 8002cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbc:	3106      	adds	r1, #6
 8002cbe:	6838      	ldr	r0, [r7, #0]
 8002cc0:	4401      	add	r1, r0
 8002cc2:	b2d3      	uxtb	r3, r2
 8002cc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002cc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	0e0a      	lsrs	r2, r1, #24
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd8:	3107      	adds	r1, #7
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	4401      	add	r1, r0
 8002cde:	b2d3      	uxtb	r3, r2
 8002ce0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cee:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002cf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	4401      	add	r1, r0
 8002cfc:	b2d3      	uxtb	r3, r2
 8002cfe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002d00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	0a02      	lsrs	r2, r0, #8
 8002d0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d12:	0a0b      	lsrs	r3, r1, #8
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	3101      	adds	r1, #1
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	b2d3      	uxtb	r3, r2
 8002d1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	0c02      	lsrs	r2, r0, #16
 8002d2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d32:	0c0b      	lsrs	r3, r1, #16
 8002d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d36:	3102      	adds	r1, #2
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	4401      	add	r1, r0
 8002d3c:	b2d3      	uxtb	r3, r2
 8002d3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	0e02      	lsrs	r2, r0, #24
 8002d4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d52:	0e0b      	lsrs	r3, r1, #24
 8002d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d56:	3103      	adds	r1, #3
 8002d58:	6838      	ldr	r0, [r7, #0]
 8002d5a:	4401      	add	r1, r0
 8002d5c:	b2d3      	uxtb	r3, r2
 8002d5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	000a      	movs	r2, r1
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d72:	3104      	adds	r1, #4
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	4401      	add	r1, r0
 8002d78:	b2d3      	uxtb	r3, r2
 8002d7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	0a0a      	lsrs	r2, r1, #8
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d8e:	3105      	adds	r1, #5
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	4401      	add	r1, r0
 8002d94:	b2d3      	uxtb	r3, r2
 8002d96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	0c0a      	lsrs	r2, r1, #16
 8002da6:	2300      	movs	r3, #0
 8002da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002daa:	3106      	adds	r1, #6
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	4401      	add	r1, r0
 8002db0:	b2d3      	uxtb	r3, r2
 8002db2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002db4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	0e0a      	lsrs	r2, r1, #24
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc6:	3107      	adds	r1, #7
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	4401      	add	r1, r0
 8002dcc:	b2d3      	uxtb	r3, r2
 8002dce:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ddc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	4401      	add	r1, r0
 8002dea:	b2d3      	uxtb	r3, r2
 8002dec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	0a02      	lsrs	r2, r0, #8
 8002dfc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e00:	0a0b      	lsrs	r3, r1, #8
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	3101      	adds	r1, #1
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	b2d3      	uxtb	r3, r2
 8002e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	0c02      	lsrs	r2, r0, #16
 8002e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e20:	0c0b      	lsrs	r3, r1, #16
 8002e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e24:	3102      	adds	r1, #2
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	4401      	add	r1, r0
 8002e2a:	b2d3      	uxtb	r3, r2
 8002e2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	0e02      	lsrs	r2, r0, #24
 8002e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e40:	0e0b      	lsrs	r3, r1, #24
 8002e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e44:	3103      	adds	r1, #3
 8002e46:	6838      	ldr	r0, [r7, #0]
 8002e48:	4401      	add	r1, r0
 8002e4a:	b2d3      	uxtb	r3, r2
 8002e4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	000a      	movs	r2, r1
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e60:	3104      	adds	r1, #4
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	4401      	add	r1, r0
 8002e66:	b2d3      	uxtb	r3, r2
 8002e68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	0a0a      	lsrs	r2, r1, #8
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7c:	3105      	adds	r1, #5
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	4401      	add	r1, r0
 8002e82:	b2d3      	uxtb	r3, r2
 8002e84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	0c0a      	lsrs	r2, r1, #16
 8002e94:	2300      	movs	r3, #0
 8002e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e98:	3106      	adds	r1, #6
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	4401      	add	r1, r0
 8002e9e:	b2d3      	uxtb	r3, r2
 8002ea0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	0e0a      	lsrs	r2, r1, #24
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb4:	3107      	adds	r1, #7
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	4401      	add	r1, r0
 8002eba:	b2d3      	uxtb	r3, r2
 8002ebc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	372c      	adds	r7, #44	; 0x2c
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ed2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ed6:	b0bb      	sub	sp, #236	; 0xec
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8002ede:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ef4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002ef8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	ea40 0402 	orr.w	r4, r0, r2
 8002f0e:	ea41 0503 	orr.w	r5, r1, r3
 8002f12:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f16:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0219      	lsls	r1, r3, #8
 8002f38:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002f3c:	0210      	lsls	r0, r2, #8
 8002f3e:	ea44 0a00 	orr.w	sl, r4, r0
 8002f42:	ea45 0b01 	orr.w	fp, r5, r1
 8002f46:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f4a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	1c9a      	adds	r2, r3, #2
 8002f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0419      	lsls	r1, r3, #16
 8002f6c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002f70:	0410      	lsls	r0, r2, #16
 8002f72:	ea44 0300 	orr.w	r3, r4, r0
 8002f76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f7a:	ea45 0301 	orr.w	r3, r5, r1
 8002f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f82:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002f86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f8a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	1cda      	adds	r2, r3, #3
 8002f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002fa6:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8002faa:	ea40 0308 	orr.w	r3, r0, r8
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb2:	ea41 0309 	orr.w	r3, r1, r9
 8002fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fba:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002fbe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fc2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	1d1a      	adds	r2, r3, #4
 8002fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	ea44 0300 	orr.w	r3, r4, r0
 8002fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fee:	ea45 0301 	orr.w	r3, r5, r1
 8002ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ff6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002ffa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ffe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	1d5a      	adds	r2, r3, #5
 8003008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800300c:	4413      	add	r3, r2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	0211      	lsls	r1, r2, #8
 8003020:	2000      	movs	r0, #0
 8003022:	ea44 0300 	orr.w	r3, r4, r0
 8003026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800302a:	ea45 0301 	orr.w	r3, r5, r1
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003032:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003036:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800303a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	1d9a      	adds	r2, r3, #6
 8003044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	0411      	lsls	r1, r2, #16
 800305c:	2000      	movs	r0, #0
 800305e:	ea44 0300 	orr.w	r3, r4, r0
 8003062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003066:	ea45 0301 	orr.w	r3, r5, r1
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800306e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003072:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003076:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800307a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307e:	1dda      	adds	r2, r3, #7
 8003080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f04f 0000 	mov.w	r0, #0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	0611      	lsls	r1, r2, #24
 8003098:	2000      	movs	r0, #0
 800309a:	ea44 0300 	orr.w	r3, r4, r0
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030a2:	ea45 0301 	orr.w	r3, r5, r1
 80030a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030aa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80030ae:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 80030b2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80030b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	3308      	adds	r3, #8
 80030c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80030d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030e0:	4413      	add	r3, r2
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea40 0402 	orr.w	r4, r0, r2
 80030ee:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80030f2:	430b      	orrs	r3, r1
 80030f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030f8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80030fc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003100:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f04f 0000 	mov.w	r0, #0
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	0219      	lsls	r1, r3, #8
 8003122:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003126:	0210      	lsls	r0, r2, #8
 8003128:	ea44 0300 	orr.w	r3, r4, r0
 800312c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003130:	ea45 0301 	orr.w	r3, r5, r1
 8003134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003138:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800313c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003140:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0419      	lsls	r1, r3, #16
 8003162:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003166:	0410      	lsls	r0, r2, #16
 8003168:	ea44 0300 	orr.w	r3, r4, r0
 800316c:	67bb      	str	r3, [r7, #120]	; 0x78
 800316e:	ea45 0301 	orr.w	r3, r5, r1
 8003172:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003174:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003178:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800317c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	1cda      	adds	r2, r3, #3
 8003186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800318a:	4413      	add	r3, r2
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	0a14      	lsrs	r4, r2, #8
 8003196:	677c      	str	r4, [r7, #116]	; 0x74
 8003198:	0613      	lsls	r3, r2, #24
 800319a:	673b      	str	r3, [r7, #112]	; 0x70
 800319c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80031a0:	4623      	mov	r3, r4
 80031a2:	4303      	orrs	r3, r0
 80031a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a6:	462b      	mov	r3, r5
 80031a8:	430b      	orrs	r3, r1
 80031aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031b0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031b4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031bc:	1d1a      	adds	r2, r3, #4
 80031be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f04f 0000 	mov.w	r0, #0
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	0011      	movs	r1, r2
 80031d6:	2000      	movs	r0, #0
 80031d8:	ea44 0300 	orr.w	r3, r4, r0
 80031dc:	663b      	str	r3, [r7, #96]	; 0x60
 80031de:	ea45 0301 	orr.w	r3, r5, r1
 80031e2:	667b      	str	r3, [r7, #100]	; 0x64
 80031e4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80031e8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80031ec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	1d5a      	adds	r2, r3, #5
 80031f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031fa:	4413      	add	r3, r2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0211      	lsls	r1, r2, #8
 800320e:	2000      	movs	r0, #0
 8003210:	ea44 0300 	orr.w	r3, r4, r0
 8003214:	65bb      	str	r3, [r7, #88]	; 0x58
 8003216:	ea45 0301 	orr.w	r3, r5, r1
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003220:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003224:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322c:	1d9a      	adds	r2, r3, #6
 800322e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0000 	mov.w	r0, #0
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	0411      	lsls	r1, r2, #16
 8003246:	2000      	movs	r0, #0
 8003248:	ea44 0300 	orr.w	r3, r4, r0
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
 800324e:	ea45 0301 	orr.w	r3, r5, r1
 8003252:	657b      	str	r3, [r7, #84]	; 0x54
 8003254:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003258:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800325c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003264:	1dda      	adds	r2, r3, #7
 8003266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0611      	lsls	r1, r2, #24
 800327e:	2000      	movs	r0, #0
 8003280:	ea44 0300 	orr.w	r3, r4, r0
 8003284:	64bb      	str	r3, [r7, #72]	; 0x48
 8003286:	ea45 0301 	orr.w	r3, r5, r1
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003290:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8003294:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	3308      	adds	r3, #8
 80032a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	ea40 0402 	orr.w	r4, r0, r2
 80032d0:	643c      	str	r4, [r7, #64]	; 0x40
 80032d2:	430b      	orrs	r3, r1
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
 80032d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80032da:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032de:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f04f 0000 	mov.w	r0, #0
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	0219      	lsls	r1, r3, #8
 8003300:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003304:	0210      	lsls	r0, r2, #8
 8003306:	ea44 0300 	orr.w	r3, r4, r0
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
 800330c:	ea45 0301 	orr.w	r3, r5, r1
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003312:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003316:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800331a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003328:	4413      	add	r3, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0419      	lsls	r1, r3, #16
 800333c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003340:	0410      	lsls	r0, r2, #16
 8003342:	ea44 0300 	orr.w	r3, r4, r0
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
 8003348:	ea45 0301 	orr.w	r3, r5, r1
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
 800334e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003352:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335e:	1cda      	adds	r2, r3, #3
 8003360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	0a14      	lsrs	r4, r2, #8
 8003370:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003372:	0613      	lsls	r3, r2, #24
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800337a:	4623      	mov	r3, r4
 800337c:	4303      	orrs	r3, r0
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	462b      	mov	r3, r5
 8003382:	430b      	orrs	r3, r1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800338a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800338e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	3304      	adds	r3, #4
 8003398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2dc      	uxtb	r4, r3
 80033a2:	f04f 0500 	mov.w	r5, #0
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	0023      	movs	r3, r4
 80033b0:	2200      	movs	r2, #0
 80033b2:	ea40 0402 	orr.w	r4, r0, r2
 80033b6:	61bc      	str	r4, [r7, #24]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80033c0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033c4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033cc:	3305      	adds	r3, #5
 80033ce:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2dc      	uxtb	r4, r3
 80033d8:	f04f 0500 	mov.w	r5, #0
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	0223      	lsls	r3, r4, #8
 80033e6:	2200      	movs	r2, #0
 80033e8:	ea40 0402 	orr.w	r4, r0, r2
 80033ec:	613c      	str	r4, [r7, #16]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033f6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	3306      	adds	r3, #6
 8003404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003408:	4413      	add	r3, r2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2dc      	uxtb	r4, r3
 800340e:	f04f 0500 	mov.w	r5, #0
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	0423      	lsls	r3, r4, #16
 800341c:	2200      	movs	r2, #0
 800341e:	ea40 0402 	orr.w	r4, r0, r2
 8003422:	60bc      	str	r4, [r7, #8]
 8003424:	430b      	orrs	r3, r1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800342c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003430:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003438:	3307      	adds	r3, #7
 800343a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800343e:	4413      	add	r3, r2
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2dc      	uxtb	r4, r3
 8003444:	f04f 0500 	mov.w	r5, #0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	0623      	lsls	r3, r4, #24
 8003452:	2200      	movs	r2, #0
 8003454:	ea40 0402 	orr.w	r4, r0, r2
 8003458:	603c      	str	r4, [r7, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003462:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8003466:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800346a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800346e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	3308      	adds	r3, #8
 8003478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8003480:	4618      	mov	r0, r3
 8003482:	37ec      	adds	r7, #236	; 0xec
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800348a:	4770      	bx	lr

0800348c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0800ff48 	.word	0x0800ff48

080034a8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	0800ff60 	.word	0x0800ff60

080034c4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fb28 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3308      	adds	r3, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fb5c 	bl	8002b9c <_ZN13geometry_msgs7Vector3C1Ev>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3328      	adds	r3, #40	; 0x28
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fb57 	bl	8002b9c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	0801016c 	.word	0x0801016c

080034fc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0008 	add.w	r0, r3, #8
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7ff fb68 	bl	8002bec <_ZNK13geometry_msgs7Vector39serializeEPh>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7ff fb5b 	bl	8002bec <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
      return offset;
 800353e:	68fb      	ldr	r3, [r7, #12]
    }
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f103 0008 	add.w	r0, r3, #8
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7ff fcb5 	bl	8002ed2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7ff fca8 	bl	8002ed2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
     return offset;
 800358a:	68fb      	ldr	r3, [r7, #12]
    }
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	0800ff84 	.word	0x0800ff84

080035b0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	0800ff98 	.word	0x0800ff98

080035cc <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe faa4 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3308      	adds	r3, #8
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fa88 	bl	8001b02 <_ZN3ros4TimeC1Ev>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80035f6:	611a      	str	r2, [r3, #16]
    {
    }
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	08010154 	.word	0x08010154
 8003608:	0800fe74 	.word	0x0800fe74

0800360c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	4413      	add	r3, r2
 8003624:	b2ca      	uxtb	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0a19      	lsrs	r1, r3, #8
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3301      	adds	r3, #1
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	b2ca      	uxtb	r2, r1
 8003638:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	0c19      	lsrs	r1, r3, #16
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3302      	adds	r3, #2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	4413      	add	r3, r2
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0e19      	lsrs	r1, r3, #24
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3303      	adds	r3, #3
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4413      	add	r3, r2
 800365a:	b2ca      	uxtb	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3304      	adds	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4413      	add	r3, r2
 800366e:	b2ca      	uxtb	r2, r1
 8003670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a19      	lsrs	r1, r3, #8
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	4413      	add	r3, r2
 8003680:	b2ca      	uxtb	r2, r1
 8003682:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	0c19      	lsrs	r1, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3302      	adds	r3, #2
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	b2ca      	uxtb	r2, r1
 8003694:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0e19      	lsrs	r1, r3, #24
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3303      	adds	r3, #3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	b2ca      	uxtb	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3304      	adds	r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	b2ca      	uxtb	r2, r1
 80036ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a19      	lsrs	r1, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3301      	adds	r3, #1
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	b2ca      	uxtb	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	0c19      	lsrs	r1, r3, #16
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3302      	adds	r3, #2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	b2ca      	uxtb	r2, r1
 80036de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0e19      	lsrs	r1, r3, #24
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3303      	adds	r3, #3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	b2ca      	uxtb	r2, r1
 80036f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fd67 	bl	80001d0 <strlen>
 8003702:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4413      	add	r3, r2
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f002 fa51 	bl	8005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3304      	adds	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	18d0      	adds	r0, r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4619      	mov	r1, r3
 8003726:	f007 feed 	bl	800b504 <memcpy>
      offset += length_frame_id;
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
      return offset;
 8003732:	68fb      	ldr	r3, [r7, #12]
    }
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4413      	add	r3, r2
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3301      	adds	r3, #1
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	440b      	add	r3, r1
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	3302      	adds	r3, #2
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	440b      	add	r3, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3303      	adds	r3, #3
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	440b      	add	r3, r1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3304      	adds	r3, #4
 800379e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	4413      	add	r3, r2
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3301      	adds	r3, #1
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	440b      	add	r3, r1
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3302      	adds	r3, #2
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	440b      	add	r3, r1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3303      	adds	r3, #3
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	440b      	add	r3, r1
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3304      	adds	r3, #4
 80037f4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3301      	adds	r3, #1
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	440b      	add	r3, r1
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3302      	adds	r3, #2
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	440b      	add	r3, r1
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3303      	adds	r3, #3
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	440b      	add	r3, r1
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3304      	adds	r3, #4
 800384a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	441a      	add	r2, r3
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f002 f9c9 	bl	8005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3304      	adds	r3, #4
 8003862:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d20c      	bcs.n	800388e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	441a      	add	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3b01      	subs	r3, #1
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	440b      	add	r3, r1
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	3301      	adds	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e7ec      	b.n	8003868 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	3b01      	subs	r3, #1
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	441a      	add	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
     return offset;
 80038b2:	693b      	ldr	r3, [r7, #16]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	0800ffbc 	.word	0x0800ffbc

080038d8 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	0800ffcc 	.word	0x0800ffcc

080038f4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe f910 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	0801013c 	.word	0x0801013c

08003950 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003950:	b480      	push	{r7}
 8003952:	b08d      	sub	sp, #52	; 0x34
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003964:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800396c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	4401      	add	r1, r0
 8003972:	b2d3      	uxtb	r3, r2
 8003974:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003976:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	0a02      	lsrs	r2, r0, #8
 8003984:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003988:	0a0b      	lsrs	r3, r1, #8
 800398a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398c:	3101      	adds	r1, #1
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	4401      	add	r1, r0
 8003992:	b2d3      	uxtb	r3, r2
 8003994:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003996:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	0c02      	lsrs	r2, r0, #16
 80039a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039a8:	0c0b      	lsrs	r3, r1, #16
 80039aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ac:	3102      	adds	r1, #2
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	4401      	add	r1, r0
 80039b2:	b2d3      	uxtb	r3, r2
 80039b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80039b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	0e02      	lsrs	r2, r0, #24
 80039c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039c8:	0e0b      	lsrs	r3, r1, #24
 80039ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039cc:	3103      	adds	r1, #3
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	4401      	add	r1, r0
 80039d2:	b2d3      	uxtb	r3, r2
 80039d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80039d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	000a      	movs	r2, r1
 80039e4:	2300      	movs	r3, #0
 80039e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039e8:	3104      	adds	r1, #4
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	4401      	add	r1, r0
 80039ee:	b2d3      	uxtb	r3, r2
 80039f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80039f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	0a0a      	lsrs	r2, r1, #8
 8003a00:	2300      	movs	r3, #0
 8003a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a04:	3105      	adds	r1, #5
 8003a06:	6838      	ldr	r0, [r7, #0]
 8003a08:	4401      	add	r1, r0
 8003a0a:	b2d3      	uxtb	r3, r2
 8003a0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003a0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	0c0a      	lsrs	r2, r1, #16
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a20:	3106      	adds	r1, #6
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	4401      	add	r1, r0
 8003a26:	b2d3      	uxtb	r3, r2
 8003a28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003a2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	0e0a      	lsrs	r2, r1, #24
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3c:	3107      	adds	r1, #7
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	4401      	add	r1, r0
 8003a42:	b2d3      	uxtb	r3, r2
 8003a44:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	3308      	adds	r3, #8
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a52:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	4401      	add	r1, r0
 8003a60:	b2d3      	uxtb	r3, r2
 8003a62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003a64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	0a02      	lsrs	r2, r0, #8
 8003a72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a76:	0a0b      	lsrs	r3, r1, #8
 8003a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a7a:	3101      	adds	r1, #1
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	4401      	add	r1, r0
 8003a80:	b2d3      	uxtb	r3, r2
 8003a82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003a84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	0c02      	lsrs	r2, r0, #16
 8003a92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a96:	0c0b      	lsrs	r3, r1, #16
 8003a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a9a:	3102      	adds	r1, #2
 8003a9c:	6838      	ldr	r0, [r7, #0]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	b2d3      	uxtb	r3, r2
 8003aa2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003aa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	0e02      	lsrs	r2, r0, #24
 8003ab2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ab6:	0e0b      	lsrs	r3, r1, #24
 8003ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aba:	3103      	adds	r1, #3
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	b2d3      	uxtb	r3, r2
 8003ac2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003ac4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad6:	3104      	adds	r1, #4
 8003ad8:	6838      	ldr	r0, [r7, #0]
 8003ada:	4401      	add	r1, r0
 8003adc:	b2d3      	uxtb	r3, r2
 8003ade:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003ae0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	0a0a      	lsrs	r2, r1, #8
 8003aee:	2300      	movs	r3, #0
 8003af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af2:	3105      	adds	r1, #5
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	4401      	add	r1, r0
 8003af8:	b2d3      	uxtb	r3, r2
 8003afa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	0c0a      	lsrs	r2, r1, #16
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0e:	3106      	adds	r1, #6
 8003b10:	6838      	ldr	r0, [r7, #0]
 8003b12:	4401      	add	r1, r0
 8003b14:	b2d3      	uxtb	r3, r2
 8003b16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	0e0a      	lsrs	r2, r1, #24
 8003b26:	2300      	movs	r3, #0
 8003b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2a:	3107      	adds	r1, #7
 8003b2c:	6838      	ldr	r0, [r7, #0]
 8003b2e:	4401      	add	r1, r0
 8003b30:	b2d3      	uxtb	r3, r2
 8003b32:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	3308      	adds	r3, #8
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4a:	6838      	ldr	r0, [r7, #0]
 8003b4c:	4401      	add	r1, r0
 8003b4e:	b2d3      	uxtb	r3, r2
 8003b50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003b52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	0a02      	lsrs	r2, r0, #8
 8003b60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b64:	0a0b      	lsrs	r3, r1, #8
 8003b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b68:	3101      	adds	r1, #1
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	4401      	add	r1, r0
 8003b6e:	b2d3      	uxtb	r3, r2
 8003b70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003b72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	0c02      	lsrs	r2, r0, #16
 8003b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b84:	0c0b      	lsrs	r3, r1, #16
 8003b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b88:	3102      	adds	r1, #2
 8003b8a:	6838      	ldr	r0, [r7, #0]
 8003b8c:	4401      	add	r1, r0
 8003b8e:	b2d3      	uxtb	r3, r2
 8003b90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003b92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	0e02      	lsrs	r2, r0, #24
 8003ba0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ba4:	0e0b      	lsrs	r3, r1, #24
 8003ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba8:	3103      	adds	r1, #3
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	4401      	add	r1, r0
 8003bae:	b2d3      	uxtb	r3, r2
 8003bb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	000a      	movs	r2, r1
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc4:	3104      	adds	r1, #4
 8003bc6:	6838      	ldr	r0, [r7, #0]
 8003bc8:	4401      	add	r1, r0
 8003bca:	b2d3      	uxtb	r3, r2
 8003bcc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003bce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	0a0a      	lsrs	r2, r1, #8
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be0:	3105      	adds	r1, #5
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	4401      	add	r1, r0
 8003be6:	b2d3      	uxtb	r3, r2
 8003be8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003bea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	0c0a      	lsrs	r2, r1, #16
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bfc:	3106      	adds	r1, #6
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	4401      	add	r1, r0
 8003c02:	b2d3      	uxtb	r3, r2
 8003c04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	0e0a      	lsrs	r2, r1, #24
 8003c14:	2300      	movs	r3, #0
 8003c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c18:	3107      	adds	r1, #7
 8003c1a:	6838      	ldr	r0, [r7, #0]
 8003c1c:	4401      	add	r1, r0
 8003c1e:	b2d3      	uxtb	r3, r2
 8003c20:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	3308      	adds	r3, #8
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8003c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c38:	6838      	ldr	r0, [r7, #0]
 8003c3a:	4401      	add	r1, r0
 8003c3c:	b2d3      	uxtb	r3, r2
 8003c3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	0a02      	lsrs	r2, r0, #8
 8003c4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c52:	0a0b      	lsrs	r3, r1, #8
 8003c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c56:	3101      	adds	r1, #1
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	4401      	add	r1, r0
 8003c5c:	b2d3      	uxtb	r3, r2
 8003c5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	0c02      	lsrs	r2, r0, #16
 8003c6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c72:	0c0b      	lsrs	r3, r1, #16
 8003c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c76:	3102      	adds	r1, #2
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	b2d3      	uxtb	r3, r2
 8003c7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003c80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	0e02      	lsrs	r2, r0, #24
 8003c8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c92:	0e0b      	lsrs	r3, r1, #24
 8003c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c96:	3103      	adds	r1, #3
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	4401      	add	r1, r0
 8003c9c:	b2d3      	uxtb	r3, r2
 8003c9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	000a      	movs	r2, r1
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb2:	3104      	adds	r1, #4
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	4401      	add	r1, r0
 8003cb8:	b2d3      	uxtb	r3, r2
 8003cba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	0a0a      	lsrs	r2, r1, #8
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cce:	3105      	adds	r1, #5
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	4401      	add	r1, r0
 8003cd4:	b2d3      	uxtb	r3, r2
 8003cd6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	0c0a      	lsrs	r2, r1, #16
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cea:	3106      	adds	r1, #6
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	4401      	add	r1, r0
 8003cf0:	b2d3      	uxtb	r3, r2
 8003cf2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8003cf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	0e0a      	lsrs	r2, r1, #24
 8003d02:	2300      	movs	r3, #0
 8003d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d06:	3107      	adds	r1, #7
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	b2d3      	uxtb	r3, r2
 8003d0e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	3308      	adds	r3, #8
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3734      	adds	r7, #52	; 0x34
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003d24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d28:	b0cf      	sub	sp, #316	; 0x13c
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8003d30:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d46:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003d4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	ea40 0402 	orr.w	r4, r0, r2
 8003d60:	ea41 0503 	orr.w	r5, r1, r3
 8003d64:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d68:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0219      	lsls	r1, r3, #8
 8003d8a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003d8e:	0210      	lsls	r0, r2, #8
 8003d90:	ea44 0a00 	orr.w	sl, r4, r0
 8003d94:	ea45 0b01 	orr.w	fp, r5, r1
 8003d98:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d9c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	0419      	lsls	r1, r3, #16
 8003dbe:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003dc2:	0410      	lsls	r0, r2, #16
 8003dc4:	ea44 0300 	orr.w	r3, r4, r0
 8003dc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dcc:	ea45 0301 	orr.w	r3, r5, r1
 8003dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dd4:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003dd8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ddc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003de0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003de4:	1cda      	adds	r2, r3, #3
 8003de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003df8:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003dfc:	ea40 0308 	orr.w	r3, r0, r8
 8003e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e04:	ea41 0309 	orr.w	r3, r1, r9
 8003e08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e0c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8003e10:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e14:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	0011      	movs	r1, r2
 8003e36:	2000      	movs	r0, #0
 8003e38:	ea44 0300 	orr.w	r3, r4, r0
 8003e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e40:	ea45 0301 	orr.w	r3, r5, r1
 8003e44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e48:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003e4c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e50:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e58:	1d5a      	adds	r2, r3, #5
 8003e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f04f 0000 	mov.w	r0, #0
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	0211      	lsls	r1, r2, #8
 8003e72:	2000      	movs	r0, #0
 8003e74:	ea44 0300 	orr.w	r3, r4, r0
 8003e78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e7c:	ea45 0301 	orr.w	r3, r5, r1
 8003e80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e84:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8003e88:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e8c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e94:	1d9a      	adds	r2, r3, #6
 8003e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	0411      	lsls	r1, r2, #16
 8003eae:	2000      	movs	r0, #0
 8003eb0:	ea44 0300 	orr.w	r3, r4, r0
 8003eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb8:	ea45 0301 	orr.w	r3, r5, r1
 8003ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ec0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003ec4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ec8:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ed0:	1dda      	adds	r2, r3, #7
 8003ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f04f 0000 	mov.w	r0, #0
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	0611      	lsls	r1, r2, #24
 8003eea:	2000      	movs	r0, #0
 8003eec:	ea44 0300 	orr.w	r3, r4, r0
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ef4:	ea45 0301 	orr.w	r3, r5, r1
 8003ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003efc:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8003f00:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 8003f04:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003f10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f26:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003f2a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	ea40 0402 	orr.w	r4, r0, r2
 8003f40:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8003f44:	430b      	orrs	r3, r1
 8003f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f4a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8003f4e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f52:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	f04f 0000 	mov.w	r0, #0
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	0219      	lsls	r1, r3, #8
 8003f74:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003f78:	0210      	lsls	r0, r2, #8
 8003f7a:	ea44 0300 	orr.w	r3, r4, r0
 8003f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f82:	ea45 0301 	orr.w	r3, r5, r1
 8003f86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f8a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003f8e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f92:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f9a:	1c9a      	adds	r2, r3, #2
 8003f9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fa0:	4413      	add	r3, r2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0419      	lsls	r1, r3, #16
 8003fb4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003fb8:	0410      	lsls	r0, r2, #16
 8003fba:	ea44 0300 	orr.w	r3, r4, r0
 8003fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc2:	ea45 0301 	orr.w	r3, r5, r1
 8003fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fca:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8003fce:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fd2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fda:	1cda      	adds	r2, r3, #3
 8003fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	0a14      	lsrs	r4, r2, #8
 8003fec:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8003ff0:	0613      	lsls	r3, r2, #24
 8003ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ff6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	4303      	orrs	r3, r0
 8003ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004002:	462b      	mov	r3, r5
 8004004:	430b      	orrs	r3, r1
 8004006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800400a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800400e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004012:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8004016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004020:	4413      	add	r3, r2
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	f04f 0000 	mov.w	r0, #0
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	0011      	movs	r1, r2
 8004034:	2000      	movs	r0, #0
 8004036:	ea44 0300 	orr.w	r3, r4, r0
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800403e:	ea45 0301 	orr.w	r3, r5, r1
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004046:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800404a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800404e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8004052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004056:	1d5a      	adds	r2, r3, #5
 8004058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800405c:	4413      	add	r3, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f04f 0000 	mov.w	r0, #0
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	0211      	lsls	r1, r2, #8
 8004070:	2000      	movs	r0, #0
 8004072:	ea44 0300 	orr.w	r3, r4, r0
 8004076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800407a:	ea45 0301 	orr.w	r3, r5, r1
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004082:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004086:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800408a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800408e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004092:	1d9a      	adds	r2, r3, #6
 8004094:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004098:	4413      	add	r3, r2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	0411      	lsls	r1, r2, #16
 80040ac:	2000      	movs	r0, #0
 80040ae:	ea44 0300 	orr.w	r3, r4, r0
 80040b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040b6:	ea45 0301 	orr.w	r3, r5, r1
 80040ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040be:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80040c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80040c6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80040ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040ce:	1dda      	adds	r2, r3, #7
 80040d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	f04f 0000 	mov.w	r0, #0
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	0611      	lsls	r1, r2, #24
 80040e8:	2000      	movs	r0, #0
 80040ea:	ea44 0300 	orr.w	r3, r4, r0
 80040ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f2:	ea45 0301 	orr.w	r3, r5, r1
 80040f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040fa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80040fe:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 8004102:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800410e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004112:	3308      	adds	r3, #8
 8004114:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004124:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8004128:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800412c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea40 0402 	orr.w	r4, r0, r2
 800413e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004142:	430b      	orrs	r3, r1
 8004144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004148:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800414c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004150:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004154:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	0219      	lsls	r1, r3, #8
 8004172:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004176:	0210      	lsls	r0, r2, #8
 8004178:	ea44 0300 	orr.w	r3, r4, r0
 800417c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004180:	ea45 0301 	orr.w	r3, r5, r1
 8004184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004188:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800418c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004190:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004194:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	f04f 0000 	mov.w	r0, #0
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	0419      	lsls	r1, r3, #16
 80041b2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80041b6:	0410      	lsls	r0, r2, #16
 80041b8:	ea44 0300 	orr.w	r3, r4, r0
 80041bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80041be:	ea45 0301 	orr.w	r3, r5, r1
 80041c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041c4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80041c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041cc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80041d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041d4:	1cda      	adds	r2, r3, #3
 80041d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041da:	4413      	add	r3, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	0a14      	lsrs	r4, r2, #8
 80041e6:	677c      	str	r4, [r7, #116]	; 0x74
 80041e8:	0613      	lsls	r3, r2, #24
 80041ea:	673b      	str	r3, [r7, #112]	; 0x70
 80041ec:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80041f0:	4623      	mov	r3, r4
 80041f2:	4303      	orrs	r3, r0
 80041f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f6:	462b      	mov	r3, r5
 80041f8:	430b      	orrs	r3, r1
 80041fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004200:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004204:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800420c:	1d1a      	adds	r2, r3, #4
 800420e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0000 	mov.w	r0, #0
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	0011      	movs	r1, r2
 8004226:	2000      	movs	r0, #0
 8004228:	ea44 0300 	orr.w	r3, r4, r0
 800422c:	663b      	str	r3, [r7, #96]	; 0x60
 800422e:	ea45 0301 	orr.w	r3, r5, r1
 8004232:	667b      	str	r3, [r7, #100]	; 0x64
 8004234:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004238:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800423c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004244:	1d5a      	adds	r2, r3, #5
 8004246:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	0211      	lsls	r1, r2, #8
 800425e:	2000      	movs	r0, #0
 8004260:	ea44 0300 	orr.w	r3, r4, r0
 8004264:	65bb      	str	r3, [r7, #88]	; 0x58
 8004266:	ea45 0301 	orr.w	r3, r5, r1
 800426a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004270:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004274:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800427c:	1d9a      	adds	r2, r3, #6
 800427e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004282:	4413      	add	r3, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f04f 0000 	mov.w	r0, #0
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	0411      	lsls	r1, r2, #16
 8004296:	2000      	movs	r0, #0
 8004298:	ea44 0300 	orr.w	r3, r4, r0
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
 800429e:	ea45 0301 	orr.w	r3, r5, r1
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
 80042a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80042a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80042ac:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80042b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042b4:	1dda      	adds	r2, r3, #7
 80042b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042ba:	4413      	add	r3, r2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	0611      	lsls	r1, r2, #24
 80042ce:	2000      	movs	r0, #0
 80042d0:	ea44 0300 	orr.w	r3, r4, r0
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042d6:	ea45 0301 	orr.w	r3, r5, r1
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80042e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 80042e4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 80042f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042f4:	3308      	adds	r3, #8
 80042f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004306:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800430a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800430e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea40 0402 	orr.w	r4, r0, r2
 8004320:	643c      	str	r4, [r7, #64]	; 0x40
 8004322:	430b      	orrs	r3, r1
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800432a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800432e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8004332:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800433c:	4413      	add	r3, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	0219      	lsls	r1, r3, #8
 8004350:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004354:	0210      	lsls	r0, r2, #8
 8004356:	ea44 0300 	orr.w	r3, r4, r0
 800435a:	63bb      	str	r3, [r7, #56]	; 0x38
 800435c:	ea45 0301 	orr.w	r3, r5, r1
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004362:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004366:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800436a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800436e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004378:	4413      	add	r3, r2
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	0419      	lsls	r1, r3, #16
 800438c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004390:	0410      	lsls	r0, r2, #16
 8004392:	ea44 0300 	orr.w	r3, r4, r0
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
 8004398:	ea45 0301 	orr.w	r3, r5, r1
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80043a2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043a6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80043aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043ae:	1cda      	adds	r2, r3, #3
 80043b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	0a14      	lsrs	r4, r2, #8
 80043c0:	62fc      	str	r4, [r7, #44]	; 0x2c
 80043c2:	0613      	lsls	r3, r2, #24
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80043ca:	4623      	mov	r3, r4
 80043cc:	4303      	orrs	r3, r0
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	462b      	mov	r3, r5
 80043d2:	430b      	orrs	r3, r1
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80043da:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80043de:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80043e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043e6:	3304      	adds	r3, #4
 80043e8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80043ec:	4413      	add	r3, r2
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b2dc      	uxtb	r4, r3
 80043f2:	f04f 0500 	mov.w	r5, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	0023      	movs	r3, r4
 8004400:	2200      	movs	r2, #0
 8004402:	ea40 0402 	orr.w	r4, r0, r2
 8004406:	61bc      	str	r4, [r7, #24]
 8004408:	430b      	orrs	r3, r1
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004410:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004414:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800441c:	3305      	adds	r3, #5
 800441e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004422:	4413      	add	r3, r2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2dc      	uxtb	r4, r3
 8004428:	f04f 0500 	mov.w	r5, #0
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	0223      	lsls	r3, r4, #8
 8004436:	2200      	movs	r2, #0
 8004438:	ea40 0402 	orr.w	r4, r0, r2
 800443c:	613c      	str	r4, [r7, #16]
 800443e:	430b      	orrs	r3, r1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004446:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800444a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800444e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004452:	3306      	adds	r3, #6
 8004454:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b2dc      	uxtb	r4, r3
 800445e:	f04f 0500 	mov.w	r5, #0
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	0423      	lsls	r3, r4, #16
 800446c:	2200      	movs	r2, #0
 800446e:	ea40 0402 	orr.w	r4, r0, r2
 8004472:	60bc      	str	r4, [r7, #8]
 8004474:	430b      	orrs	r3, r1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800447c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004480:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004484:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004488:	3307      	adds	r3, #7
 800448a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2dc      	uxtb	r4, r3
 8004494:	f04f 0500 	mov.w	r5, #0
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	0623      	lsls	r3, r4, #24
 80044a2:	2200      	movs	r2, #0
 80044a4:	ea40 0402 	orr.w	r4, r0, r2
 80044a8:	603c      	str	r4, [r7, #0]
 80044aa:	430b      	orrs	r3, r1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044b2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 80044b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80044ba:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80044be:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 80044c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044c6:	3308      	adds	r3, #8
 80044c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 80044cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 80044d0:	4618      	mov	r0, r3
 80044d2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80044d6:	46bd      	mov	sp, r7
 80044d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80044dc:	4770      	bx	lr
	...

080044e0 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	0800fff0 	.word	0x0800fff0

080044fc <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	0801000c 	.word	0x0801000c

08004518 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd fafe 	bl	8001b24 <_ZN3ros3MsgC1Ev>
 8004528:	4a24      	ldr	r2, [pc, #144]	; (80045bc <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f84a 	bl	80035cc <_ZN8std_msgs6HeaderC1Ev>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3318      	adds	r3, #24
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f9d9 	bl	80038f4 <_ZN13geometry_msgs10QuaternionC1Ev>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004548:	2308      	movs	r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	db08      	blt.n	8004560 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 800454e:	f04f 0000 	mov.w	r0, #0
 8004552:	f04f 0100 	mov.w	r1, #0
 8004556:	e9c2 0100 	strd	r0, r1, [r2]
 800455a:	3208      	adds	r2, #8
 800455c:	3b01      	subs	r3, #1
 800455e:	e7f4      	b.n	800454a <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3388      	adds	r3, #136	; 0x88
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fb19 	bl	8002b9c <_ZN13geometry_msgs7Vector3C1Ev>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004570:	2308      	movs	r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	db08      	blt.n	8004588 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	e9c2 0100 	strd	r0, r1, [r2]
 8004582:	3208      	adds	r2, #8
 8004584:	3b01      	subs	r3, #1
 8004586:	e7f4      	b.n	8004572 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	33f0      	adds	r3, #240	; 0xf0
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fb05 	bl	8002b9c <_ZN13geometry_msgs7Vector3C1Ev>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8004598:	2308      	movs	r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	db08      	blt.n	80045b0 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 800459e:	f04f 0000 	mov.w	r0, #0
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	e9c2 0100 	strd	r0, r1, [r2]
 80045aa:	3208      	adds	r2, #8
 80045ac:	3b01      	subs	r3, #1
 80045ae:	e7f4      	b.n	800459a <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	08010124 	.word	0x08010124

080045c0 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1d18      	adds	r0, r3, #4
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	4413      	add	r3, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	f7ff f817 	bl	800360c <_ZNK8std_msgs6Header9serializeEPh>
 80045de:	4602      	mov	r2, r0
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	4413      	add	r3, r2
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 0018 	add.w	r0, r3, #24
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	f7ff f9ac 	bl	8003950 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	4413      	add	r3, r2
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004600:	2300      	movs	r3, #0
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b08      	cmp	r3, #8
 8004608:	d87e      	bhi.n	8004708 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	3308      	adds	r3, #8
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004622:	6838      	ldr	r0, [r7, #0]
 8004624:	4401      	add	r1, r0
 8004626:	b2d3      	uxtb	r3, r2
 8004628:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800462a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	0a02      	lsrs	r2, r0, #8
 8004638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800463c:	0a0b      	lsrs	r3, r1, #8
 800463e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004640:	3101      	adds	r1, #1
 8004642:	6838      	ldr	r0, [r7, #0]
 8004644:	4401      	add	r1, r0
 8004646:	b2d3      	uxtb	r3, r2
 8004648:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800464a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	0c02      	lsrs	r2, r0, #16
 8004658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800465c:	0c0b      	lsrs	r3, r1, #16
 800465e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004660:	3102      	adds	r1, #2
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	4401      	add	r1, r0
 8004666:	b2d3      	uxtb	r3, r2
 8004668:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800466a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	0e02      	lsrs	r2, r0, #24
 8004678:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800467c:	0e0b      	lsrs	r3, r1, #24
 800467e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004680:	3103      	adds	r1, #3
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	4401      	add	r1, r0
 8004686:	b2d3      	uxtb	r3, r2
 8004688:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800468a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	000a      	movs	r2, r1
 8004698:	2300      	movs	r3, #0
 800469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469c:	3104      	adds	r1, #4
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	4401      	add	r1, r0
 80046a2:	b2d3      	uxtb	r3, r2
 80046a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80046a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	0a0a      	lsrs	r2, r1, #8
 80046b4:	2300      	movs	r3, #0
 80046b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b8:	3105      	adds	r1, #5
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	4401      	add	r1, r0
 80046be:	b2d3      	uxtb	r3, r2
 80046c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80046c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	0c0a      	lsrs	r2, r1, #16
 80046d0:	2300      	movs	r3, #0
 80046d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d4:	3106      	adds	r1, #6
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	4401      	add	r1, r0
 80046da:	b2d3      	uxtb	r3, r2
 80046dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80046de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	0e0a      	lsrs	r2, r1, #24
 80046ec:	2300      	movs	r3, #0
 80046ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f0:	3107      	adds	r1, #7
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	4401      	add	r1, r0
 80046f6:	b2d3      	uxtb	r3, r2
 80046f8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	3308      	adds	r3, #8
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	3301      	adds	r3, #1
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
 8004706:	e77d      	b.n	8004604 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4413      	add	r3, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f7fe fa69 	bl	8002bec <_ZNK13geometry_msgs7Vector39serializeEPh>
 800471a:	4602      	mov	r2, r0
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	4413      	add	r3, r2
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	2b08      	cmp	r3, #8
 800472a:	d87e      	bhi.n	800482a <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	3315      	adds	r3, #21
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800473e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004744:	6838      	ldr	r0, [r7, #0]
 8004746:	4401      	add	r1, r0
 8004748:	b2d3      	uxtb	r3, r2
 800474a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 800474c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	0a02      	lsrs	r2, r0, #8
 800475a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800475e:	0a0b      	lsrs	r3, r1, #8
 8004760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004762:	3101      	adds	r1, #1
 8004764:	6838      	ldr	r0, [r7, #0]
 8004766:	4401      	add	r1, r0
 8004768:	b2d3      	uxtb	r3, r2
 800476a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 800476c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	0c02      	lsrs	r2, r0, #16
 800477a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800477e:	0c0b      	lsrs	r3, r1, #16
 8004780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004782:	3102      	adds	r1, #2
 8004784:	6838      	ldr	r0, [r7, #0]
 8004786:	4401      	add	r1, r0
 8004788:	b2d3      	uxtb	r3, r2
 800478a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 800478c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	0e02      	lsrs	r2, r0, #24
 800479a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800479e:	0e0b      	lsrs	r3, r1, #24
 80047a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a2:	3103      	adds	r1, #3
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	4401      	add	r1, r0
 80047a8:	b2d3      	uxtb	r3, r2
 80047aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80047ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	000a      	movs	r2, r1
 80047ba:	2300      	movs	r3, #0
 80047bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047be:	3104      	adds	r1, #4
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	4401      	add	r1, r0
 80047c4:	b2d3      	uxtb	r3, r2
 80047c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80047c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	0a0a      	lsrs	r2, r1, #8
 80047d6:	2300      	movs	r3, #0
 80047d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047da:	3105      	adds	r1, #5
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	4401      	add	r1, r0
 80047e0:	b2d3      	uxtb	r3, r2
 80047e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80047e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	0c0a      	lsrs	r2, r1, #16
 80047f2:	2300      	movs	r3, #0
 80047f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f6:	3106      	adds	r1, #6
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	4401      	add	r1, r0
 80047fc:	b2d3      	uxtb	r3, r2
 80047fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	0e0a      	lsrs	r2, r1, #24
 800480e:	2300      	movs	r3, #0
 8004810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004812:	3107      	adds	r1, #7
 8004814:	6838      	ldr	r0, [r7, #0]
 8004816:	4401      	add	r1, r0
 8004818:	b2d3      	uxtb	r3, r2
 800481a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	3308      	adds	r3, #8
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	e77d      	b.n	8004726 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f7fe f9d8 	bl	8002bec <_ZNK13geometry_msgs7Vector39serializeEPh>
 800483c:	4602      	mov	r2, r0
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	4413      	add	r3, r2
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d87e      	bhi.n	800494c <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	3322      	adds	r3, #34	; 0x22
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	4401      	add	r1, r0
 800486a:	b2d3      	uxtb	r3, r2
 800486c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800486e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	0a02      	lsrs	r2, r0, #8
 800487c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004880:	0a0b      	lsrs	r3, r1, #8
 8004882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004884:	3101      	adds	r1, #1
 8004886:	6838      	ldr	r0, [r7, #0]
 8004888:	4401      	add	r1, r0
 800488a:	b2d3      	uxtb	r3, r2
 800488c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800488e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	0c02      	lsrs	r2, r0, #16
 800489c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048a0:	0c0b      	lsrs	r3, r1, #16
 80048a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a4:	3102      	adds	r1, #2
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	4401      	add	r1, r0
 80048aa:	b2d3      	uxtb	r3, r2
 80048ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80048ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	0e02      	lsrs	r2, r0, #24
 80048bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048c0:	0e0b      	lsrs	r3, r1, #24
 80048c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c4:	3103      	adds	r1, #3
 80048c6:	6838      	ldr	r0, [r7, #0]
 80048c8:	4401      	add	r1, r0
 80048ca:	b2d3      	uxtb	r3, r2
 80048cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80048ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	000a      	movs	r2, r1
 80048dc:	2300      	movs	r3, #0
 80048de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e0:	3104      	adds	r1, #4
 80048e2:	6838      	ldr	r0, [r7, #0]
 80048e4:	4401      	add	r1, r0
 80048e6:	b2d3      	uxtb	r3, r2
 80048e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80048ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	0a0a      	lsrs	r2, r1, #8
 80048f8:	2300      	movs	r3, #0
 80048fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048fc:	3105      	adds	r1, #5
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	4401      	add	r1, r0
 8004902:	b2d3      	uxtb	r3, r2
 8004904:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004906:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	0c0a      	lsrs	r2, r1, #16
 8004914:	2300      	movs	r3, #0
 8004916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004918:	3106      	adds	r1, #6
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	4401      	add	r1, r0
 800491e:	b2d3      	uxtb	r3, r2
 8004920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	0e0a      	lsrs	r2, r1, #24
 8004930:	2300      	movs	r3, #0
 8004932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004934:	3107      	adds	r1, #7
 8004936:	6838      	ldr	r0, [r7, #0]
 8004938:	4401      	add	r1, r0
 800493a:	b2d3      	uxtb	r3, r2
 800493c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	3308      	adds	r3, #8
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	3301      	adds	r3, #1
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e77d      	b.n	8004848 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800494e:	4618      	mov	r0, r3
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004956:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495a:	b0be      	sub	sp, #248	; 0xf8
 800495c:	af00      	add	r7, sp, #0
 800495e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8004962:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 800496c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004970:	1d18      	adds	r0, r3, #4
 8004972:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800497a:	4413      	add	r3, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f7fe fedd 	bl	800373c <_ZN8std_msgs6Header11deserializeEPh>
 8004982:	4602      	mov	r2, r0
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	4413      	add	r3, r2
 800498a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 800498e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004992:	f103 0018 	add.w	r0, r3, #24
 8004996:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800499a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800499e:	4413      	add	r3, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	f7ff f9bf 	bl	8003d24 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80049a6:	4602      	mov	r2, r0
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	4413      	add	r3, r2
 80049ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80049b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049bc:	2b08      	cmp	r3, #8
 80049be:	f200 8100 	bhi.w	8004bc2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80049ce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80049d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea40 0402 	orr.w	r4, r0, r2
 80049e8:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80049f6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80049fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a08:	4413      	add	r3, r2
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	0219      	lsls	r1, r3, #8
 8004a1c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004a20:	0210      	lsls	r0, r2, #8
 8004a22:	ea44 0300 	orr.w	r3, r4, r0
 8004a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a2a:	ea45 0301 	orr.w	r3, r5, r1
 8004a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a32:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004a36:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004a3a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a48:	4413      	add	r3, r2
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f04f 0100 	mov.w	r1, #0
 8004a5a:	0419      	lsls	r1, r3, #16
 8004a5c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004a60:	0410      	lsls	r0, r2, #16
 8004a62:	ea44 0300 	orr.w	r3, r4, r0
 8004a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a6a:	ea45 0301 	orr.w	r3, r5, r1
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a72:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004a76:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004a7a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	1cda      	adds	r2, r3, #3
 8004a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a88:	4413      	add	r3, r2
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004a96:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004a9a:	ea40 0308 	orr.w	r3, r0, r8
 8004a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aa2:	ea41 0309 	orr.w	r3, r1, r9
 8004aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aaa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004aae:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ab2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac0:	4413      	add	r3, r2
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	ea44 0300 	orr.w	r3, r4, r0
 8004ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ade:	ea45 0301 	orr.w	r3, r5, r1
 8004ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ae6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004aea:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004aee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	1d5a      	adds	r2, r3, #5
 8004af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004afc:	4413      	add	r3, r2
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	f04f 0000 	mov.w	r0, #0
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	0211      	lsls	r1, r2, #8
 8004b10:	2000      	movs	r0, #0
 8004b12:	ea44 0300 	orr.w	r3, r4, r0
 8004b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b1a:	ea45 0301 	orr.w	r3, r5, r1
 8004b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b22:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004b26:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004b2a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	1d9a      	adds	r2, r3, #6
 8004b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	0411      	lsls	r1, r2, #16
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	ea44 0300 	orr.w	r3, r4, r0
 8004b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b56:	ea45 0301 	orr.w	r3, r5, r1
 8004b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b5e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004b62:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004b66:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	1dda      	adds	r2, r3, #7
 8004b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	f04f 0000 	mov.w	r0, #0
 8004b82:	f04f 0100 	mov.w	r1, #0
 8004b86:	0611      	lsls	r1, r2, #24
 8004b88:	2000      	movs	r0, #0
 8004b8a:	ea44 0a00 	orr.w	sl, r4, r0
 8004b8e:	ea45 0b01 	orr.w	fp, r5, r1
 8004b92:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004b96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b9a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004b9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004bb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004bc0:	e6fa      	b.n	80049b8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bc6:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004bca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f7fe f97c 	bl	8002ed2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	4413      	add	r3, r2
 8004be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	f200 80fc 	bhi.w	8004dee <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c02:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004c06:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004c0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c0e:	4413      	add	r3, r2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	ea40 0402 	orr.w	r4, r0, r2
 8004c1c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c26:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004c2a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c2e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0219      	lsls	r1, r3, #8
 8004c50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004c54:	0210      	lsls	r0, r2, #8
 8004c56:	ea44 0300 	orr.w	r3, r4, r0
 8004c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c5e:	ea45 0301 	orr.w	r3, r5, r1
 8004c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c66:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004c6a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004c6e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c76:	1c9a      	adds	r2, r3, #2
 8004c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	0419      	lsls	r1, r3, #16
 8004c90:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004c94:	0410      	lsls	r0, r2, #16
 8004c96:	ea44 0300 	orr.w	r3, r4, r0
 8004c9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c9c:	ea45 0301 	orr.w	r3, r5, r1
 8004ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ca2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004ca6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004caa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	1cda      	adds	r2, r3, #3
 8004cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cb8:	4413      	add	r3, r2
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	0a14      	lsrs	r4, r2, #8
 8004cc4:	677c      	str	r4, [r7, #116]	; 0x74
 8004cc6:	0613      	lsls	r3, r2, #24
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cca:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004cce:	4623      	mov	r3, r4
 8004cd0:	4303      	orrs	r3, r0
 8004cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cda:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004cde:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ce2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0000 	mov.w	r0, #0
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	0011      	movs	r1, r2
 8004d04:	2000      	movs	r0, #0
 8004d06:	ea44 0300 	orr.w	r3, r4, r0
 8004d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d0c:	ea45 0301 	orr.w	r3, r5, r1
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
 8004d12:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004d16:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004d1a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d22:	1d5a      	adds	r2, r3, #5
 8004d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	0211      	lsls	r1, r2, #8
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	ea44 0300 	orr.w	r3, r4, r0
 8004d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d44:	ea45 0301 	orr.w	r3, r5, r1
 8004d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d4a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004d4e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004d52:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	1d9a      	adds	r2, r3, #6
 8004d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d60:	4413      	add	r3, r2
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f04f 0000 	mov.w	r0, #0
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	0411      	lsls	r1, r2, #16
 8004d74:	2000      	movs	r0, #0
 8004d76:	ea44 0300 	orr.w	r3, r4, r0
 8004d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d7c:	ea45 0301 	orr.w	r3, r5, r1
 8004d80:	657b      	str	r3, [r7, #84]	; 0x54
 8004d82:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004d86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004d8a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	1dda      	adds	r2, r3, #7
 8004d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d98:	4413      	add	r3, r2
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	0611      	lsls	r1, r2, #24
 8004dac:	2000      	movs	r0, #0
 8004dae:	ea44 0300 	orr.w	r3, r4, r0
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db4:	ea45 0301 	orr.w	r3, r5, r1
 8004db8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004dbe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004dc2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004dc6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004dce:	3315      	adds	r3, #21
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	3308      	adds	r3, #8
 8004dde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004de2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004de6:	3301      	adds	r3, #1
 8004de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004dec:	e6fe      	b.n	8004bec <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004df2:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004df6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dfe:	4413      	add	r3, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fe f866 	bl	8002ed2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004e06:	4602      	mov	r2, r0
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004e12:	2300      	movs	r3, #0
 8004e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	f200 80f8 	bhi.w	8005012 <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004e2e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e32:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3a:	4413      	add	r3, r2
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea40 0402 	orr.w	r4, r0, r2
 8004e48:	643c      	str	r4, [r7, #64]	; 0x40
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004e52:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e56:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f04f 0000 	mov.w	r0, #0
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	0219      	lsls	r1, r3, #8
 8004e78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004e7c:	0210      	lsls	r0, r2, #8
 8004e7e:	ea44 0300 	orr.w	r3, r4, r0
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e84:	ea45 0301 	orr.w	r3, r5, r1
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004e8e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e92:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ea0:	4413      	add	r3, r2
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	f04f 0000 	mov.w	r0, #0
 8004eae:	f04f 0100 	mov.w	r1, #0
 8004eb2:	0419      	lsls	r1, r3, #16
 8004eb4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004eb8:	0410      	lsls	r0, r2, #16
 8004eba:	ea44 0300 	orr.w	r3, r4, r0
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec0:	ea45 0301 	orr.w	r3, r5, r1
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004eca:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004ece:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	1cda      	adds	r2, r3, #3
 8004ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004edc:	4413      	add	r3, r2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	0a14      	lsrs	r4, r2, #8
 8004ee8:	62fc      	str	r4, [r7, #44]	; 0x2c
 8004eea:	0613      	lsls	r3, r2, #24
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	4303      	orrs	r3, r0
 8004ef6:	623b      	str	r3, [r7, #32]
 8004ef8:	462b      	mov	r3, r5
 8004efa:	430b      	orrs	r3, r1
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004f02:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004f06:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0e:	1d1a      	adds	r2, r3, #4
 8004f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	f04f 0000 	mov.w	r0, #0
 8004f22:	f04f 0100 	mov.w	r1, #0
 8004f26:	0011      	movs	r1, r2
 8004f28:	2000      	movs	r0, #0
 8004f2a:	ea44 0300 	orr.w	r3, r4, r0
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	ea45 0301 	orr.w	r3, r5, r1
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004f3a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004f3e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	1d5a      	adds	r2, r3, #5
 8004f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f4c:	4413      	add	r3, r2
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	0211      	lsls	r1, r2, #8
 8004f60:	2000      	movs	r0, #0
 8004f62:	ea44 0300 	orr.w	r3, r4, r0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	ea45 0301 	orr.w	r3, r5, r1
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004f72:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f76:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	1d9a      	adds	r2, r3, #6
 8004f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f84:	4413      	add	r3, r2
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	f04f 0000 	mov.w	r0, #0
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	0411      	lsls	r1, r2, #16
 8004f98:	2000      	movs	r0, #0
 8004f9a:	ea44 0300 	orr.w	r3, r4, r0
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	ea45 0301 	orr.w	r3, r5, r1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004faa:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004fae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb6:	1dda      	adds	r2, r3, #7
 8004fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fbc:	4413      	add	r3, r2
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	f04f 0000 	mov.w	r0, #0
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	0611      	lsls	r1, r2, #24
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	ea44 0300 	orr.w	r3, r4, r0
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	ea45 0301 	orr.w	r3, r5, r1
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004fe2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004fe6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004fea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ff2:	3322      	adds	r3, #34	; 0x22
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	3308      	adds	r3, #8
 8005002:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8005006:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800500a:	3301      	adds	r3, #1
 800500c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005010:	e702      	b.n	8004e18 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8005016:	4618      	mov	r0, r3
 8005018:	37f8      	adds	r7, #248	; 0xf8
 800501a:	46bd      	mov	sp, r7
 800501c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005020 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	08010030 	.word	0x08010030

0800503c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	4b03      	ldr	r3, [pc, #12]	; (8005054 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	08010040 	.word	0x08010040

08005058 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	080101cc 	.word	0x080101cc

08005078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff ffe8 	bl	8005058 <_ZN3ros15NodeHandleBase_C1Ev>
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd fbd0 	bl	8002838 <_ZN13STM32HardwareC1Ev>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80050be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f006 fa2b 	bl	800b520 <memset>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80050d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f006 fa22 	bl	800b520 <memset>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80050e2:	2264      	movs	r2, #100	; 0x64
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f006 fa1a 	bl	800b520 <memset>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80050f2:	2264      	movs	r2, #100	; 0x64
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f006 fa12 	bl	800b520 <memset>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd f85a 	bl	800220c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	08010110 	.word	0x08010110

08005168 <HAL_UART_TxCpltCallback>:
//Subscriber and Publisher Velocity
geometry_msgs::Twist raw_vel_msg;
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8005170:	4805      	ldr	r0, [pc, #20]	; (8005188 <HAL_UART_TxCpltCallback+0x20>)
 8005172:	f000 fd97 	bl	8005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005176:	4603      	mov	r3, r0
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd fbc3 	bl	8002904 <_ZN13STM32Hardware5flushEv>
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000344 	.word	0x20000344

0800518c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8005194:	4832      	ldr	r0, [pc, #200]	; (8005260 <HAL_UART_RxCpltCallback+0xd4>)
 8005196:	f000 fd85 	bl	8005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800519a:	4603      	mov	r3, r0
 800519c:	4618      	mov	r0, r3
 800519e:	f7fd fb72 	bl	8002886 <_ZN13STM32Hardware10reset_rbufEv>
  if(huart->Instance == USART3)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d150      	bne.n	800524e <HAL_UART_RxCpltCallback+0xc2>
  	{
  		if(pData != 'A')
 80051ac:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b41      	cmp	r3, #65	; 0x41
 80051b2:	d01e      	beq.n	80051f2 <HAL_UART_RxCpltCallback+0x66>
  		{
  			if(pData != 'B')
 80051b4:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b42      	cmp	r3, #66	; 0x42
 80051ba:	d01a      	beq.n	80051f2 <HAL_UART_RxCpltCallback+0x66>
  			{
  				if((pData >= 46 && pData <= 57) || pData == 32 || pData == 45)
 80051bc:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b2d      	cmp	r3, #45	; 0x2d
 80051c2:	d903      	bls.n	80051cc <HAL_UART_RxCpltCallback+0x40>
 80051c4:	4b28      	ldr	r3, [pc, #160]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b39      	cmp	r3, #57	; 0x39
 80051ca:	d907      	bls.n	80051dc <HAL_UART_RxCpltCallback+0x50>
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d003      	beq.n	80051dc <HAL_UART_RxCpltCallback+0x50>
 80051d4:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b2d      	cmp	r3, #45	; 0x2d
 80051da:	d10a      	bne.n	80051f2 <HAL_UART_RxCpltCallback+0x66>
  				{
  					dataTX[i] = pData;
 80051dc:	4b23      	ldr	r3, [pc, #140]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a21      	ldr	r2, [pc, #132]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051e2:	7811      	ldrb	r1, [r2, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_UART_RxCpltCallback+0xe4>)
 80051e6:	54d1      	strb	r1, [r2, r3]
  					i++;
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 80051f0:	6013      	str	r3, [r2, #0]
  				}
  			}
  		}

  		if(pData == 'B')
 80051f2:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b42      	cmp	r3, #66	; 0x42
 80051f8:	d129      	bne.n	800524e <HAL_UART_RxCpltCallback+0xc2>
  		{
  			i = 0;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
  			char *ptr;
  			ptr = strtok(dataTX," ");
 8005200:	491c      	ldr	r1, [pc, #112]	; (8005274 <HAL_UART_RxCpltCallback+0xe8>)
 8005202:	481b      	ldr	r0, [pc, #108]	; (8005270 <HAL_UART_RxCpltCallback+0xe4>)
 8005204:	f007 feb8 	bl	800cf78 <strtok>
 8005208:	60f8      	str	r0, [r7, #12]
  			while(ptr != NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01e      	beq.n	800524e <HAL_UART_RxCpltCallback+0xc2>
  			{
  				num[j] = atof(ptr);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f006 f949 	bl	800b4a8 <atof>
 8005216:	ec51 0b10 	vmov	r0, r1, d0
 800521a:	4b17      	ldr	r3, [pc, #92]	; (8005278 <HAL_UART_RxCpltCallback+0xec>)
 800521c:	681c      	ldr	r4, [r3, #0]
 800521e:	f7fb fce3 	bl	8000be8 <__aeabi_d2f>
 8005222:	4602      	mov	r2, r0
 8005224:	4915      	ldr	r1, [pc, #84]	; (800527c <HAL_UART_RxCpltCallback+0xf0>)
 8005226:	00a3      	lsls	r3, r4, #2
 8005228:	440b      	add	r3, r1
 800522a:	601a      	str	r2, [r3, #0]
  				ptr = strtok(NULL," ");
 800522c:	4911      	ldr	r1, [pc, #68]	; (8005274 <HAL_UART_RxCpltCallback+0xe8>)
 800522e:	2000      	movs	r0, #0
 8005230:	f007 fea2 	bl	800cf78 <strtok>
 8005234:	60f8      	str	r0, [r7, #12]
  				j++;
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <HAL_UART_RxCpltCallback+0xec>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <HAL_UART_RxCpltCallback+0xec>)
 800523e:	6013      	str	r3, [r2, #0]
  				if(j == 10)
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <HAL_UART_RxCpltCallback+0xec>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b0a      	cmp	r3, #10
 8005246:	d1e0      	bne.n	800520a <HAL_UART_RxCpltCallback+0x7e>
  				{
  					j = 0;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_UART_RxCpltCallback+0xec>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
  					break;
  				}
  			}
  		}
  	}
  	HAL_UART_Receive_IT(&huart3, &pData, 1);
 800524e:	2201      	movs	r2, #1
 8005250:	4905      	ldr	r1, [pc, #20]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 8005252:	480b      	ldr	r0, [pc, #44]	; (8005280 <HAL_UART_RxCpltCallback+0xf4>)
 8005254:	f004 ffc3 	bl	800a1de <HAL_UART_Receive_IT>
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	20000344 	.word	0x20000344
 8005264:	40004800 	.word	0x40004800
 8005268:	200002b1 	.word	0x200002b1
 800526c:	2000031c 	.word	0x2000031c
 8005270:	200002b4 	.word	0x200002b4
 8005274:	08010064 	.word	0x08010064
 8005278:	20000320 	.word	0x20000320
 800527c:	200002f4 	.word	0x200002f4
 8005280:	20001034 	.word	0x20001034

08005284 <setup>:

void setup(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  nh.initNode();
 8005288:	480a      	ldr	r0, [pc, #40]	; (80052b4 <setup+0x30>)
 800528a:	f000 fd17 	bl	8005cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub_vel);
 800528e:	490a      	ldr	r1, [pc, #40]	; (80052b8 <setup+0x34>)
 8005290:	4808      	ldr	r0, [pc, #32]	; (80052b4 <setup+0x30>)
 8005292:	f000 fd30 	bl	8005cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.advertise(raw_vel_pub);
 8005296:	4909      	ldr	r1, [pc, #36]	; (80052bc <setup+0x38>)
 8005298:	4806      	ldr	r0, [pc, #24]	; (80052b4 <setup+0x30>)
 800529a:	f000 fd57 	bl	8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(chatter);
 800529e:	4908      	ldr	r1, [pc, #32]	; (80052c0 <setup+0x3c>)
 80052a0:	4804      	ldr	r0, [pc, #16]	; (80052b4 <setup+0x30>)
 80052a2:	f000 fd53 	bl	8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_imu);
 80052a6:	4907      	ldr	r1, [pc, #28]	; (80052c4 <setup+0x40>)
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <setup+0x30>)
 80052aa:	f000 fd4f 	bl	8005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
	myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
	myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
	MPU6050_Config(&myMpuConfig);
  	QMC_init(&module, &hi2c1, 200);*/
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000344 	.word	0x20000344
 80052b8:	20000e68 	.word	0x20000e68
 80052bc:	20000e50 	.word	0x20000e50
 80052c0:	20000de0 	.word	0x20000de0
 80052c4:	20000df4 	.word	0x20000df4

080052c8 <loop>:

void loop(void)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0

	if(W1 > 0 && W2 > 0 && W3 > 0 && W4 > 0)
 80052ce:	4ba8      	ldr	r3, [pc, #672]	; (8005570 <loop+0x2a8>)
 80052d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f7fb fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d025      	beq.n	8005332 <loop+0x6a>
 80052e6:	4ba3      	ldr	r3, [pc, #652]	; (8005574 <loop+0x2ac>)
 80052e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f7fb fc10 	bl	8000b18 <__aeabi_dcmpgt>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d019      	beq.n	8005332 <loop+0x6a>
 80052fe:	4b9e      	ldr	r3, [pc, #632]	; (8005578 <loop+0x2b0>)
 8005300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	f7fb fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <loop+0x6a>
 8005316:	4b99      	ldr	r3, [pc, #612]	; (800557c <loop+0x2b4>)
 8005318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f7fb fbf8 	bl	8000b18 <__aeabi_dcmpgt>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <loop+0x6a>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <loop+0x6c>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <loop+0x76>
	{
		tien();
 8005338:	f7fb ff98 	bl	800126c <tien>
 800533c:	e122      	b.n	8005584 <loop+0x2bc>
	}
	else if(W1 < 0 && W2 < 0 && W3 < 0 && W4 < 0)
 800533e:	4b8c      	ldr	r3, [pc, #560]	; (8005570 <loop+0x2a8>)
 8005340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	f7fb fbc6 	bl	8000adc <__aeabi_dcmplt>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d025      	beq.n	80053a2 <loop+0xda>
 8005356:	4b87      	ldr	r3, [pc, #540]	; (8005574 <loop+0x2ac>)
 8005358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f7fb fbba 	bl	8000adc <__aeabi_dcmplt>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <loop+0xda>
 800536e:	4b82      	ldr	r3, [pc, #520]	; (8005578 <loop+0x2b0>)
 8005370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f7fb fbae 	bl	8000adc <__aeabi_dcmplt>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <loop+0xda>
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <loop+0x2b4>)
 8005388:	e9d3 0100 	ldrd	r0, r1, [r3]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f7fb fba2 	bl	8000adc <__aeabi_dcmplt>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <loop+0xda>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <loop+0xdc>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <loop+0xe6>
	{
		lui();
 80053a8:	f7fb ff40 	bl	800122c <lui>
 80053ac:	e0ea      	b.n	8005584 <loop+0x2bc>
	}
	else if(W1 < 0 && W2 > 0 && W3 < 0 && W4 > 0)
 80053ae:	4b70      	ldr	r3, [pc, #448]	; (8005570 <loop+0x2a8>)
 80053b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	f7fb fb8e 	bl	8000adc <__aeabi_dcmplt>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d025      	beq.n	8005412 <loop+0x14a>
 80053c6:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <loop+0x2ac>)
 80053c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f7fb fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d019      	beq.n	8005412 <loop+0x14a>
 80053de:	4b66      	ldr	r3, [pc, #408]	; (8005578 <loop+0x2b0>)
 80053e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	f7fb fb76 	bl	8000adc <__aeabi_dcmplt>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <loop+0x14a>
 80053f6:	4b61      	ldr	r3, [pc, #388]	; (800557c <loop+0x2b4>)
 80053f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f7fb fb88 	bl	8000b18 <__aeabi_dcmpgt>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <loop+0x14a>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <loop+0x14c>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <loop+0x156>
	{
		xoayTrai();
 8005418:	f7fb ff48 	bl	80012ac <xoayTrai>
 800541c:	e0b2      	b.n	8005584 <loop+0x2bc>
	}
	else if(W1 > 0 && W2 < 0 && W3 > 0 && W4 < 0)
 800541e:	4b54      	ldr	r3, [pc, #336]	; (8005570 <loop+0x2a8>)
 8005420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f7fb fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d025      	beq.n	8005482 <loop+0x1ba>
 8005436:	4b4f      	ldr	r3, [pc, #316]	; (8005574 <loop+0x2ac>)
 8005438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	f7fb fb4a 	bl	8000adc <__aeabi_dcmplt>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d019      	beq.n	8005482 <loop+0x1ba>
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <loop+0x2b0>)
 8005450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	f7fb fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <loop+0x1ba>
 8005466:	4b45      	ldr	r3, [pc, #276]	; (800557c <loop+0x2b4>)
 8005468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	f7fb fb32 	bl	8000adc <__aeabi_dcmplt>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <loop+0x1ba>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <loop+0x1bc>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <loop+0x1c6>
	{
		xoayPhai();
 8005488:	f7fb ff30 	bl	80012ec <xoayPhai>
 800548c:	e07a      	b.n	8005584 <loop+0x2bc>
	}
	else if(W1 > 0 && W2 < 0 && W3 < 0 && W4 > 0)
 800548e:	4b38      	ldr	r3, [pc, #224]	; (8005570 <loop+0x2a8>)
 8005490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f7fb fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d025      	beq.n	80054f2 <loop+0x22a>
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <loop+0x2ac>)
 80054a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	f7fb fb12 	bl	8000adc <__aeabi_dcmplt>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d019      	beq.n	80054f2 <loop+0x22a>
 80054be:	4b2e      	ldr	r3, [pc, #184]	; (8005578 <loop+0x2b0>)
 80054c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	f7fb fb06 	bl	8000adc <__aeabi_dcmplt>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00d      	beq.n	80054f2 <loop+0x22a>
 80054d6:	4b29      	ldr	r3, [pc, #164]	; (800557c <loop+0x2b4>)
 80054d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	f7fb fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <loop+0x22a>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <loop+0x22c>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <loop+0x236>
	{
		ngangPhai();
 80054f8:	f7fb fe58 	bl	80011ac <ngangPhai>
 80054fc:	e042      	b.n	8005584 <loop+0x2bc>
	}
	else if(W1 < 0 && W2 > 0 && W3 > 0 && W4 < 0)
 80054fe:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <loop+0x2a8>)
 8005500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	f7fb fae6 	bl	8000adc <__aeabi_dcmplt>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d025      	beq.n	8005562 <loop+0x29a>
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <loop+0x2ac>)
 8005518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f7fb faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d019      	beq.n	8005562 <loop+0x29a>
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <loop+0x2b0>)
 8005530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	f7fb faec 	bl	8000b18 <__aeabi_dcmpgt>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <loop+0x29a>
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <loop+0x2b4>)
 8005548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f7fb fac2 	bl	8000adc <__aeabi_dcmplt>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <loop+0x29a>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <loop+0x29c>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <loop+0x2b8>
	{
		ngangTrai();
 8005568:	f7fb fe40 	bl	80011ec <ngangTrai>
 800556c:	e00a      	b.n	8005584 <loop+0x2bc>
 800556e:	bf00      	nop
 8005570:	20000258 	.word	0x20000258
 8005574:	20000260 	.word	0x20000260
 8005578:	20000268 	.word	0x20000268
 800557c:	20000270 	.word	0x20000270
	}
	else
	{
		dung();
 8005580:	f7fb fed4 	bl	800132c <dung>
	}

	if(HAL_GetTick() - countTick > 100)
 8005584:	f002 f9ba 	bl	80078fc <HAL_GetTick>
 8005588:	4603      	mov	r3, r0
 800558a:	4a62      	ldr	r2, [pc, #392]	; (8005714 <loop+0x44c>)
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	2b64      	cmp	r3, #100	; 0x64
 8005592:	bf8c      	ite	hi
 8005594:	2301      	movhi	r3, #1
 8005596:	2300      	movls	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80b2 	beq.w	8005704 <loop+0x43c>
	{
		//publish velocity
		convertAngletoLinear(w1, w2, w3, w4);
 80055a0:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <loop+0x450>)
 80055a2:	ed93 7b00 	vldr	d7, [r3]
 80055a6:	4b5d      	ldr	r3, [pc, #372]	; (800571c <loop+0x454>)
 80055a8:	ed93 6b00 	vldr	d6, [r3]
 80055ac:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <loop+0x458>)
 80055ae:	ed93 5b00 	vldr	d5, [r3]
 80055b2:	4b5c      	ldr	r3, [pc, #368]	; (8005724 <loop+0x45c>)
 80055b4:	ed93 4b00 	vldr	d4, [r3]
 80055b8:	eeb0 3a44 	vmov.f32	s6, s8
 80055bc:	eef0 3a64 	vmov.f32	s7, s9
 80055c0:	eeb0 2a45 	vmov.f32	s4, s10
 80055c4:	eef0 2a65 	vmov.f32	s5, s11
 80055c8:	eeb0 1a46 	vmov.f32	s2, s12
 80055cc:	eef0 1a66 	vmov.f32	s3, s13
 80055d0:	eeb0 0a47 	vmov.f32	s0, s14
 80055d4:	eef0 0a67 	vmov.f32	s1, s15
 80055d8:	f000 f9ce 	bl	8005978 <convertAngletoLinear>
		raw_vel_msg.linear.x = vx;
 80055dc:	4b52      	ldr	r3, [pc, #328]	; (8005728 <loop+0x460>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4952      	ldr	r1, [pc, #328]	; (800572c <loop+0x464>)
 80055e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		raw_vel_msg.linear.y = vy;
 80055e8:	4b51      	ldr	r3, [pc, #324]	; (8005730 <loop+0x468>)
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	494f      	ldr	r1, [pc, #316]	; (800572c <loop+0x464>)
 80055f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		raw_vel_msg.angular.z = wz;
 80055f4:	4b4f      	ldr	r3, [pc, #316]	; (8005734 <loop+0x46c>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	494c      	ldr	r1, [pc, #304]	; (800572c <loop+0x464>)
 80055fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		raw_vel_pub.publish(&raw_vel_msg);
 8005600:	494a      	ldr	r1, [pc, #296]	; (800572c <loop+0x464>)
 8005602:	484d      	ldr	r0, [pc, #308]	; (8005738 <loop+0x470>)
 8005604:	f7fd f8e5 	bl	80027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		//publish imu/data
		imu.header.frame_id = "imu_link";
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <loop+0x474>)
 800560a:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <loop+0x478>)
 800560c:	615a      	str	r2, [r3, #20]
		imu.header.stamp = nh.now();
 800560e:	4c4b      	ldr	r4, [pc, #300]	; (800573c <loop+0x474>)
 8005610:	463b      	mov	r3, r7
 8005612:	494c      	ldr	r1, [pc, #304]	; (8005744 <loop+0x47c>)
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fbc9 	bl	8005dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 800561a:	f104 030c 	add.w	r3, r4, #12
 800561e:	463a      	mov	r2, r7
 8005620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005624:	e883 0003 	stmia.w	r3, {r0, r1}
		imu.orientation.w = num[0];
 8005628:	4b47      	ldr	r3, [pc, #284]	; (8005748 <loop+0x480>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa ff8b 	bl	8000548 <__aeabi_f2d>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4941      	ldr	r1, [pc, #260]	; (800573c <loop+0x474>)
 8005638:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		imu.orientation.x = num[1];
 800563c:	4b42      	ldr	r3, [pc, #264]	; (8005748 <loop+0x480>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fa ff81 	bl	8000548 <__aeabi_f2d>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	493c      	ldr	r1, [pc, #240]	; (800573c <loop+0x474>)
 800564c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		imu.orientation.y = num[2];
 8005650:	4b3d      	ldr	r3, [pc, #244]	; (8005748 <loop+0x480>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fa ff77 	bl	8000548 <__aeabi_f2d>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4937      	ldr	r1, [pc, #220]	; (800573c <loop+0x474>)
 8005660:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		imu.orientation.z = num[3];
 8005664:	4b38      	ldr	r3, [pc, #224]	; (8005748 <loop+0x480>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa ff6d 	bl	8000548 <__aeabi_f2d>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4932      	ldr	r1, [pc, #200]	; (800573c <loop+0x474>)
 8005674:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		imu.angular_velocity.x = num[7];
 8005678:	4b33      	ldr	r3, [pc, #204]	; (8005748 <loop+0x480>)
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fa ff63 	bl	8000548 <__aeabi_f2d>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	492d      	ldr	r1, [pc, #180]	; (800573c <loop+0x474>)
 8005688:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		imu.angular_velocity.y = num[8];
 800568c:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <loop+0x480>)
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa ff59 	bl	8000548 <__aeabi_f2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4928      	ldr	r1, [pc, #160]	; (800573c <loop+0x474>)
 800569c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
		imu.angular_velocity.z = num[9];
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <loop+0x480>)
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fa ff4f 	bl	8000548 <__aeabi_f2d>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4923      	ldr	r1, [pc, #140]	; (800573c <loop+0x474>)
 80056b0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
		imu.linear_acceleration.x = num[4];
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <loop+0x480>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fa ff45 	bl	8000548 <__aeabi_f2d>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	491e      	ldr	r1, [pc, #120]	; (800573c <loop+0x474>)
 80056c4:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
		imu.linear_acceleration.y = num[5];
 80056c8:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <loop+0x480>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fa ff3b 	bl	8000548 <__aeabi_f2d>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4919      	ldr	r1, [pc, #100]	; (800573c <loop+0x474>)
 80056d8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
		imu.linear_acceleration.z = num[6];
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <loop+0x480>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fa ff31 	bl	8000548 <__aeabi_f2d>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4914      	ldr	r1, [pc, #80]	; (800573c <loop+0x474>)
 80056ec:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
		pub_imu.publish(&imu);
 80056f0:	4912      	ldr	r1, [pc, #72]	; (800573c <loop+0x474>)
 80056f2:	4816      	ldr	r0, [pc, #88]	; (800574c <loop+0x484>)
 80056f4:	f7fd f86d 	bl	80027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		countTick = HAL_GetTick();
 80056f8:	f002 f900 	bl	80078fc <HAL_GetTick>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <loop+0x44c>)
 8005702:	601a      	str	r2, [r3, #0]
	}

	nh.spinOnce();
 8005704:	480f      	ldr	r0, [pc, #60]	; (8005744 <loop+0x47c>)
 8005706:	f000 fb8d 	bl	8005e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bd90      	pop	{r4, r7, pc}
 8005712:	bf00      	nop
 8005714:	20000340 	.word	0x20000340
 8005718:	20000278 	.word	0x20000278
 800571c:	20000280 	.word	0x20000280
 8005720:	20000288 	.word	0x20000288
 8005724:	20000290 	.word	0x20000290
 8005728:	20000298 	.word	0x20000298
 800572c:	20000e08 	.word	0x20000e08
 8005730:	200002a0 	.word	0x200002a0
 8005734:	200002a8 	.word	0x200002a8
 8005738:	20000e50 	.word	0x20000e50
 800573c:	20000c80 	.word	0x20000c80
 8005740:	08010068 	.word	0x08010068
 8005744:	20000344 	.word	0x20000344
 8005748:	200002f4 	.word	0x200002f4
 800574c:	20000df4 	.word	0x20000df4

08005750 <_Z9messageCbRKN13geometry_msgs5TwistE>:
/*void led0_cb(const std_msgs::Float32& msg)
{

}*/
void messageCb( const geometry_msgs::Twist& cmd_msg)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	vxRE = cmd_msg.linear.x; //rad/s
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800575e:	4915      	ldr	r1, [pc, #84]	; (80057b4 <_Z9messageCbRKN13geometry_msgs5TwistE+0x64>)
 8005760:	e9c1 2300 	strd	r2, r3, [r1]
	vyRE = cmd_msg.linear.y; //rad/s
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800576a:	4913      	ldr	r1, [pc, #76]	; (80057b8 <_Z9messageCbRKN13geometry_msgs5TwistE+0x68>)
 800576c:	e9c1 2300 	strd	r2, r3, [r1]
	wzRE = cmd_msg.angular.z; //rad/s
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005776:	4911      	ldr	r1, [pc, #68]	; (80057bc <_Z9messageCbRKN13geometry_msgs5TwistE+0x6c>)
 8005778:	e9c1 2300 	strd	r2, r3, [r1]
	convertLineartoAngle(vxRE,vyRE,wzRE);
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <_Z9messageCbRKN13geometry_msgs5TwistE+0x64>)
 800577e:	ed93 7b00 	vldr	d7, [r3]
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <_Z9messageCbRKN13geometry_msgs5TwistE+0x68>)
 8005784:	ed93 6b00 	vldr	d6, [r3]
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <_Z9messageCbRKN13geometry_msgs5TwistE+0x6c>)
 800578a:	ed93 5b00 	vldr	d5, [r3]
 800578e:	eeb0 2a45 	vmov.f32	s4, s10
 8005792:	eef0 2a65 	vmov.f32	s5, s11
 8005796:	eeb0 1a46 	vmov.f32	s2, s12
 800579a:	eef0 1a66 	vmov.f32	s3, s13
 800579e:	eeb0 0a47 	vmov.f32	s0, s14
 80057a2:	eef0 0a67 	vmov.f32	s1, s15
 80057a6:	f000 f80b 	bl	80057c0 <convertLineartoAngle>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000328 	.word	0x20000328
 80057b8:	20000330 	.word	0x20000330
 80057bc:	20000338 	.word	0x20000338

080057c0 <convertLineartoAngle>:

void convertLineartoAngle(double Vx, double Vy, double Wz)
{
 80057c0:	b5b0      	push	{r4, r5, r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80057ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80057ce:	ed87 2b00 	vstr	d2, [r7]
	W1 = ((invert_r)*(Vx-Vy-(lx+ly)*Wz))/haiPI; //vòng/s
 80057d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057da:	f7fa fd55 	bl	8000288 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4614      	mov	r4, r2
 80057e4:	461d      	mov	r5, r3
 80057e6:	a35c      	add	r3, pc, #368	; (adr r3, 8005958 <convertLineartoAngle+0x198>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f0:	f7fa ff02 	bl	80005f8 <__aeabi_dmul>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4620      	mov	r0, r4
 80057fa:	4629      	mov	r1, r5
 80057fc:	f7fa fd44 	bl	8000288 <__aeabi_dsub>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	4b54      	ldr	r3, [pc, #336]	; (8005960 <convertLineartoAngle+0x1a0>)
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	a34d      	add	r3, pc, #308	; (adr r3, 8005950 <convertLineartoAngle+0x190>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f7fb f814 	bl	800084c <__aeabi_ddiv>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	494e      	ldr	r1, [pc, #312]	; (8005964 <convertLineartoAngle+0x1a4>)
 800582a:	e9c1 2300 	strd	r2, r3, [r1]
	W2 = ((invert_r)*(Vx+Vy+(lx+ly)*Wz))/haiPI; //vòng/s
 800582e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005832:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005836:	f7fa fd29 	bl	800028c <__adddf3>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4614      	mov	r4, r2
 8005840:	461d      	mov	r5, r3
 8005842:	a345      	add	r3, pc, #276	; (adr r3, 8005958 <convertLineartoAngle+0x198>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800584c:	f7fa fed4 	bl	80005f8 <__aeabi_dmul>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4620      	mov	r0, r4
 8005856:	4629      	mov	r1, r5
 8005858:	f7fa fd18 	bl	800028c <__adddf3>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4b3d      	ldr	r3, [pc, #244]	; (8005960 <convertLineartoAngle+0x1a0>)
 800586a:	f7fa fec5 	bl	80005f8 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	a336      	add	r3, pc, #216	; (adr r3, 8005950 <convertLineartoAngle+0x190>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa ffe6 	bl	800084c <__aeabi_ddiv>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4938      	ldr	r1, [pc, #224]	; (8005968 <convertLineartoAngle+0x1a8>)
 8005886:	e9c1 2300 	strd	r2, r3, [r1]
	W3 = ((invert_r)*(Vx+Vy-(lx+ly)*Wz))/haiPI; //vòng/s
 800588a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800588e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005892:	f7fa fcfb 	bl	800028c <__adddf3>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4614      	mov	r4, r2
 800589c:	461d      	mov	r5, r3
 800589e:	a32e      	add	r3, pc, #184	; (adr r3, 8005958 <convertLineartoAngle+0x198>)
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a8:	f7fa fea6 	bl	80005f8 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f7fa fce8 	bl	8000288 <__aeabi_dsub>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4610      	mov	r0, r2
 80058be:	4619      	mov	r1, r3
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	4b26      	ldr	r3, [pc, #152]	; (8005960 <convertLineartoAngle+0x1a0>)
 80058c6:	f7fa fe97 	bl	80005f8 <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	a31f      	add	r3, pc, #124	; (adr r3, 8005950 <convertLineartoAngle+0x190>)
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f7fa ffb8 	bl	800084c <__aeabi_ddiv>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4922      	ldr	r1, [pc, #136]	; (800596c <convertLineartoAngle+0x1ac>)
 80058e2:	e9c1 2300 	strd	r2, r3, [r1]
	W4 = ((invert_r)*(Vx-Vy+(lx+ly)*Wz))/haiPI; //vòng/s
 80058e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4614      	mov	r4, r2
 80058f8:	461d      	mov	r5, r3
 80058fa:	a317      	add	r3, pc, #92	; (adr r3, 8005958 <convertLineartoAngle+0x198>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005904:	f7fa fe78 	bl	80005f8 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4620      	mov	r0, r4
 800590e:	4629      	mov	r1, r5
 8005910:	f7fa fcbc 	bl	800028c <__adddf3>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4610      	mov	r0, r2
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <convertLineartoAngle+0x1a0>)
 8005922:	f7fa fe69 	bl	80005f8 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	a308      	add	r3, pc, #32	; (adr r3, 8005950 <convertLineartoAngle+0x190>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fa ff8a 	bl	800084c <__aeabi_ddiv>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	490c      	ldr	r1, [pc, #48]	; (8005970 <convertLineartoAngle+0x1b0>)
 800593e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bdb0      	pop	{r4, r5, r7, pc}
 800594a:	bf00      	nop
 800594c:	f3af 8000 	nop.w
 8005950:	54411744 	.word	0x54411744
 8005954:	401921fb 	.word	0x401921fb
 8005958:	9999999a 	.word	0x9999999a
 800595c:	3fc99999 	.word	0x3fc99999
 8005960:	40350000 	.word	0x40350000
 8005964:	20000258 	.word	0x20000258
 8005968:	20000260 	.word	0x20000260
 800596c:	20000268 	.word	0x20000268
 8005970:	20000270 	.word	0x20000270
 8005974:	00000000 	.word	0x00000000

08005978 <convertAngletoLinear>:

void convertAngletoLinear(double w1, double w2, double w3, double w4)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	ed87 0b06 	vstr	d0, [r7, #24]
 8005982:	ed87 1b04 	vstr	d1, [r7, #16]
 8005986:	ed87 2b02 	vstr	d2, [r7, #8]
 800598a:	ed87 3b00 	vstr	d3, [r7]
	vx = haiPI*(w1 + w2 + w3 + w4)*(rChiaBon); 			//rad/s
 800598e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005992:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005996:	f7fa fc79 	bl	800028c <__adddf3>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a6:	f7fa fc71 	bl	800028c <__adddf3>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b6:	f7fa fc69 	bl	800028c <__adddf3>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4610      	mov	r0, r2
 80059c0:	4619      	mov	r1, r3
 80059c2:	a339      	add	r3, pc, #228	; (adr r3, 8005aa8 <convertAngletoLinear+0x130>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fe16 	bl	80005f8 <__aeabi_dmul>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	a336      	add	r3, pc, #216	; (adr r3, 8005ab0 <convertAngletoLinear+0x138>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fe0d 	bl	80005f8 <__aeabi_dmul>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4937      	ldr	r1, [pc, #220]	; (8005ac0 <convertAngletoLinear+0x148>)
 80059e4:	e9c1 2300 	strd	r2, r3, [r1]
	vy = haiPI*(-w1 + w2 + w3 - w4)*(rChiaBon); 		//rad/s
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059f0:	f7fa fc4a 	bl	8000288 <__aeabi_dsub>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4610      	mov	r0, r2
 80059fa:	4619      	mov	r1, r3
 80059fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a00:	f7fa fc44 	bl	800028c <__adddf3>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a10:	f7fa fc3a 	bl	8000288 <__aeabi_dsub>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	a322      	add	r3, pc, #136	; (adr r3, 8005aa8 <convertAngletoLinear+0x130>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fde9 	bl	80005f8 <__aeabi_dmul>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	a320      	add	r3, pc, #128	; (adr r3, 8005ab0 <convertAngletoLinear+0x138>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fde0 	bl	80005f8 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4921      	ldr	r1, [pc, #132]	; (8005ac4 <convertAngletoLinear+0x14c>)
 8005a3e:	e9c1 2300 	strd	r2, r3, [r1]
	wz = haiPI*(-w1 + w2 - w3 + w4)*(rChiaBonNhanLxLy); //rad/s
 8005a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a4a:	f7fa fc1d 	bl	8000288 <__aeabi_dsub>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5a:	f7fa fc15 	bl	8000288 <__aeabi_dsub>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6a:	f7fa fc0f 	bl	800028c <__adddf3>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	a30c      	add	r3, pc, #48	; (adr r3, 8005aa8 <convertAngletoLinear+0x130>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fdbc 	bl	80005f8 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	a30b      	add	r3, pc, #44	; (adr r3, 8005ab8 <convertAngletoLinear+0x140>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fdb3 	bl	80005f8 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	490c      	ldr	r1, [pc, #48]	; (8005ac8 <convertAngletoLinear+0x150>)
 8005a98:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	54411744 	.word	0x54411744
 8005aac:	401921fb 	.word	0x401921fb
 8005ab0:	9999999a 	.word	0x9999999a
 8005ab4:	3f899999 	.word	0x3f899999
 8005ab8:	eb851eb8 	.word	0xeb851eb8
 8005abc:	3faeb851 	.word	0x3faeb851
 8005ac0:	20000298 	.word	0x20000298
 8005ac4:	200002a0 	.word	0x200002a0
 8005ac8:	200002a8 	.word	0x200002a8

08005acc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_10)
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d11b      	bne.n	8005b16 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		HAL_Delay(20);
 8005ade:	2014      	movs	r0, #20
 8005ae0:	f001 ff18 	bl	8007914 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)
 8005ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ae8:	482c      	ldr	r0, [pc, #176]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005aea:	f002 fde7 	bl	80086bc <HAL_GPIO_ReadPin>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04a      	beq.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8005afe:	2140      	movs	r1, #64	; 0x40
 8005b00:	4826      	ldr	r0, [pc, #152]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b02:	f002 fe0c 	bl	800871e <HAL_GPIO_TogglePin>
			  str_msg.data = button1;
 8005b06:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8005b0a:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8005b0c:	4924      	ldr	r1, [pc, #144]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b0e:	4826      	ldr	r0, [pc, #152]	; (8005ba8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005b10:	f7fc fe5f 	bl	80027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
			  str_msg.data = button3;
			  chatter.publish(&str_msg);
		}
	}
}
 8005b14:	e03e      	b.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
	else if(GPIO_Pin == GPIO_PIN_11)
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1c:	d11b      	bne.n	8005b56 <HAL_GPIO_EXTI_Callback+0x8a>
		HAL_Delay(20);
 8005b1e:	2014      	movs	r0, #20
 8005b20:	f001 fef8 	bl	8007914 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0)
 8005b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b28:	481c      	ldr	r0, [pc, #112]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b2a:	f002 fdc7 	bl	80086bc <HAL_GPIO_ReadPin>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02a      	beq.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8005b3e:	2140      	movs	r1, #64	; 0x40
 8005b40:	4816      	ldr	r0, [pc, #88]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b42:	f002 fdec 	bl	800871e <HAL_GPIO_TogglePin>
			  str_msg.data = button2;
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_GPIO_EXTI_Callback+0xe0>)
 8005b4a:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8005b4c:	4914      	ldr	r1, [pc, #80]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b4e:	4816      	ldr	r0, [pc, #88]	; (8005ba8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005b50:	f7fc fe3f 	bl	80027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005b54:	e01e      	b.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
	else if(GPIO_Pin == GPIO_PIN_12)
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5c:	d11a      	bne.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
		HAL_Delay(20);
 8005b5e:	2014      	movs	r0, #20
 8005b60:	f001 fed8 	bl	8007914 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0)
 8005b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b68:	480c      	ldr	r0, [pc, #48]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b6a:	f002 fda7 	bl	80086bc <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_GPIO_EXTI_Callback+0xc8>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8005b7e:	2140      	movs	r1, #64	; 0x40
 8005b80:	4806      	ldr	r0, [pc, #24]	; (8005b9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b82:	f002 fdcc 	bl	800871e <HAL_GPIO_TogglePin>
			  str_msg.data = button3;
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b88:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8005b8a:	605a      	str	r2, [r3, #4]
			  chatter.publish(&str_msg);
 8005b8c:	4904      	ldr	r1, [pc, #16]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b8e:	4806      	ldr	r0, [pc, #24]	; (8005ba8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005b90:	f7fc fe1f 	bl	80027d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40020000 	.word	0x40020000
 8005ba0:	20000dd8 	.word	0x20000dd8
 8005ba4:	20000000 	.word	0x20000000
 8005ba8:	20000de0 	.word	0x20000de0
 8005bac:	2000000c 	.word	0x2000000c
 8005bb0:	20000018 	.word	0x20000018

08005bb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d80d      	bhi.n	8005be4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	fa22 f103 	lsr.w	r1, r2, r3
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b2ca      	uxtb	r2, r1
 8005bda:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e7ee      	b.n	8005bc2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d811      	bhi.n	8005c2e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	440a      	add	r2, r1
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	4611      	mov	r1, r2
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	00d2      	lsls	r2, r2, #3
 8005c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e7ea      	b.n	8005c04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	080101b4 	.word	0x080101b4

08005c5c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ffe5 	bl	8005c3c <_ZN3ros11Subscriber_C1Ev>
 8005c72:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3310      	adds	r3, #16
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fd fc21 	bl	80034c4 <_ZN13geometry_msgs5TwistC1Ev>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	659a      	str	r2, [r3, #88]	; 0x58
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  };
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	080100f8 	.word	0x080100f8

08005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
  }
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fc fdd1 	bl	8002870 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	dc19      	bgt.n	8005d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	605a      	str	r2, [r3, #4]
        return true;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e004      	b.n	8005d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e7e2      	b.n	8005d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8005d3e:	2300      	movs	r3, #0
  }
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	dc1e      	bgt.n	8005d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d111      	bne.n	8005d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	60da      	str	r2, [r3, #12]
        return true;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e004      	b.n	8005da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e7dd      	b.n	8005d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005d9e:	2300      	movs	r3, #0
  }
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc fe46 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 8005dc0:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb fe9d 	bl	8001b02 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	099a      	lsrs	r2, r3, #6
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005de2:	fba3 1302 	umull	r1, r3, r3, r2
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8005df4:	fb02 f203 	mul.w	r2, r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005dfe:	441a      	add	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fcba 	bl	8007784 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005e10:	bf00      	nop
  }
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	10624dd3 	.word	0x10624dd3
 8005e20:	000f4240 	.word	0x000f4240

08005e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fc fe0b 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 8005e36:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d903      	bls.n	8005e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d903      	bls.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d014      	beq.n	8005ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fc fde4 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad2      	subs	r2, r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005e90:	429a      	cmp	r2, r3
 8005e92:	bf8c      	ite	hi
 8005e94:	2301      	movhi	r3, #1
 8005e96:	2300      	movls	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005e9e:	f06f 0301 	mvn.w	r3, #1
 8005ea2:	e194      	b.n	80061ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fc fcfd 	bl	80028a8 <_ZN13STM32Hardware4readEv>
 8005eae:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f2c0 8174 	blt.w	80061a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d11e      	bne.n	8005f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	b2d1      	uxtb	r1, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	460a      	mov	r2, r1
 8005eea:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1b4      	bne.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2208      	movs	r2, #8
 8005f0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005f0e:	e7af      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d128      	bne.n	8005f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2bff      	cmp	r3, #255	; 0xff
 8005f1e:	d10d      	bne.n	8005f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f103 0214 	add.w	r2, r3, #20
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005f3a:	e799      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fc fd83 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bf8c      	ite	hi
 8005f54:	2301      	movhi	r3, #1
 8005f56:	2300      	movls	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d088      	beq.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005f66:	f06f 0301 	mvn.w	r3, #1
 8005f6a:	e130      	b.n	80061ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d118      	bne.n	8005fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2bfe      	cmp	r3, #254	; 0xfe
 8005f7a:	d107      	bne.n	8005f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005f8a:	e771      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f47f af68 	bne.w	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f918 	bl	80061d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005fa6:	e763      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d113      	bne.n	8005fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005fd8:	e74a      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d110      	bne.n	8006006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006004:	e734      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800600c:	2b04      	cmp	r3, #4
 800600e:	d116      	bne.n	800603e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006016:	425a      	negs	r2, r3
 8006018:	b2db      	uxtb	r3, r3
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	bf58      	it	pl
 800601e:	4253      	negpl	r3, r2
 8006020:	2bff      	cmp	r3, #255	; 0xff
 8006022:	d107      	bne.n	8006034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006032:	e71d      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800603c:	e718      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006044:	2b05      	cmp	r3, #5
 8006046:	d10f      	bne.n	8006068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006066:	e703      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800606e:	2b06      	cmp	r3, #6
 8006070:	d117      	bne.n	80060a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2207      	movs	r2, #7
 8006088:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f aeec 	bne.w	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2208      	movs	r2, #8
 800609c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80060a0:	e6e6      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	f47f aee1 	bne.w	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80060bc:	425a      	negs	r2, r3
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	bf58      	it	pl
 80060c4:	4253      	negpl	r3, r2
 80060c6:	2bff      	cmp	r3, #255	; 0xff
 80060c8:	f47f aed2 	bne.w	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d110      	bne.n	80060f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f87d 	bl	80061d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f898 	bl	8006212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f6:	e06a      	b.n	80061ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80060fe:	2b0a      	cmp	r3, #10
 8006100:	d107      	bne.n	8006112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f960 	bl	80063d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8006110:	e6ae      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006118:	2b06      	cmp	r3, #6
 800611a:	d10e      	bne.n	800613a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fc f9ad 	bl	800248a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006138:	e69a      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006140:	2b0b      	cmp	r3, #11
 8006142:	d104      	bne.n	800614e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800614c:	e690      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006154:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f43f ae84 	beq.w	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800616e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006178:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006182:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f202 2222 	addw	r2, r2, #546	; 0x222
 800618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800619a:	4611      	mov	r1, r2
 800619c:	4798      	blx	r3
    while (true)
 800619e:	e667      	b.n	8005e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80061a0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d906      	bls.n	80061cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f809 	bl	80061d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80061cc:	2300      	movs	r3, #0
  }
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fb fcae 	bl	8001b44 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f107 020c 	add.w	r2, r7, #12
 80061f2:	210a      	movs	r1, #10
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
    rt_time = hardware_.time();
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fc fc25 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8006212:	b590      	push	{r4, r7, lr}
 8006214:	b08b      	sub	sp, #44	; 0x2c
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	4618      	mov	r0, r3
 8006220:	f7fb fd80 	bl	8001d24 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	2b18      	cmp	r3, #24
 800622c:	dc63      	bgt.n	80062f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d056      	beq.n	80062ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	b29b      	uxth	r3, r3
 8006252:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4608      	mov	r0, r1
 800628e:	4798      	blx	r3
 8006290:	4603      	mov	r3, r0
 8006292:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4608      	mov	r0, r1
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80062c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681c      	ldr	r4, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fc fa8c 	bl	80027fa <_ZN3ros9Publisher15getEndpointTypeEv>
 80062e2:	4601      	mov	r1, r0
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	461a      	mov	r2, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	3301      	adds	r3, #1
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	e798      	b.n	8006228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b18      	cmp	r3, #24
 80062fe:	dc5f      	bgt.n	80063c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d053      	beq.n	80063b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006314:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	b29b      	uxth	r3, r3
 8006320:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	f202 2222 	addw	r2, r2, #546	; 0x222
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006336:	f202 2222 	addw	r2, r2, #546	; 0x222
 800633a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4608      	mov	r0, r1
 8006352:	4798      	blx	r3
 8006354:	4603      	mov	r3, r0
 8006356:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	f202 2222 	addw	r2, r2, #546	; 0x222
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	330c      	adds	r3, #12
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4608      	mov	r0, r1
 8006378:	4798      	blx	r3
 800637a:	4603      	mov	r3, r0
 800637c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800637e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006382:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681c      	ldr	r4, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3304      	adds	r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4798      	blx	r3
 80063ac:	4601      	mov	r1, r0
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	461a      	mov	r2, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	3301      	adds	r3, #1
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	e79c      	b.n	80062fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80063c8:	bf00      	nop
 80063ca:	372c      	adds	r7, #44	; 0x2c
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd90      	pop	{r4, r7, pc}

080063d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fb fbb0 	bl	8001b44 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fc fb2f 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 80063ee:	4602      	mov	r2, r0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fb fc0f 	bl	8001c24 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4915      	ldr	r1, [pc, #84]	; (8006460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800640c:	fba1 1303 	umull	r1, r3, r1, r3
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	4413      	add	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006416:	6939      	ldr	r1, [r7, #16]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800641c:	fba3 0302 	umull	r0, r3, r3, r2
 8006420:	099b      	lsrs	r3, r3, #6
 8006422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006426:	fb00 f303 	mul.w	r3, r0, r3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	4a0d      	ldr	r2, [pc, #52]	; (8006464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	440b      	add	r3, r1
 8006434:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8a4 	bl	800658c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7fc faff 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 800644e:	4602      	mov	r2, r0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8006456:	bf00      	nop
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	10624dd3 	.word	0x10624dd3
 8006464:	000f4240 	.word	0x000f4240

08006468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b63      	cmp	r3, #99	; 0x63
 8006478:	dd09      	ble.n	800648e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006480:	f083 0301 	eor.w	r3, r3, #1
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800648a:	2300      	movs	r3, #0
 800648c:	e077      	b.n	800657e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800649a:	3207      	adds	r2, #7
 800649c:	4611      	mov	r1, r2
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
 80064a2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	22fe      	movs	r2, #254	; 0xfe
 80064b0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	121b      	asrs	r3, r3, #8
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80064d8:	4413      	add	r3, r2
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	b21b      	sxth	r3, r3
 80064f4:	121b      	asrs	r3, r3, #8
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006502:	2305      	movs	r3, #5
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	3306      	adds	r3, #6
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	dc0d      	bgt.n	800652c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4413      	add	r3, r2
 8006516:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3301      	adds	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e7ec      	b.n	8006506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3307      	adds	r3, #7
 8006530:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	425a      	negs	r2, r3
 8006536:	b2db      	uxtb	r3, r3
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	bf58      	it	pl
 800653c:	4253      	negpl	r3, r2
 800653e:	b2da      	uxtb	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6179      	str	r1, [r7, #20]
 8006546:	43d2      	mvns	r2, r2
 8006548:	b2d1      	uxtb	r1, r2
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	460a      	mov	r2, r1
 8006550:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655a:	dc0a      	bgt.n	8006572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4619      	mov	r1, r3
 800656a:	f7fc fa29 	bl	80029c0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	e005      	b.n	800657e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8006572:	4905      	ldr	r1, [pc, #20]	; (8006588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f849 	bl	800660c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	08010074 	.word	0x08010074

0800658c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f7fc fa56 	bl	8002a4c <_ZN13STM32Hardware4timeEv>
 80065a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4915      	ldr	r1, [pc, #84]	; (8006600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80065aa:	fba1 1303 	umull	r1, r3, r1, r3
 80065ae:	099b      	lsrs	r3, r3, #6
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	1e5a      	subs	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80065c2:	fba3 0302 	umull	r0, r3, r3, r2
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065cc:	fb00 f303 	mul.w	r3, r0, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80065d4:	fb02 f303 	mul.w	r3, r2, r3
 80065d8:	1aca      	subs	r2, r1, r3
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f001 f8c6 	bl	8007784 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	10624dd3 	.word	0x10624dd3
 8006604:	000f4240 	.word	0x000f4240
 8006608:	3b9aca00 	.word	0x3b9aca00

0800660c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	2103      	movs	r1, #3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f804 	bl	8006628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	460b      	mov	r3, r1
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8006636:	f107 0314 	add.w	r3, r7, #20
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb fd36 	bl	80020ac <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f107 0214 	add.w	r2, r7, #20
 8006652:	2107      	movs	r1, #7
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	4798      	blx	r3
  }
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <_Z41__static_initialization_and_destruction_0ii>:
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d12e      	bne.n	80066ce <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006676:	4293      	cmp	r3, r2
 8006678:	d129      	bne.n	80066ce <_Z41__static_initialization_and_destruction_0ii+0x6e>
int countTick = HAL_GetTick();
 800667a:	f001 f93f 	bl	80078fc <HAL_GetTick>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006684:	601a      	str	r2, [r3, #0]
ros::NodeHandle nh;
 8006686:	4815      	ldr	r0, [pc, #84]	; (80066dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006688:	f7fe fcf6 	bl	8005078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu;
 800668c:	4814      	ldr	r0, [pc, #80]	; (80066e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800668e:	f7fd ff43 	bl	8004518 <_ZN11sensor_msgs3ImuC1Ev>
std_msgs::String str_msg;
 8006692:	4814      	ldr	r0, [pc, #80]	; (80066e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006694:	f7fc f9e6 	bl	8002a64 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8006698:	2300      	movs	r3, #0
 800669a:	4a12      	ldr	r2, [pc, #72]	; (80066e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800669c:	4912      	ldr	r1, [pc, #72]	; (80066e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800669e:	4813      	ldr	r0, [pc, #76]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80066a0:	f7fc f880 	bl	80027a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_imu("imu/data", &imu);
 80066a4:	2300      	movs	r3, #0
 80066a6:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80066a8:	4911      	ldr	r1, [pc, #68]	; (80066f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80066aa:	4812      	ldr	r0, [pc, #72]	; (80066f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80066ac:	f7fc f87a 	bl	80027a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::Twist raw_vel_msg;
 80066b0:	4811      	ldr	r0, [pc, #68]	; (80066f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80066b2:	f7fc ff07 	bl	80034c4 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
 80066b6:	2300      	movs	r3, #0
 80066b8:	4a0f      	ldr	r2, [pc, #60]	; (80066f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80066ba:	4910      	ldr	r1, [pc, #64]	; (80066fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80066bc:	4810      	ldr	r0, [pc, #64]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80066be:	f7fc f871 	bl	80027a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);
 80066c2:	2301      	movs	r3, #1
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80066c6:	4910      	ldr	r1, [pc, #64]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80066c8:	4810      	ldr	r0, [pc, #64]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80066ca:	f7ff fac7 	bl	8005c5c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000340 	.word	0x20000340
 80066dc:	20000344 	.word	0x20000344
 80066e0:	20000c80 	.word	0x20000c80
 80066e4:	20000dd8 	.word	0x20000dd8
 80066e8:	080100b0 	.word	0x080100b0
 80066ec:	20000de0 	.word	0x20000de0
 80066f0:	080100b8 	.word	0x080100b8
 80066f4:	20000df4 	.word	0x20000df4
 80066f8:	20000e08 	.word	0x20000e08
 80066fc:	080100c4 	.word	0x080100c4
 8006700:	20000e50 	.word	0x20000e50
 8006704:	08005751 	.word	0x08005751
 8006708:	080100cc 	.word	0x080100cc
 800670c:	20000e68 	.word	0x20000e68

08006710 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3310      	adds	r3, #16
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f7fc ff11 	bl	8003548 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	3210      	adds	r2, #16
 800672e:	4610      	mov	r0, r2
 8006730:	4798      	blx	r3
  }
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f7fc ff18 	bl	8003594 <_ZN13geometry_msgs5Twist7getTypeEv>
 8006764:	4603      	mov	r3, r0
  }
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3310      	adds	r3, #16
 800677a:	4618      	mov	r0, r3
 800677c:	f7fc ff18 	bl	80035b0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006780:	4603      	mov	r3, r0
  }
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    return configured_;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <_GLOBAL__sub_I_Vx>:
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7ff ff57 	bl	8006660 <_Z41__static_initialization_and_destruction_0ii>
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	607b      	str	r3, [r7, #4]
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_MspInit+0x4c>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <HAL_MspInit+0x4c>)
 80067c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067c8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <HAL_MspInit+0x4c>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_MspInit+0x4c>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	4a08      	ldr	r2, [pc, #32]	; (8006800 <HAL_MspInit+0x4c>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e4:	6413      	str	r3, [r2, #64]	; 0x40
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_MspInit+0x4c>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40023800 	.word	0x40023800

08006804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <HAL_TIM_Base_MspInit+0xa8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d116      	bne.n	8006844 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6453      	str	r3, [r2, #68]	; 0x44
 8006826:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006832:	2200      	movs	r2, #0
 8006834:	2100      	movs	r1, #0
 8006836:	2018      	movs	r0, #24
 8006838:	f001 f96b 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800683c:	2018      	movs	r0, #24
 800683e:	f001 f984 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8006842:	e02e      	b.n	80068a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <HAL_TIM_Base_MspInit+0xb0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10e      	bne.n	800686c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	6453      	str	r3, [r2, #68]	; 0x44
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693b      	ldr	r3, [r7, #16]
}
 800686a:	e01a      	b.n	80068a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM9)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <HAL_TIM_Base_MspInit+0xb4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d115      	bne.n	80068a2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	4a0c      	ldr	r2, [pc, #48]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006884:	6453      	str	r3, [r2, #68]	; 0x44
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <HAL_TIM_Base_MspInit+0xac>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	2018      	movs	r0, #24
 8006898:	f001 f93b 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800689c:	2018      	movs	r0, #24
 800689e:	f001 f954 	bl	8007b4a <HAL_NVIC_EnableIRQ>
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000

080068bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c4:	f107 0314 	add.w	r3, r7, #20
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	609a      	str	r2, [r3, #8]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a34      	ldr	r2, [pc, #208]	; (80069ac <HAL_TIM_MspPostInit+0xf0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d13e      	bne.n	800695c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	4b33      	ldr	r3, [pc, #204]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	4a32      	ldr	r2, [pc, #200]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 80068e8:	f043 0310 	orr.w	r3, r3, #16
 80068ec:	6313      	str	r3, [r2, #48]	; 0x30
 80068ee:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	6313      	str	r3, [r2, #48]	; 0x30
 800690a:	4b29      	ldr	r3, [pc, #164]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006916:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800691a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800691c:	2302      	movs	r3, #2
 800691e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006924:	2300      	movs	r3, #0
 8006926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006928:	2301      	movs	r3, #1
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800692c:	f107 0314 	add.w	r3, r7, #20
 8006930:	4619      	mov	r1, r3
 8006932:	4820      	ldr	r0, [pc, #128]	; (80069b4 <HAL_TIM_MspPostInit+0xf8>)
 8006934:	f001 fd26 	bl	8008384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2302      	movs	r3, #2
 8006940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006946:	2300      	movs	r3, #0
 8006948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800694a:	2301      	movs	r3, #1
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	4619      	mov	r1, r3
 8006954:	4818      	ldr	r0, [pc, #96]	; (80069b8 <HAL_TIM_MspPostInit+0xfc>)
 8006956:	f001 fd15 	bl	8008384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800695a:	e023      	b.n	80069a4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_TIM_MspPostInit+0x100>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d11e      	bne.n	80069a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 8006970:	f043 0304 	orr.w	r3, r3, #4
 8006974:	6313      	str	r3, [r2, #48]	; 0x30
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <HAL_TIM_MspPostInit+0xf4>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006988:	2302      	movs	r3, #2
 800698a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006990:	2300      	movs	r3, #0
 8006992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006994:	2303      	movs	r3, #3
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	4619      	mov	r1, r3
 800699e:	4808      	ldr	r0, [pc, #32]	; (80069c0 <HAL_TIM_MspPostInit+0x104>)
 80069a0:	f001 fcf0 	bl	8008384 <HAL_GPIO_Init>
}
 80069a4:	bf00      	nop
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40020000 	.word	0x40020000
 80069bc:	40010400 	.word	0x40010400
 80069c0:	40020800 	.word	0x40020800

080069c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08c      	sub	sp, #48	; 0x30
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069cc:	f107 031c 	add.w	r3, r7, #28
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	609a      	str	r2, [r3, #8]
 80069d8:	60da      	str	r2, [r3, #12]
 80069da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a69      	ldr	r2, [pc, #420]	; (8006b88 <HAL_UART_MspInit+0x1c4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	f040 8092 	bne.w	8006b0c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	4b67      	ldr	r3, [pc, #412]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	4a66      	ldr	r2, [pc, #408]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 80069f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f6:	6413      	str	r3, [r2, #64]	; 0x40
 80069f8:	4b64      	ldr	r3, [pc, #400]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	4b60      	ldr	r3, [pc, #384]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	4a5f      	ldr	r2, [pc, #380]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6313      	str	r3, [r2, #48]	; 0x30
 8006a14:	4b5d      	ldr	r3, [pc, #372]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006a20:	230c      	movs	r3, #12
 8006a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a24:	2302      	movs	r3, #2
 8006a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a30:	2307      	movs	r3, #7
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a34:	f107 031c 	add.w	r3, r7, #28
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4855      	ldr	r0, [pc, #340]	; (8006b90 <HAL_UART_MspInit+0x1cc>)
 8006a3c:	f001 fca2 	bl	8008384 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006a40:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a42:	4a55      	ldr	r2, [pc, #340]	; (8006b98 <HAL_UART_MspInit+0x1d4>)
 8006a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006a46:	4b53      	ldr	r3, [pc, #332]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a4e:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a54:	4b4f      	ldr	r3, [pc, #316]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a5a:	4b4e      	ldr	r3, [pc, #312]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a62:	4b4c      	ldr	r3, [pc, #304]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a68:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006a6e:	4b49      	ldr	r3, [pc, #292]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a76:	4b47      	ldr	r3, [pc, #284]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a7c:	4b45      	ldr	r3, [pc, #276]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006a82:	4844      	ldr	r0, [pc, #272]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a84:	f001 f87c 	bl	8007b80 <HAL_DMA_Init>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006a8e:	f7fb f833 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a3f      	ldr	r2, [pc, #252]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
 8006a98:	4a3e      	ldr	r2, [pc, #248]	; (8006b94 <HAL_UART_MspInit+0x1d0>)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006a9e:	4b3f      	ldr	r3, [pc, #252]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006aa0:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <HAL_UART_MspInit+0x1dc>)
 8006aa2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006aa4:	4b3d      	ldr	r3, [pc, #244]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006aaa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006aac:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006aae:	2240      	movs	r2, #64	; 0x40
 8006ab0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ab2:	4b3a      	ldr	r3, [pc, #232]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006abe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ac0:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ac6:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006acc:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006ad2:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ad8:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006ade:	482f      	ldr	r0, [pc, #188]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006ae0:	f001 f84e 	bl	8007b80 <HAL_DMA_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006aea:	f7fb f805 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006af2:	635a      	str	r2, [r3, #52]	; 0x34
 8006af4:	4a29      	ldr	r2, [pc, #164]	; (8006b9c <HAL_UART_MspInit+0x1d8>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	2026      	movs	r0, #38	; 0x26
 8006b00:	f001 f807 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b04:	2026      	movs	r0, #38	; 0x26
 8006b06:	f001 f820 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b0a:	e039      	b.n	8006b80 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a24      	ldr	r2, [pc, #144]	; (8006ba4 <HAL_UART_MspInit+0x1e0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d134      	bne.n	8006b80 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	4b1c      	ldr	r3, [pc, #112]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b24:	6413      	str	r3, [r2, #64]	; 0x40
 8006b26:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	4a14      	ldr	r2, [pc, #80]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b3c:	f043 0302 	orr.w	r3, r3, #2
 8006b40:	6313      	str	r3, [r2, #48]	; 0x30
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <HAL_UART_MspInit+0x1c8>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b54:	2302      	movs	r3, #2
 8006b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b60:	2307      	movs	r3, #7
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	480f      	ldr	r0, [pc, #60]	; (8006ba8 <HAL_UART_MspInit+0x1e4>)
 8006b6c:	f001 fc0a 	bl	8008384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	2027      	movs	r0, #39	; 0x27
 8006b76:	f000 ffcc 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b7a:	2027      	movs	r0, #39	; 0x27
 8006b7c:	f000 ffe5 	bl	8007b4a <HAL_NVIC_EnableIRQ>
}
 8006b80:	bf00      	nop
 8006b82:	3730      	adds	r7, #48	; 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40020000 	.word	0x40020000
 8006b94:	20000f8c 	.word	0x20000f8c
 8006b98:	40026088 	.word	0x40026088
 8006b9c:	20001078 	.word	0x20001078
 8006ba0:	400260a0 	.word	0x400260a0
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40020400 	.word	0x40020400

08006bac <triTuyeDoi>:
extern DMA_HandleTypeDef hdma_usart2_tx;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
/* USER CODE BEGIN EV */
int triTuyeDoi(int a)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	if(a < 0)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da02      	bge.n	8006bc0 <triTuyeDoi+0x14>
		a = -a;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	607b      	str	r3, [r7, #4]
	else
		a = a;
	return a;
 8006bc0:	687b      	ldr	r3, [r7, #4]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <PID_control_DC1>:
{
		return (int)c-48;
}

void PID_control_DC1(double speed_des1_rps)
{
 8006bd0:	b5b0      	push	{r4, r5, r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	ed87 0b00 	vstr	d0, [r7]
	Speed_des1_rps = triTuyeDoi((speed_des1_rps*330*0.025));
 8006bda:	a374      	add	r3, pc, #464	; (adr r3, 8006dac <PID_control_DC1+0x1dc>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be4:	f7f9 fd08 	bl	80005f8 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	a35b      	add	r3, pc, #364	; (adr r3, 8006d60 <PID_control_DC1+0x190>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7f9 ffa9 	bl	8000b58 <__aeabi_d2iz>
 8006c06:	4603      	mov	r3, r0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff ffcf 	bl	8006bac <triTuyeDoi>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4a55      	ldr	r2, [pc, #340]	; (8006d68 <PID_control_DC1+0x198>)
 8006c12:	6013      	str	r3, [r2, #0]
	rSpeed1 = pluse1 - pluse_pre1;
 8006c14:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <PID_control_DC1+0x19c>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b55      	ldr	r3, [pc, #340]	; (8006d70 <PID_control_DC1+0x1a0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	4a55      	ldr	r2, [pc, #340]	; (8006d74 <PID_control_DC1+0x1a4>)
 8006c20:	6013      	str	r3, [r2, #0]
	pluse_pre1 = pluse1;
 8006c22:	4b52      	ldr	r3, [pc, #328]	; (8006d6c <PID_control_DC1+0x19c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a52      	ldr	r2, [pc, #328]	; (8006d70 <PID_control_DC1+0x1a0>)
 8006c28:	6013      	str	r3, [r2, #0]
	Err1 = Speed_des1_rps - triTuyeDoi(rSpeed1);
 8006c2a:	4b4f      	ldr	r3, [pc, #316]	; (8006d68 <PID_control_DC1+0x198>)
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <PID_control_DC1+0x1a4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff ffba 	bl	8006bac <triTuyeDoi>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	1ae3      	subs	r3, r4, r3
 8006c3c:	4a4e      	ldr	r2, [pc, #312]	; (8006d78 <PID_control_DC1+0x1a8>)
 8006c3e:	6013      	str	r3, [r2, #0]

	pPart1 = (float)(Kp1*(Err1));
 8006c40:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <PID_control_DC1+0x1a8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <PID_control_DC1+0x1ac>)
 8006c4e:	edd3 7a00 	vldr	s15, [r3]
 8006c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c56:	4b4a      	ldr	r3, [pc, #296]	; (8006d80 <PID_control_DC1+0x1b0>)
 8006c58:	edc3 7a00 	vstr	s15, [r3]
	dPart1 = (float)(Kd1*(Err1 - pre_Err1)*inv_sampling_Time);
 8006c5c:	4b46      	ldr	r3, [pc, #280]	; (8006d78 <PID_control_DC1+0x1a8>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <PID_control_DC1+0x1b4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c6e:	4b46      	ldr	r3, [pc, #280]	; (8006d88 <PID_control_DC1+0x1b8>)
 8006c70:	edd3 7a00 	vldr	s15, [r3]
 8006c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c78:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006d8c <PID_control_DC1+0x1bc>
 8006c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c80:	4b43      	ldr	r3, [pc, #268]	; (8006d90 <PID_control_DC1+0x1c0>)
 8006c82:	edc3 7a00 	vstr	s15, [r3]
	iPart1 += (float)(Ki1*sampling_Time*Err1);
 8006c86:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <PID_control_DC1+0x1c4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7f9 fc5c 	bl	8000548 <__aeabi_f2d>
 8006c90:	a333      	add	r3, pc, #204	; (adr r3, 8006d60 <PID_control_DC1+0x190>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fcaf 	bl	80005f8 <__aeabi_dmul>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <PID_control_DC1+0x1a8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7f9 fc3c 	bl	8000524 <__aeabi_i2d>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 fca0 	bl	80005f8 <__aeabi_dmul>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f7f9 ff92 	bl	8000be8 <__aeabi_d2f>
 8006cc4:	ee07 0a10 	vmov	s14, r0
 8006cc8:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <PID_control_DC1+0x1c8>)
 8006cca:	edd3 7a00 	vldr	s15, [r3]
 8006cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cd2:	4b31      	ldr	r3, [pc, #196]	; (8006d98 <PID_control_DC1+0x1c8>)
 8006cd4:	edc3 7a00 	vstr	s15, [r3]
	Output1 += (int)(pPart1 + dPart1 + iPart1);
 8006cd8:	4b29      	ldr	r3, [pc, #164]	; (8006d80 <PID_control_DC1+0x1b0>)
 8006cda:	ed93 7a00 	vldr	s14, [r3]
 8006cde:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <PID_control_DC1+0x1c0>)
 8006ce0:	edd3 7a00 	vldr	s15, [r3]
 8006ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <PID_control_DC1+0x1c8>)
 8006cea:	edd3 7a00 	vldr	s15, [r3]
 8006cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cf6:	ee17 2a90 	vmov	r2, s15
 8006cfa:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	4a26      	ldr	r2, [pc, #152]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d02:	6013      	str	r3, [r2, #0]

	if(Output1 > 4000)
 8006d04:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006d0c:	dd03      	ble.n	8006d16 <PID_control_DC1+0x146>
		Output1 = 4000-1;
 8006d0e:	4b23      	ldr	r3, [pc, #140]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d10:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006d14:	601a      	str	r2, [r3, #0]
	if(Output1 <= 0)
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc02      	bgt.n	8006d24 <PID_control_DC1+0x154>
		Output1 = 1;
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

	PWM1 = Output1;
 8006d24:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <PID_control_DC1+0x1cc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <PID_control_DC1+0x1d0>)
 8006d2a:	6013      	str	r3, [r2, #0]
	pre_Err1 = Err1;
 8006d2c:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <PID_control_DC1+0x1a8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <PID_control_DC1+0x1b4>)
 8006d32:	6013      	str	r3, [r2, #0]
	w1  = (rSpeed1)/(0.025*330);
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <PID_control_DC1+0x1a4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fbf3 	bl	8000524 <__aeabi_i2d>
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <PID_control_DC1+0x1d4>)
 8006d44:	f7f9 fd82 	bl	800084c <__aeabi_ddiv>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4916      	ldr	r1, [pc, #88]	; (8006da8 <PID_control_DC1+0x1d8>)
 8006d4e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bdb0      	pop	{r4, r5, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w
 8006d60:	9999999a 	.word	0x9999999a
 8006d64:	3f999999 	.word	0x3f999999
 8006d68:	20000ef4 	.word	0x20000ef4
 8006d6c:	20000ecc 	.word	0x20000ecc
 8006d70:	20000ed0 	.word	0x20000ed0
 8006d74:	20000ed4 	.word	0x20000ed4
 8006d78:	20000ed8 	.word	0x20000ed8
 8006d7c:	20000024 	.word	0x20000024
 8006d80:	20000ee4 	.word	0x20000ee4
 8006d84:	20000edc 	.word	0x20000edc
 8006d88:	20000028 	.word	0x20000028
 8006d8c:	42200000 	.word	0x42200000
 8006d90:	20000ee8 	.word	0x20000ee8
 8006d94:	20000ee0 	.word	0x20000ee0
 8006d98:	20000eec 	.word	0x20000eec
 8006d9c:	20000ef0 	.word	0x20000ef0
 8006da0:	20000f70 	.word	0x20000f70
 8006da4:	40208000 	.word	0x40208000
 8006da8:	20000278 	.word	0x20000278
 8006dac:	00000000 	.word	0x00000000
 8006db0:	4074a000 	.word	0x4074a000
 8006db4:	00000000 	.word	0x00000000

08006db8 <PID_control_DC2>:

void PID_control_DC2(double speed_des2_rps)
{
 8006db8:	b5b0      	push	{r4, r5, r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	ed87 0b00 	vstr	d0, [r7]
	Speed_des2_rps = triTuyeDoi((speed_des2_rps*330*0.025));
 8006dc2:	a374      	add	r3, pc, #464	; (adr r3, 8006f94 <PID_control_DC2+0x1dc>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dcc:	f7f9 fc14 	bl	80005f8 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	a35b      	add	r3, pc, #364	; (adr r3, 8006f48 <PID_control_DC2+0x190>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	f7f9 feb5 	bl	8000b58 <__aeabi_d2iz>
 8006dee:	4603      	mov	r3, r0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fedb 	bl	8006bac <triTuyeDoi>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a55      	ldr	r2, [pc, #340]	; (8006f50 <PID_control_DC2+0x198>)
 8006dfa:	6013      	str	r3, [r2, #0]
	rSpeed2 = pluse2 - pluse_pre2;
 8006dfc:	4b55      	ldr	r3, [pc, #340]	; (8006f54 <PID_control_DC2+0x19c>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b55      	ldr	r3, [pc, #340]	; (8006f58 <PID_control_DC2+0x1a0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	4a55      	ldr	r2, [pc, #340]	; (8006f5c <PID_control_DC2+0x1a4>)
 8006e08:	6013      	str	r3, [r2, #0]
	pluse_pre2 = pluse2;
 8006e0a:	4b52      	ldr	r3, [pc, #328]	; (8006f54 <PID_control_DC2+0x19c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a52      	ldr	r2, [pc, #328]	; (8006f58 <PID_control_DC2+0x1a0>)
 8006e10:	6013      	str	r3, [r2, #0]
	Err2 = Speed_des2_rps - triTuyeDoi(rSpeed2);
 8006e12:	4b4f      	ldr	r3, [pc, #316]	; (8006f50 <PID_control_DC2+0x198>)
 8006e14:	681c      	ldr	r4, [r3, #0]
 8006e16:	4b51      	ldr	r3, [pc, #324]	; (8006f5c <PID_control_DC2+0x1a4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fec6 	bl	8006bac <triTuyeDoi>
 8006e20:	4603      	mov	r3, r0
 8006e22:	1ae3      	subs	r3, r4, r3
 8006e24:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <PID_control_DC2+0x1a8>)
 8006e26:	6013      	str	r3, [r2, #0]

	pPart2 = (float)(Kp2*(Err2));
 8006e28:	4b4d      	ldr	r3, [pc, #308]	; (8006f60 <PID_control_DC2+0x1a8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	ee07 3a90 	vmov	s15, r3
 8006e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e34:	4b4b      	ldr	r3, [pc, #300]	; (8006f64 <PID_control_DC2+0x1ac>)
 8006e36:	edd3 7a00 	vldr	s15, [r3]
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <PID_control_DC2+0x1b0>)
 8006e40:	edc3 7a00 	vstr	s15, [r3]
	dPart2 = (float)(Kd2*(Err2 - pre_Err2)*inv_sampling_Time);
 8006e44:	4b46      	ldr	r3, [pc, #280]	; (8006f60 <PID_control_DC2+0x1a8>)
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4b48      	ldr	r3, [pc, #288]	; (8006f6c <PID_control_DC2+0x1b4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <PID_control_DC2+0x1b8>)
 8006e58:	edd3 7a00 	vldr	s15, [r3]
 8006e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e60:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006f74 <PID_control_DC2+0x1bc>
 8006e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e68:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <PID_control_DC2+0x1c0>)
 8006e6a:	edc3 7a00 	vstr	s15, [r3]
	iPart2 += (float)(Ki2*sampling_Time*Err2);
 8006e6e:	4b43      	ldr	r3, [pc, #268]	; (8006f7c <PID_control_DC2+0x1c4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7f9 fb68 	bl	8000548 <__aeabi_f2d>
 8006e78:	a333      	add	r3, pc, #204	; (adr r3, 8006f48 <PID_control_DC2+0x190>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4614      	mov	r4, r2
 8006e88:	461d      	mov	r5, r3
 8006e8a:	4b35      	ldr	r3, [pc, #212]	; (8006f60 <PID_control_DC2+0x1a8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7f9 fb48 	bl	8000524 <__aeabi_i2d>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f7f9 fe9e 	bl	8000be8 <__aeabi_d2f>
 8006eac:	ee07 0a10 	vmov	s14, r0
 8006eb0:	4b33      	ldr	r3, [pc, #204]	; (8006f80 <PID_control_DC2+0x1c8>)
 8006eb2:	edd3 7a00 	vldr	s15, [r3]
 8006eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <PID_control_DC2+0x1c8>)
 8006ebc:	edc3 7a00 	vstr	s15, [r3]
	Output2 += (int)(pPart2 + dPart2 + iPart2);
 8006ec0:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <PID_control_DC2+0x1b0>)
 8006ec2:	ed93 7a00 	vldr	s14, [r3]
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <PID_control_DC2+0x1c0>)
 8006ec8:	edd3 7a00 	vldr	s15, [r3]
 8006ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <PID_control_DC2+0x1c8>)
 8006ed2:	edd3 7a00 	vldr	s15, [r3]
 8006ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ede:	ee17 2a90 	vmov	r2, s15
 8006ee2:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006eea:	6013      	str	r3, [r2, #0]

	if(Output2 > 4000)
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006ef4:	dd03      	ble.n	8006efe <PID_control_DC2+0x146>
		Output2 = 4000-1;
 8006ef6:	4b23      	ldr	r3, [pc, #140]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006ef8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006efc:	601a      	str	r2, [r3, #0]
	if(Output2 <= 0)
 8006efe:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	dc02      	bgt.n	8006f0c <PID_control_DC2+0x154>
		Output2 = 1;
 8006f06:	4b1f      	ldr	r3, [pc, #124]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

	PWM2 = Output2;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <PID_control_DC2+0x1cc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1d      	ldr	r2, [pc, #116]	; (8006f88 <PID_control_DC2+0x1d0>)
 8006f12:	6013      	str	r3, [r2, #0]
	pre_Err2 = Err2;
 8006f14:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <PID_control_DC2+0x1a8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <PID_control_DC2+0x1b4>)
 8006f1a:	6013      	str	r3, [r2, #0]

	w2  = (rSpeed2)/(0.025*330);
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <PID_control_DC2+0x1a4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7f9 faff 	bl	8000524 <__aeabi_i2d>
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <PID_control_DC2+0x1d4>)
 8006f2c:	f7f9 fc8e 	bl	800084c <__aeabi_ddiv>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4916      	ldr	r1, [pc, #88]	; (8006f90 <PID_control_DC2+0x1d8>)
 8006f36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bdb0      	pop	{r4, r5, r7, pc}
 8006f42:	bf00      	nop
 8006f44:	f3af 8000 	nop.w
 8006f48:	9999999a 	.word	0x9999999a
 8006f4c:	3f999999 	.word	0x3f999999
 8006f50:	20000f1c 	.word	0x20000f1c
 8006f54:	20000ef8 	.word	0x20000ef8
 8006f58:	20000efc 	.word	0x20000efc
 8006f5c:	20000f00 	.word	0x20000f00
 8006f60:	20000f04 	.word	0x20000f04
 8006f64:	2000002c 	.word	0x2000002c
 8006f68:	20000f0c 	.word	0x20000f0c
 8006f6c:	20000f08 	.word	0x20000f08
 8006f70:	20000034 	.word	0x20000034
 8006f74:	42200000 	.word	0x42200000
 8006f78:	20000f10 	.word	0x20000f10
 8006f7c:	20000030 	.word	0x20000030
 8006f80:	20000f14 	.word	0x20000f14
 8006f84:	20000f18 	.word	0x20000f18
 8006f88:	20000f74 	.word	0x20000f74
 8006f8c:	40208000 	.word	0x40208000
 8006f90:	20000280 	.word	0x20000280
 8006f94:	00000000 	.word	0x00000000
 8006f98:	4074a000 	.word	0x4074a000
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <PID_control_DC3>:

void PID_control_DC3(double speed_des3_rps)
{
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	ed87 0b00 	vstr	d0, [r7]
	Speed_des3_rps = triTuyeDoi((speed_des3_rps*330*0.025));
 8006faa:	a374      	add	r3, pc, #464	; (adr r3, 800717c <PID_control_DC3+0x1dc>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb4:	f7f9 fb20 	bl	80005f8 <__aeabi_dmul>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	a35b      	add	r3, pc, #364	; (adr r3, 8007130 <PID_control_DC3+0x190>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 fb17 	bl	80005f8 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	f7f9 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fde7 	bl	8006bac <triTuyeDoi>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4a55      	ldr	r2, [pc, #340]	; (8007138 <PID_control_DC3+0x198>)
 8006fe2:	6013      	str	r3, [r2, #0]
	rSpeed3 = pluse3 - pluse_pre3;
 8006fe4:	4b55      	ldr	r3, [pc, #340]	; (800713c <PID_control_DC3+0x19c>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4b55      	ldr	r3, [pc, #340]	; (8007140 <PID_control_DC3+0x1a0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	4a55      	ldr	r2, [pc, #340]	; (8007144 <PID_control_DC3+0x1a4>)
 8006ff0:	6013      	str	r3, [r2, #0]
	pluse_pre3 = pluse3;
 8006ff2:	4b52      	ldr	r3, [pc, #328]	; (800713c <PID_control_DC3+0x19c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a52      	ldr	r2, [pc, #328]	; (8007140 <PID_control_DC3+0x1a0>)
 8006ff8:	6013      	str	r3, [r2, #0]
	Err3 = Speed_des3_rps - triTuyeDoi(rSpeed3);
 8006ffa:	4b4f      	ldr	r3, [pc, #316]	; (8007138 <PID_control_DC3+0x198>)
 8006ffc:	681c      	ldr	r4, [r3, #0]
 8006ffe:	4b51      	ldr	r3, [pc, #324]	; (8007144 <PID_control_DC3+0x1a4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fdd2 	bl	8006bac <triTuyeDoi>
 8007008:	4603      	mov	r3, r0
 800700a:	1ae3      	subs	r3, r4, r3
 800700c:	4a4e      	ldr	r2, [pc, #312]	; (8007148 <PID_control_DC3+0x1a8>)
 800700e:	6013      	str	r3, [r2, #0]

	pPart3 = (float)(Kp3*(Err3));
 8007010:	4b4d      	ldr	r3, [pc, #308]	; (8007148 <PID_control_DC3+0x1a8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800701c:	4b4b      	ldr	r3, [pc, #300]	; (800714c <PID_control_DC3+0x1ac>)
 800701e:	edd3 7a00 	vldr	s15, [r3]
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	4b4a      	ldr	r3, [pc, #296]	; (8007150 <PID_control_DC3+0x1b0>)
 8007028:	edc3 7a00 	vstr	s15, [r3]
	dPart3 = (float)(Kd3*(Err3 - pre_Err3)*inv_sampling_Time);
 800702c:	4b46      	ldr	r3, [pc, #280]	; (8007148 <PID_control_DC3+0x1a8>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b48      	ldr	r3, [pc, #288]	; (8007154 <PID_control_DC3+0x1b4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800703e:	4b46      	ldr	r3, [pc, #280]	; (8007158 <PID_control_DC3+0x1b8>)
 8007040:	edd3 7a00 	vldr	s15, [r3]
 8007044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007048:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800715c <PID_control_DC3+0x1bc>
 800704c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007050:	4b43      	ldr	r3, [pc, #268]	; (8007160 <PID_control_DC3+0x1c0>)
 8007052:	edc3 7a00 	vstr	s15, [r3]
	iPart3 += (float)(Ki3*sampling_Time*Err3);
 8007056:	4b43      	ldr	r3, [pc, #268]	; (8007164 <PID_control_DC3+0x1c4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7f9 fa74 	bl	8000548 <__aeabi_f2d>
 8007060:	a333      	add	r3, pc, #204	; (adr r3, 8007130 <PID_control_DC3+0x190>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 fac7 	bl	80005f8 <__aeabi_dmul>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4614      	mov	r4, r2
 8007070:	461d      	mov	r5, r3
 8007072:	4b35      	ldr	r3, [pc, #212]	; (8007148 <PID_control_DC3+0x1a8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7f9 fa54 	bl	8000524 <__aeabi_i2d>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 fab8 	bl	80005f8 <__aeabi_dmul>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4610      	mov	r0, r2
 800708e:	4619      	mov	r1, r3
 8007090:	f7f9 fdaa 	bl	8000be8 <__aeabi_d2f>
 8007094:	ee07 0a10 	vmov	s14, r0
 8007098:	4b33      	ldr	r3, [pc, #204]	; (8007168 <PID_control_DC3+0x1c8>)
 800709a:	edd3 7a00 	vldr	s15, [r3]
 800709e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <PID_control_DC3+0x1c8>)
 80070a4:	edc3 7a00 	vstr	s15, [r3]
	Output3 += (int)(pPart3 + dPart3 + iPart3);
 80070a8:	4b29      	ldr	r3, [pc, #164]	; (8007150 <PID_control_DC3+0x1b0>)
 80070aa:	ed93 7a00 	vldr	s14, [r3]
 80070ae:	4b2c      	ldr	r3, [pc, #176]	; (8007160 <PID_control_DC3+0x1c0>)
 80070b0:	edd3 7a00 	vldr	s15, [r3]
 80070b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <PID_control_DC3+0x1c8>)
 80070ba:	edd3 7a00 	vldr	s15, [r3]
 80070be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070c6:	ee17 2a90 	vmov	r2, s15
 80070ca:	4b28      	ldr	r3, [pc, #160]	; (800716c <PID_control_DC3+0x1cc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4413      	add	r3, r2
 80070d0:	4a26      	ldr	r2, [pc, #152]	; (800716c <PID_control_DC3+0x1cc>)
 80070d2:	6013      	str	r3, [r2, #0]

	if(Output3 > 4000)
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <PID_control_DC3+0x1cc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80070dc:	dd03      	ble.n	80070e6 <PID_control_DC3+0x146>
		Output3 = 4000-1;
 80070de:	4b23      	ldr	r3, [pc, #140]	; (800716c <PID_control_DC3+0x1cc>)
 80070e0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80070e4:	601a      	str	r2, [r3, #0]
	if(Output3 <= 0)
 80070e6:	4b21      	ldr	r3, [pc, #132]	; (800716c <PID_control_DC3+0x1cc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	dc02      	bgt.n	80070f4 <PID_control_DC3+0x154>
		Output3 = 1;
 80070ee:	4b1f      	ldr	r3, [pc, #124]	; (800716c <PID_control_DC3+0x1cc>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

	PWM3 = Output3;
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <PID_control_DC3+0x1cc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <PID_control_DC3+0x1d0>)
 80070fa:	6013      	str	r3, [r2, #0]
	pre_Err3 = Err3;
 80070fc:	4b12      	ldr	r3, [pc, #72]	; (8007148 <PID_control_DC3+0x1a8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a14      	ldr	r2, [pc, #80]	; (8007154 <PID_control_DC3+0x1b4>)
 8007102:	6013      	str	r3, [r2, #0]

	w3  = (rSpeed3)/(0.025*330);
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <PID_control_DC3+0x1a4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f7f9 fa0b 	bl	8000524 <__aeabi_i2d>
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <PID_control_DC3+0x1d4>)
 8007114:	f7f9 fb9a 	bl	800084c <__aeabi_ddiv>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4916      	ldr	r1, [pc, #88]	; (8007178 <PID_control_DC3+0x1d8>)
 800711e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bdb0      	pop	{r4, r5, r7, pc}
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w
 8007130:	9999999a 	.word	0x9999999a
 8007134:	3f999999 	.word	0x3f999999
 8007138:	20000f44 	.word	0x20000f44
 800713c:	20000f20 	.word	0x20000f20
 8007140:	20000f24 	.word	0x20000f24
 8007144:	20000f28 	.word	0x20000f28
 8007148:	20000f2c 	.word	0x20000f2c
 800714c:	20000038 	.word	0x20000038
 8007150:	20000f34 	.word	0x20000f34
 8007154:	20000f30 	.word	0x20000f30
 8007158:	20000040 	.word	0x20000040
 800715c:	42200000 	.word	0x42200000
 8007160:	20000f38 	.word	0x20000f38
 8007164:	2000003c 	.word	0x2000003c
 8007168:	20000f3c 	.word	0x20000f3c
 800716c:	20000f40 	.word	0x20000f40
 8007170:	20000f78 	.word	0x20000f78
 8007174:	40208000 	.word	0x40208000
 8007178:	20000288 	.word	0x20000288
 800717c:	00000000 	.word	0x00000000
 8007180:	4074a000 	.word	0x4074a000
 8007184:	00000000 	.word	0x00000000

08007188 <PID_control_DC4>:

void PID_control_DC4(double speed_des4_rps)
{
 8007188:	b5b0      	push	{r4, r5, r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	ed87 0b00 	vstr	d0, [r7]
	Speed_des4_rps = triTuyeDoi((speed_des4_rps*330*0.025));
 8007192:	a374      	add	r3, pc, #464	; (adr r3, 8007364 <PID_control_DC4+0x1dc>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800719c:	f7f9 fa2c 	bl	80005f8 <__aeabi_dmul>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	a35b      	add	r3, pc, #364	; (adr r3, 8007318 <PID_control_DC4+0x190>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fa23 	bl	80005f8 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	f7f9 fccd 	bl	8000b58 <__aeabi_d2iz>
 80071be:	4603      	mov	r3, r0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fcf3 	bl	8006bac <triTuyeDoi>
 80071c6:	4603      	mov	r3, r0
 80071c8:	4a55      	ldr	r2, [pc, #340]	; (8007320 <PID_control_DC4+0x198>)
 80071ca:	6013      	str	r3, [r2, #0]
	rSpeed4 = pluse4 - pluse_pre4;
 80071cc:	4b55      	ldr	r3, [pc, #340]	; (8007324 <PID_control_DC4+0x19c>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b55      	ldr	r3, [pc, #340]	; (8007328 <PID_control_DC4+0x1a0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	4a55      	ldr	r2, [pc, #340]	; (800732c <PID_control_DC4+0x1a4>)
 80071d8:	6013      	str	r3, [r2, #0]
	pluse_pre4 = pluse4;
 80071da:	4b52      	ldr	r3, [pc, #328]	; (8007324 <PID_control_DC4+0x19c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a52      	ldr	r2, [pc, #328]	; (8007328 <PID_control_DC4+0x1a0>)
 80071e0:	6013      	str	r3, [r2, #0]
	Err4 = Speed_des4_rps - triTuyeDoi(rSpeed4);
 80071e2:	4b4f      	ldr	r3, [pc, #316]	; (8007320 <PID_control_DC4+0x198>)
 80071e4:	681c      	ldr	r4, [r3, #0]
 80071e6:	4b51      	ldr	r3, [pc, #324]	; (800732c <PID_control_DC4+0x1a4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fcde 	bl	8006bac <triTuyeDoi>
 80071f0:	4603      	mov	r3, r0
 80071f2:	1ae3      	subs	r3, r4, r3
 80071f4:	4a4e      	ldr	r2, [pc, #312]	; (8007330 <PID_control_DC4+0x1a8>)
 80071f6:	6013      	str	r3, [r2, #0]

	pPart4 = (float)(Kp4*(Err4));
 80071f8:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <PID_control_DC4+0x1a8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007204:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <PID_control_DC4+0x1ac>)
 8007206:	edd3 7a00 	vldr	s15, [r3]
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <PID_control_DC4+0x1b0>)
 8007210:	edc3 7a00 	vstr	s15, [r3]
	dPart4 = (float)(Kd4*(Err4 - pre_Err4)*inv_sampling_Time);
 8007214:	4b46      	ldr	r3, [pc, #280]	; (8007330 <PID_control_DC4+0x1a8>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b48      	ldr	r3, [pc, #288]	; (800733c <PID_control_DC4+0x1b4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <PID_control_DC4+0x1b8>)
 8007228:	edd3 7a00 	vldr	s15, [r3]
 800722c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007230:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007344 <PID_control_DC4+0x1bc>
 8007234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007238:	4b43      	ldr	r3, [pc, #268]	; (8007348 <PID_control_DC4+0x1c0>)
 800723a:	edc3 7a00 	vstr	s15, [r3]
	iPart4 += (float)(Ki4*sampling_Time*Err4);
 800723e:	4b43      	ldr	r3, [pc, #268]	; (800734c <PID_control_DC4+0x1c4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f7f9 f980 	bl	8000548 <__aeabi_f2d>
 8007248:	a333      	add	r3, pc, #204	; (adr r3, 8007318 <PID_control_DC4+0x190>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4614      	mov	r4, r2
 8007258:	461d      	mov	r5, r3
 800725a:	4b35      	ldr	r3, [pc, #212]	; (8007330 <PID_control_DC4+0x1a8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f7f9 f960 	bl	8000524 <__aeabi_i2d>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4620      	mov	r0, r4
 800726a:	4629      	mov	r1, r5
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4610      	mov	r0, r2
 8007276:	4619      	mov	r1, r3
 8007278:	f7f9 fcb6 	bl	8000be8 <__aeabi_d2f>
 800727c:	ee07 0a10 	vmov	s14, r0
 8007280:	4b33      	ldr	r3, [pc, #204]	; (8007350 <PID_control_DC4+0x1c8>)
 8007282:	edd3 7a00 	vldr	s15, [r3]
 8007286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <PID_control_DC4+0x1c8>)
 800728c:	edc3 7a00 	vstr	s15, [r3]
	Output4 += (int)(pPart4 + dPart4 + iPart4);
 8007290:	4b29      	ldr	r3, [pc, #164]	; (8007338 <PID_control_DC4+0x1b0>)
 8007292:	ed93 7a00 	vldr	s14, [r3]
 8007296:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <PID_control_DC4+0x1c0>)
 8007298:	edd3 7a00 	vldr	s15, [r3]
 800729c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072a0:	4b2b      	ldr	r3, [pc, #172]	; (8007350 <PID_control_DC4+0x1c8>)
 80072a2:	edd3 7a00 	vldr	s15, [r3]
 80072a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072ae:	ee17 2a90 	vmov	r2, s15
 80072b2:	4b28      	ldr	r3, [pc, #160]	; (8007354 <PID_control_DC4+0x1cc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	4a26      	ldr	r2, [pc, #152]	; (8007354 <PID_control_DC4+0x1cc>)
 80072ba:	6013      	str	r3, [r2, #0]

	if(Output4 > 4000)
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <PID_control_DC4+0x1cc>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80072c4:	dd03      	ble.n	80072ce <PID_control_DC4+0x146>
		Output4 = 4000-1;
 80072c6:	4b23      	ldr	r3, [pc, #140]	; (8007354 <PID_control_DC4+0x1cc>)
 80072c8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80072cc:	601a      	str	r2, [r3, #0]
	if(Output4 <= 0)
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <PID_control_DC4+0x1cc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dc02      	bgt.n	80072dc <PID_control_DC4+0x154>
		Output4 = 1;
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <PID_control_DC4+0x1cc>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

	PWM4 = Output4;
 80072dc:	4b1d      	ldr	r3, [pc, #116]	; (8007354 <PID_control_DC4+0x1cc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <PID_control_DC4+0x1d0>)
 80072e2:	6013      	str	r3, [r2, #0]
	pre_Err4 = Err4;
 80072e4:	4b12      	ldr	r3, [pc, #72]	; (8007330 <PID_control_DC4+0x1a8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a14      	ldr	r2, [pc, #80]	; (800733c <PID_control_DC4+0x1b4>)
 80072ea:	6013      	str	r3, [r2, #0]

	w4  = (rSpeed4)/(0.025*330);
 80072ec:	4b0f      	ldr	r3, [pc, #60]	; (800732c <PID_control_DC4+0x1a4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7f9 f917 	bl	8000524 <__aeabi_i2d>
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	4b18      	ldr	r3, [pc, #96]	; (800735c <PID_control_DC4+0x1d4>)
 80072fc:	f7f9 faa6 	bl	800084c <__aeabi_ddiv>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4916      	ldr	r1, [pc, #88]	; (8007360 <PID_control_DC4+0x1d8>)
 8007306:	e9c1 2300 	strd	r2, r3, [r1]
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bdb0      	pop	{r4, r5, r7, pc}
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w
 8007318:	9999999a 	.word	0x9999999a
 800731c:	3f999999 	.word	0x3f999999
 8007320:	20000f6c 	.word	0x20000f6c
 8007324:	20000f48 	.word	0x20000f48
 8007328:	20000f4c 	.word	0x20000f4c
 800732c:	20000f50 	.word	0x20000f50
 8007330:	20000f54 	.word	0x20000f54
 8007334:	20000044 	.word	0x20000044
 8007338:	20000f5c 	.word	0x20000f5c
 800733c:	20000f58 	.word	0x20000f58
 8007340:	2000004c 	.word	0x2000004c
 8007344:	42200000 	.word	0x42200000
 8007348:	20000f60 	.word	0x20000f60
 800734c:	20000048 	.word	0x20000048
 8007350:	20000f64 	.word	0x20000f64
 8007354:	20000f68 	.word	0x20000f68
 8007358:	20000f7c 	.word	0x20000f7c
 800735c:	40208000 	.word	0x40208000
 8007360:	20000290 	.word	0x20000290
 8007364:	00000000 	.word	0x00000000
 8007368:	4074a000 	.word	0x4074a000

0800736c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007370:	e7fe      	b.n	8007370 <NMI_Handler+0x4>

08007372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007376:	e7fe      	b.n	8007376 <HardFault_Handler+0x4>

08007378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800737c:	e7fe      	b.n	800737c <MemManage_Handler+0x4>

0800737e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800737e:	b480      	push	{r7}
 8007380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007382:	e7fe      	b.n	8007382 <BusFault_Handler+0x4>

08007384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007388:	e7fe      	b.n	8007388 <UsageFault_Handler+0x4>

0800738a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800738a:	b480      	push	{r7}
 800738c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800738e:	bf00      	nop
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073aa:	bf00      	nop
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073b8:	f000 fa8c 	bl	80078d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073bc:	bf00      	nop
 80073be:	bd80      	pop	{r7, pc}

080073c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80073c4:	2001      	movs	r0, #1
 80073c6:	f001 f9c5 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1) == 0)
 80073ca:	2102      	movs	r1, #2
 80073cc:	480c      	ldr	r0, [pc, #48]	; (8007400 <EXTI0_IRQHandler+0x40>)
 80073ce:	f001 f975 	bl	80086bc <HAL_GPIO_ReadPin>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <EXTI0_IRQHandler+0x24>
	{
		pluse4--;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <EXTI0_IRQHandler+0x44>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <EXTI0_IRQHandler+0x44>)
 80073e0:	6013      	str	r3, [r2, #0]
	else if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1) == 1)
	{
		pluse4++;
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 80073e2:	e00b      	b.n	80073fc <EXTI0_IRQHandler+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_1) == 1)
 80073e4:	2102      	movs	r1, #2
 80073e6:	4806      	ldr	r0, [pc, #24]	; (8007400 <EXTI0_IRQHandler+0x40>)
 80073e8:	f001 f968 	bl	80086bc <HAL_GPIO_ReadPin>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d104      	bne.n	80073fc <EXTI0_IRQHandler+0x3c>
		pluse4++;
 80073f2:	4b04      	ldr	r3, [pc, #16]	; (8007404 <EXTI0_IRQHandler+0x44>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4a02      	ldr	r2, [pc, #8]	; (8007404 <EXTI0_IRQHandler+0x44>)
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	20000f48 	.word	0x20000f48

08007408 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800740c:	2002      	movs	r0, #2
 800740e:	f001 f9a1 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 0)
 8007412:	2101      	movs	r1, #1
 8007414:	480c      	ldr	r0, [pc, #48]	; (8007448 <EXTI1_IRQHandler+0x40>)
 8007416:	f001 f951 	bl	80086bc <HAL_GPIO_ReadPin>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <EXTI1_IRQHandler+0x24>
	{
		pluse1++;
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <EXTI1_IRQHandler+0x44>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a09      	ldr	r2, [pc, #36]	; (800744c <EXTI1_IRQHandler+0x44>)
 8007428:	6013      	str	r3, [r2, #0]
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
	{
		pluse1--;
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 800742a:	e00b      	b.n	8007444 <EXTI1_IRQHandler+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
 800742c:	2101      	movs	r1, #1
 800742e:	4806      	ldr	r0, [pc, #24]	; (8007448 <EXTI1_IRQHandler+0x40>)
 8007430:	f001 f944 	bl	80086bc <HAL_GPIO_ReadPin>
 8007434:	4603      	mov	r3, r0
 8007436:	2b01      	cmp	r3, #1
 8007438:	d104      	bne.n	8007444 <EXTI1_IRQHandler+0x3c>
		pluse1--;
 800743a:	4b04      	ldr	r3, [pc, #16]	; (800744c <EXTI1_IRQHandler+0x44>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3b01      	subs	r3, #1
 8007440:	4a02      	ldr	r2, [pc, #8]	; (800744c <EXTI1_IRQHandler+0x44>)
 8007442:	6013      	str	r3, [r2, #0]
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40020800 	.word	0x40020800
 800744c:	20000ecc 	.word	0x20000ecc

08007450 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007454:	2004      	movs	r0, #4
 8007456:	f001 f97d 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3) == 0)
 800745a:	2108      	movs	r1, #8
 800745c:	480c      	ldr	r0, [pc, #48]	; (8007490 <EXTI2_IRQHandler+0x40>)
 800745e:	f001 f92d 	bl	80086bc <HAL_GPIO_ReadPin>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <EXTI2_IRQHandler+0x24>
	{
		pluse3++;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <EXTI2_IRQHandler+0x44>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <EXTI2_IRQHandler+0x44>)
 8007470:	6013      	str	r3, [r2, #0]
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3) == 1)
	{
		pluse3--;
	}
  /* USER CODE END EXTI2_IRQn 1 */
}
 8007472:	e00b      	b.n	800748c <EXTI2_IRQHandler+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_3) == 1)
 8007474:	2108      	movs	r1, #8
 8007476:	4806      	ldr	r0, [pc, #24]	; (8007490 <EXTI2_IRQHandler+0x40>)
 8007478:	f001 f920 	bl	80086bc <HAL_GPIO_ReadPin>
 800747c:	4603      	mov	r3, r0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d104      	bne.n	800748c <EXTI2_IRQHandler+0x3c>
		pluse3--;
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <EXTI2_IRQHandler+0x44>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3b01      	subs	r3, #1
 8007488:	4a02      	ldr	r2, [pc, #8]	; (8007494 <EXTI2_IRQHandler+0x44>)
 800748a:	6013      	str	r3, [r2, #0]
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40020800 	.word	0x40020800
 8007494:	20000f20 	.word	0x20000f20

08007498 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800749c:	4802      	ldr	r0, [pc, #8]	; (80074a8 <DMA1_Stream5_IRQHandler+0x10>)
 800749e:	f000 fd07 	bl	8007eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000f8c 	.word	0x20000f8c

080074ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <DMA1_Stream6_IRQHandler+0x10>)
 80074b2:	f000 fcfd 	bl	8007eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20001078 	.word	0x20001078

080074c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80074c4:	2040      	movs	r0, #64	; 0x40
 80074c6:	f001 f945 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 0)
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	480c      	ldr	r0, [pc, #48]	; (8007500 <EXTI9_5_IRQHandler+0x40>)
 80074ce:	f001 f8f5 	bl	80086bc <HAL_GPIO_ReadPin>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <EXTI9_5_IRQHandler+0x24>
  {
	  pluse2--;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <EXTI9_5_IRQHandler+0x44>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3b01      	subs	r3, #1
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <EXTI9_5_IRQHandler+0x44>)
 80074e0:	6013      	str	r3, [r2, #0]
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
  {
	  pluse2++;
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80074e2:	e00b      	b.n	80074fc <EXTI9_5_IRQHandler+0x3c>
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
 80074e4:	2180      	movs	r1, #128	; 0x80
 80074e6:	4806      	ldr	r0, [pc, #24]	; (8007500 <EXTI9_5_IRQHandler+0x40>)
 80074e8:	f001 f8e8 	bl	80086bc <HAL_GPIO_ReadPin>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d104      	bne.n	80074fc <EXTI9_5_IRQHandler+0x3c>
	  pluse2++;
 80074f2:	4b04      	ldr	r3, [pc, #16]	; (8007504 <EXTI9_5_IRQHandler+0x44>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4a02      	ldr	r2, [pc, #8]	; (8007504 <EXTI9_5_IRQHandler+0x44>)
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40020800 	.word	0x40020800
 8007504:	20000ef8 	.word	0x20000ef8

08007508 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800750c:	4818      	ldr	r0, [pc, #96]	; (8007570 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 800750e:	f001 ff63 	bl	80093d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8007512:	4818      	ldr	r0, [pc, #96]	; (8007574 <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8007514:	f001 ff60 	bl	80093d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	PID_control_DC1(W1);
 8007518:	4b17      	ldr	r3, [pc, #92]	; (8007578 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 800751a:	ed93 7b00 	vldr	d7, [r3]
 800751e:	eeb0 0a47 	vmov.f32	s0, s14
 8007522:	eef0 0a67 	vmov.f32	s1, s15
 8007526:	f7ff fb53 	bl	8006bd0 <PID_control_DC1>
	PID_control_DC2(W2);
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <TIM1_BRK_TIM9_IRQHandler+0x74>)
 800752c:	ed93 7b00 	vldr	d7, [r3]
 8007530:	eeb0 0a47 	vmov.f32	s0, s14
 8007534:	eef0 0a67 	vmov.f32	s1, s15
 8007538:	f7ff fc3e 	bl	8006db8 <PID_control_DC2>
	PID_control_DC3(W3);
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <TIM1_BRK_TIM9_IRQHandler+0x78>)
 800753e:	ed93 7b00 	vldr	d7, [r3]
 8007542:	eeb0 0a47 	vmov.f32	s0, s14
 8007546:	eef0 0a67 	vmov.f32	s1, s15
 800754a:	f7ff fd29 	bl	8006fa0 <PID_control_DC3>
	PID_control_DC4(W4);
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <TIM1_BRK_TIM9_IRQHandler+0x7c>)
 8007550:	ed93 7b00 	vldr	d7, [r3]
 8007554:	eeb0 0a47 	vmov.f32	s0, s14
 8007558:	eef0 0a67 	vmov.f32	s1, s15
 800755c:	f7ff fe14 	bl	8007188 <PID_control_DC4>
	count++;
 8007560:	4b09      	ldr	r3, [pc, #36]	; (8007588 <TIM1_BRK_TIM9_IRQHandler+0x80>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	4a08      	ldr	r2, [pc, #32]	; (8007588 <TIM1_BRK_TIM9_IRQHandler+0x80>)
 8007568:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	200010d8 	.word	0x200010d8
 8007574:	20001120 	.word	0x20001120
 8007578:	20000258 	.word	0x20000258
 800757c:	20000260 	.word	0x20000260
 8007580:	20000268 	.word	0x20000268
 8007584:	20000270 	.word	0x20000270
 8007588:	20000ec8 	.word	0x20000ec8

0800758c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <USART2_IRQHandler+0x10>)
 8007592:	f002 ff03 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20001168 	.word	0x20001168

080075a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80075a4:	4802      	ldr	r0, [pc, #8]	; (80075b0 <USART3_IRQHandler+0x10>)
 80075a6:	f002 fef9 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001034 	.word	0x20001034

080075b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80075b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80075bc:	f001 f8ca 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80075c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80075c4:	f001 f8c6 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80075c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80075cc:	f001 f8c2 	bl	8008754 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80075d0:	bf00      	nop
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
	return 1;
 80075d8:	2301      	movs	r3, #1
}
 80075da:	4618      	mov	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <_kill>:

int _kill(int pid, int sig)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80075ee:	f003 ff5f 	bl	800b4b0 <__errno>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2216      	movs	r2, #22
 80075f6:	601a      	str	r2, [r3, #0]
	return -1;
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_exit>:

void _exit (int status)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800760c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ffe7 	bl	80075e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007616:	e7fe      	b.n	8007616 <_exit+0x12>

08007618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e00a      	b.n	8007640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800762a:	f3af 8000 	nop.w
 800762e:	4601      	mov	r1, r0
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	60ba      	str	r2, [r7, #8]
 8007636:	b2ca      	uxtb	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	3301      	adds	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	dbf0      	blt.n	800762a <_read+0x12>
	}

return len;
 8007648:	687b      	ldr	r3, [r7, #4]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e009      	b.n	8007678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	60ba      	str	r2, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	4618      	mov	r0, r3
 800766e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	3301      	adds	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	dbf1      	blt.n	8007664 <_write+0x12>
	}
	return len;
 8007680:	687b      	ldr	r3, [r7, #4]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <_close>:

int _close(int file)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
	return -1;
 8007692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076b2:	605a      	str	r2, [r3, #4]
	return 0;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <_isatty>:

int _isatty(int file)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
	return 1;
 80076ca:	2301      	movs	r3, #1
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
	return 0;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076fc:	4a14      	ldr	r2, [pc, #80]	; (8007750 <_sbrk+0x5c>)
 80076fe:	4b15      	ldr	r3, [pc, #84]	; (8007754 <_sbrk+0x60>)
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007708:	4b13      	ldr	r3, [pc, #76]	; (8007758 <_sbrk+0x64>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007710:	4b11      	ldr	r3, [pc, #68]	; (8007758 <_sbrk+0x64>)
 8007712:	4a12      	ldr	r2, [pc, #72]	; (800775c <_sbrk+0x68>)
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <_sbrk+0x64>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d207      	bcs.n	8007734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007724:	f003 fec4 	bl	800b4b0 <__errno>
 8007728:	4603      	mov	r3, r0
 800772a:	220c      	movs	r2, #12
 800772c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007732:	e009      	b.n	8007748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007734:	4b08      	ldr	r3, [pc, #32]	; (8007758 <_sbrk+0x64>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_sbrk+0x64>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	4a05      	ldr	r2, [pc, #20]	; (8007758 <_sbrk+0x64>)
 8007744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20020000 	.word	0x20020000
 8007754:	00000400 	.word	0x00000400
 8007758:	20000f80 	.word	0x20000f80
 800775c:	200011c0 	.word	0x200011c0

08007760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <SystemInit+0x20>)
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776a:	4a05      	ldr	r2, [pc, #20]	; (8007780 <SystemInit+0x20>)
 800776c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	e000ed00 	.word	0xe000ed00

08007784 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	0a5a      	lsrs	r2, r3, #9
 8007794:	490f      	ldr	r1, [pc, #60]	; (80077d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007796:	fba1 1202 	umull	r1, r2, r1, r2
 800779a:	09d2      	lsrs	r2, r2, #7
 800779c:	490e      	ldr	r1, [pc, #56]	; (80077d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800779e:	fb01 f202 	mul.w	r2, r1, r2
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	0a5b      	lsrs	r3, r3, #9
 80077ac:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	09db      	lsrs	r3, r3, #7
 80077b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	441a      	add	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	00044b83 	.word	0x00044b83
 80077d8:	3b9aca00 	.word	0x3b9aca00

080077dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80077dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80077e0:	480d      	ldr	r0, [pc, #52]	; (8007818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80077e2:	490e      	ldr	r1, [pc, #56]	; (800781c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80077e4:	4a0e      	ldr	r2, [pc, #56]	; (8007820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80077e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80077e8:	e002      	b.n	80077f0 <LoopCopyDataInit>

080077ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077ee:	3304      	adds	r3, #4

080077f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80077f4:	d3f9      	bcc.n	80077ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80077f6:	4a0b      	ldr	r2, [pc, #44]	; (8007824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80077f8:	4c0b      	ldr	r4, [pc, #44]	; (8007828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80077fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80077fc:	e001      	b.n	8007802 <LoopFillZerobss>

080077fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80077fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007800:	3204      	adds	r2, #4

08007802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007804:	d3fb      	bcc.n	80077fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007806:	f7ff ffab 	bl	8007760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800780a:	f003 fe57 	bl	800b4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800780e:	f7f9 fdc5 	bl	800139c <main>
  bx  lr    
 8007812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800781c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8007820:	08010794 	.word	0x08010794
  ldr r2, =_sbss
 8007824:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8007828:	200011c0 	.word	0x200011c0

0800782c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800782c:	e7fe      	b.n	800782c <ADC_IRQHandler>
	...

08007830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <HAL_Init+0x40>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a0d      	ldr	r2, [pc, #52]	; (8007870 <HAL_Init+0x40>)
 800783a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800783e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <HAL_Init+0x40>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <HAL_Init+0x40>)
 8007846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800784a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800784c:	4b08      	ldr	r3, [pc, #32]	; (8007870 <HAL_Init+0x40>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a07      	ldr	r2, [pc, #28]	; (8007870 <HAL_Init+0x40>)
 8007852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007858:	2003      	movs	r0, #3
 800785a:	f000 f94f 	bl	8007afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800785e:	2000      	movs	r0, #0
 8007860:	f000 f808 	bl	8007874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007864:	f7fe ffa6 	bl	80067b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40023c00 	.word	0x40023c00

08007874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800787c:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <HAL_InitTick+0x54>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <HAL_InitTick+0x58>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	4619      	mov	r1, r3
 8007886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800788a:	fbb3 f3f1 	udiv	r3, r3, r1
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f967 	bl	8007b66 <HAL_SYSTICK_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e00e      	b.n	80078c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d80a      	bhi.n	80078be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078a8:	2200      	movs	r2, #0
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b0:	f000 f92f 	bl	8007b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078b4:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <HAL_InitTick+0x5c>)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e000      	b.n	80078c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000050 	.word	0x20000050
 80078cc:	20000058 	.word	0x20000058
 80078d0:	20000054 	.word	0x20000054

080078d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <HAL_IncTick+0x20>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <HAL_IncTick+0x24>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4413      	add	r3, r2
 80078e4:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <HAL_IncTick+0x24>)
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000058 	.word	0x20000058
 80078f8:	200011ac 	.word	0x200011ac

080078fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007900:	4b03      	ldr	r3, [pc, #12]	; (8007910 <HAL_GetTick+0x14>)
 8007902:	681b      	ldr	r3, [r3, #0]
}
 8007904:	4618      	mov	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	200011ac 	.word	0x200011ac

08007914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800791c:	f7ff ffee 	bl	80078fc <HAL_GetTick>
 8007920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800792c:	d005      	beq.n	800793a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_Delay+0x44>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800793a:	bf00      	nop
 800793c:	f7ff ffde 	bl	80078fc <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	429a      	cmp	r2, r3
 800794a:	d8f7      	bhi.n	800793c <HAL_Delay+0x28>
  {
  }
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000058 	.word	0x20000058

0800795c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007978:	4013      	ands	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800798e:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	60d3      	str	r3, [r2, #12]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	e000ed00 	.word	0xe000ed00

080079a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <__NVIC_GetPriorityGrouping+0x18>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f003 0307 	and.w	r3, r3, #7
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db0b      	blt.n	80079ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	f003 021f 	and.w	r2, r3, #31
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <__NVIC_EnableIRQ+0x38>)
 80079da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2001      	movs	r0, #1
 80079e2:	fa00 f202 	lsl.w	r2, r0, r2
 80079e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	e000e100 	.word	0xe000e100

080079fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db0a      	blt.n	8007a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	490c      	ldr	r1, [pc, #48]	; (8007a48 <__NVIC_SetPriority+0x4c>)
 8007a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1a:	0112      	lsls	r2, r2, #4
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	440b      	add	r3, r1
 8007a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a24:	e00a      	b.n	8007a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4908      	ldr	r1, [pc, #32]	; (8007a4c <__NVIC_SetPriority+0x50>)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	3b04      	subs	r3, #4
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	440b      	add	r3, r1
 8007a3a:	761a      	strb	r2, [r3, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	e000e100 	.word	0xe000e100
 8007a4c:	e000ed00 	.word	0xe000ed00

08007a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f1c3 0307 	rsb	r3, r3, #7
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	bf28      	it	cs
 8007a6e:	2304      	movcs	r3, #4
 8007a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d902      	bls.n	8007a80 <NVIC_EncodePriority+0x30>
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3b03      	subs	r3, #3
 8007a7e:	e000      	b.n	8007a82 <NVIC_EncodePriority+0x32>
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43da      	mvns	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	401a      	ands	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	43d9      	mvns	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa8:	4313      	orrs	r3, r2
         );
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3724      	adds	r7, #36	; 0x24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ac8:	d301      	bcc.n	8007ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007aca:	2301      	movs	r3, #1
 8007acc:	e00f      	b.n	8007aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ace:	4a0a      	ldr	r2, [pc, #40]	; (8007af8 <SysTick_Config+0x40>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ad6:	210f      	movs	r1, #15
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007adc:	f7ff ff8e 	bl	80079fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <SysTick_Config+0x40>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <SysTick_Config+0x40>)
 8007ae8:	2207      	movs	r2, #7
 8007aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	e000e010 	.word	0xe000e010

08007afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff29 	bl	800795c <__NVIC_SetPriorityGrouping>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	4603      	mov	r3, r0
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b24:	f7ff ff3e 	bl	80079a4 <__NVIC_GetPriorityGrouping>
 8007b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7ff ff8e 	bl	8007a50 <NVIC_EncodePriority>
 8007b34:	4602      	mov	r2, r0
 8007b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff ff5d 	bl	80079fc <__NVIC_SetPriority>
}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	4603      	mov	r3, r0
 8007b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff ff31 	bl	80079c0 <__NVIC_EnableIRQ>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff ffa2 	bl	8007ab8 <SysTick_Config>
 8007b74:	4603      	mov	r3, r0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b8c:	f7ff feb6 	bl	80078fc <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e099      	b.n	8007cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bbc:	e00f      	b.n	8007bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bbe:	f7ff fe9d 	bl	80078fc <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d908      	bls.n	8007bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e078      	b.n	8007cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e8      	bne.n	8007bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4b38      	ldr	r3, [pc, #224]	; (8007cd8 <HAL_DMA_Init+0x158>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d107      	bne.n	8007c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	4313      	orrs	r3, r2
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d117      	bne.n	8007ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00e      	beq.n	8007ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb01 	bl	800828c <DMA_CheckFifoParam>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2240      	movs	r2, #64	; 0x40
 8007c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e016      	b.n	8007cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fab8 	bl	8008220 <DMA_CalcBaseAndBitshift>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb8:	223f      	movs	r2, #63	; 0x3f
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	f010803f 	.word	0xf010803f

08007cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_DMA_Start_IT+0x26>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e040      	b.n	8007d84 <HAL_DMA_Start_IT+0xa8>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d12f      	bne.n	8007d76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fa4a 	bl	80081c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	223f      	movs	r2, #63	; 0x3f
 8007d36:	409a      	lsls	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0216 	orr.w	r2, r2, #22
 8007d4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e005      	b.n	8007d82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d9a:	f7ff fdaf 	bl	80078fc <HAL_GetTick>
 8007d9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d008      	beq.n	8007dbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2280      	movs	r2, #128	; 0x80
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e052      	b.n	8007e64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0216 	bic.w	r2, r2, #22
 8007dcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695a      	ldr	r2, [r3, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ddc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <HAL_DMA_Abort+0x62>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0208 	bic.w	r2, r2, #8
 8007dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e0e:	e013      	b.n	8007e38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e10:	f7ff fd74 	bl	80078fc <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d90c      	bls.n	8007e38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2203      	movs	r2, #3
 8007e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e015      	b.n	8007e64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e4      	bne.n	8007e10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4a:	223f      	movs	r2, #63	; 0x3f
 8007e4c:	409a      	lsls	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d004      	beq.n	8007e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e00c      	b.n	8007ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2205      	movs	r2, #5
 8007e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ebc:	4b92      	ldr	r3, [pc, #584]	; (8008108 <HAL_DMA_IRQHandler+0x258>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a92      	ldr	r2, [pc, #584]	; (800810c <HAL_DMA_IRQHandler+0x25c>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	0a9b      	lsrs	r3, r3, #10
 8007ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	2208      	movs	r2, #8
 8007edc:	409a      	lsls	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01a      	beq.n	8007f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d013      	beq.n	8007f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0204 	bic.w	r2, r2, #4
 8007f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	2208      	movs	r2, #8
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	f043 0201 	orr.w	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	2201      	movs	r2, #1
 8007f22:	409a      	lsls	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d012      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3e:	2201      	movs	r2, #1
 8007f40:	409a      	lsls	r2, r3
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f043 0202 	orr.w	r2, r3, #2
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f56:	2204      	movs	r2, #4
 8007f58:	409a      	lsls	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d012      	beq.n	8007f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f74:	2204      	movs	r2, #4
 8007f76:	409a      	lsls	r2, r3
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f80:	f043 0204 	orr.w	r2, r3, #4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	409a      	lsls	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d043      	beq.n	8008020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03c      	beq.n	8008020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007faa:	2210      	movs	r2, #16
 8007fac:	409a      	lsls	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d018      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d108      	bne.n	8007fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d024      	beq.n	8008020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
 8007fde:	e01f      	b.n	8008020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01b      	beq.n	8008020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
 8007ff0:	e016      	b.n	8008020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0208 	bic.w	r2, r2, #8
 800800e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008024:	2220      	movs	r2, #32
 8008026:	409a      	lsls	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 808e 	beq.w	800814e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8086 	beq.w	800814e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008046:	2220      	movs	r2, #32
 8008048:	409a      	lsls	r2, r3
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b05      	cmp	r3, #5
 8008058:	d136      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0216 	bic.w	r2, r2, #22
 8008068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695a      	ldr	r2, [r3, #20]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <HAL_DMA_IRQHandler+0x1da>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0208 	bic.w	r2, r2, #8
 8008098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809e:	223f      	movs	r2, #63	; 0x3f
 80080a0:	409a      	lsls	r2, r3
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d07d      	beq.n	80081ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
        }
        return;
 80080c6:	e078      	b.n	80081ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01c      	beq.n	8008110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d030      	beq.n	800814e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	e02b      	b.n	800814e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d027      	beq.n	800814e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
 8008106:	e022      	b.n	800814e <HAL_DMA_IRQHandler+0x29e>
 8008108:	20000050 	.word	0x20000050
 800810c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10f      	bne.n	800813e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0210 	bic.w	r2, r2, #16
 800812c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	2b00      	cmp	r3, #0
 8008154:	d032      	beq.n	80081bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d022      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2205      	movs	r2, #5
 8008166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3301      	adds	r3, #1
 800817e:	60bb      	str	r3, [r7, #8]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	429a      	cmp	r2, r3
 8008184:	d307      	bcc.n	8008196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f2      	bne.n	800817a <HAL_DMA_IRQHandler+0x2ca>
 8008194:	e000      	b.n	8008198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008196:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
 80081b8:	e000      	b.n	80081bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80081ba:	bf00      	nop
    }
  }
}
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop

080081c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d108      	bne.n	8008204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008202:	e007      	b.n	8008214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	3b10      	subs	r3, #16
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <DMA_CalcBaseAndBitshift+0x64>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	091b      	lsrs	r3, r3, #4
 8008238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800823a:	4a13      	ldr	r2, [pc, #76]	; (8008288 <DMA_CalcBaseAndBitshift+0x68>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d909      	bls.n	8008262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	659a      	str	r2, [r3, #88]	; 0x58
 8008260:	e007      	b.n	8008272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	aaaaaaab 	.word	0xaaaaaaab
 8008288:	08010268 	.word	0x08010268

0800828c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11f      	bne.n	80082e6 <DMA_CheckFifoParam+0x5a>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d856      	bhi.n	800835a <DMA_CheckFifoParam+0xce>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <DMA_CheckFifoParam+0x28>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082d7 	.word	0x080082d7
 80082bc:	080082c5 	.word	0x080082c5
 80082c0:	0800835b 	.word	0x0800835b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d046      	beq.n	800835e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082d4:	e043      	b.n	800835e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082de:	d140      	bne.n	8008362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082e4:	e03d      	b.n	8008362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ee:	d121      	bne.n	8008334 <DMA_CheckFifoParam+0xa8>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d837      	bhi.n	8008366 <DMA_CheckFifoParam+0xda>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <DMA_CheckFifoParam+0x70>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	08008313 	.word	0x08008313
 8008304:	0800830d 	.word	0x0800830d
 8008308:	08008325 	.word	0x08008325
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e030      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d025      	beq.n	800836a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008322:	e022      	b.n	800836a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800832c:	d11f      	bne.n	800836e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008332:	e01c      	b.n	800836e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d903      	bls.n	8008342 <DMA_CheckFifoParam+0xb6>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b03      	cmp	r3, #3
 800833e:	d003      	beq.n	8008348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008340:	e018      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
      break;
 8008346:	e015      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	e00b      	b.n	8008372 <DMA_CheckFifoParam+0xe6>
      break;
 800835a:	bf00      	nop
 800835c:	e00a      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;
 800835e:	bf00      	nop
 8008360:	e008      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;
 8008362:	bf00      	nop
 8008364:	e006      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;
 8008366:	bf00      	nop
 8008368:	e004      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;   
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <DMA_CheckFifoParam+0xe8>
      break;
 8008372:	bf00      	nop
    }
  } 
  
  return status; 
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop

08008384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008384:	b480      	push	{r7}
 8008386:	b089      	sub	sp, #36	; 0x24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e16b      	b.n	8008678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083a0:	2201      	movs	r2, #1
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4013      	ands	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	f040 815a 	bne.w	8008672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d005      	beq.n	80083d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d130      	bne.n	8008438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	2203      	movs	r2, #3
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4013      	ands	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800840c:	2201      	movs	r2, #1
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	43db      	mvns	r3, r3
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4013      	ands	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	091b      	lsrs	r3, r3, #4
 8008422:	f003 0201 	and.w	r2, r3, #1
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b03      	cmp	r3, #3
 8008442:	d017      	beq.n	8008474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	2203      	movs	r2, #3
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	43db      	mvns	r3, r3
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	4013      	ands	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	fa02 f303 	lsl.w	r3, r2, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4313      	orrs	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d123      	bne.n	80084c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	08da      	lsrs	r2, r3, #3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3208      	adds	r2, #8
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	220f      	movs	r2, #15
 8008498:	fa02 f303 	lsl.w	r3, r2, r3
 800849c:	43db      	mvns	r3, r3
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	4013      	ands	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	fa02 f303 	lsl.w	r3, r2, r3
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	08da      	lsrs	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3208      	adds	r2, #8
 80084c2:	69b9      	ldr	r1, [r7, #24]
 80084c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	2203      	movs	r2, #3
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 0203 	and.w	r2, r3, #3
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80b4 	beq.w	8008672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	4b60      	ldr	r3, [pc, #384]	; (8008690 <HAL_GPIO_Init+0x30c>)
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	4a5f      	ldr	r2, [pc, #380]	; (8008690 <HAL_GPIO_Init+0x30c>)
 8008514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008518:	6453      	str	r3, [r2, #68]	; 0x44
 800851a:	4b5d      	ldr	r3, [pc, #372]	; (8008690 <HAL_GPIO_Init+0x30c>)
 800851c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008526:	4a5b      	ldr	r2, [pc, #364]	; (8008694 <HAL_GPIO_Init+0x310>)
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	089b      	lsrs	r3, r3, #2
 800852c:	3302      	adds	r3, #2
 800852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	220f      	movs	r2, #15
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	43db      	mvns	r3, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4013      	ands	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a52      	ldr	r2, [pc, #328]	; (8008698 <HAL_GPIO_Init+0x314>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d02b      	beq.n	80085aa <HAL_GPIO_Init+0x226>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a51      	ldr	r2, [pc, #324]	; (800869c <HAL_GPIO_Init+0x318>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d025      	beq.n	80085a6 <HAL_GPIO_Init+0x222>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a50      	ldr	r2, [pc, #320]	; (80086a0 <HAL_GPIO_Init+0x31c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01f      	beq.n	80085a2 <HAL_GPIO_Init+0x21e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a4f      	ldr	r2, [pc, #316]	; (80086a4 <HAL_GPIO_Init+0x320>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d019      	beq.n	800859e <HAL_GPIO_Init+0x21a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a4e      	ldr	r2, [pc, #312]	; (80086a8 <HAL_GPIO_Init+0x324>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <HAL_GPIO_Init+0x216>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a4d      	ldr	r2, [pc, #308]	; (80086ac <HAL_GPIO_Init+0x328>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00d      	beq.n	8008596 <HAL_GPIO_Init+0x212>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a4c      	ldr	r2, [pc, #304]	; (80086b0 <HAL_GPIO_Init+0x32c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <HAL_GPIO_Init+0x20e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a4b      	ldr	r2, [pc, #300]	; (80086b4 <HAL_GPIO_Init+0x330>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d101      	bne.n	800858e <HAL_GPIO_Init+0x20a>
 800858a:	2307      	movs	r3, #7
 800858c:	e00e      	b.n	80085ac <HAL_GPIO_Init+0x228>
 800858e:	2308      	movs	r3, #8
 8008590:	e00c      	b.n	80085ac <HAL_GPIO_Init+0x228>
 8008592:	2306      	movs	r3, #6
 8008594:	e00a      	b.n	80085ac <HAL_GPIO_Init+0x228>
 8008596:	2305      	movs	r3, #5
 8008598:	e008      	b.n	80085ac <HAL_GPIO_Init+0x228>
 800859a:	2304      	movs	r3, #4
 800859c:	e006      	b.n	80085ac <HAL_GPIO_Init+0x228>
 800859e:	2303      	movs	r3, #3
 80085a0:	e004      	b.n	80085ac <HAL_GPIO_Init+0x228>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e002      	b.n	80085ac <HAL_GPIO_Init+0x228>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <HAL_GPIO_Init+0x228>
 80085aa:	2300      	movs	r3, #0
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	f002 0203 	and.w	r2, r2, #3
 80085b2:	0092      	lsls	r2, r2, #2
 80085b4:	4093      	lsls	r3, r2
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085bc:	4935      	ldr	r1, [pc, #212]	; (8008694 <HAL_GPIO_Init+0x310>)
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	089b      	lsrs	r3, r3, #2
 80085c2:	3302      	adds	r3, #2
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085ca:	4b3b      	ldr	r3, [pc, #236]	; (80086b8 <HAL_GPIO_Init+0x334>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085ee:	4a32      	ldr	r2, [pc, #200]	; (80086b8 <HAL_GPIO_Init+0x334>)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80085f4:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <HAL_GPIO_Init+0x334>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008618:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <HAL_GPIO_Init+0x334>)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800861e:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <HAL_GPIO_Init+0x334>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	43db      	mvns	r3, r3
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	4013      	ands	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008642:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <HAL_GPIO_Init+0x334>)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008648:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <HAL_GPIO_Init+0x334>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	43db      	mvns	r3, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4013      	ands	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800866c:	4a12      	ldr	r2, [pc, #72]	; (80086b8 <HAL_GPIO_Init+0x334>)
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	2b0f      	cmp	r3, #15
 800867c:	f67f ae90 	bls.w	80083a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	3724      	adds	r7, #36	; 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800
 8008694:	40013800 	.word	0x40013800
 8008698:	40020000 	.word	0x40020000
 800869c:	40020400 	.word	0x40020400
 80086a0:	40020800 	.word	0x40020800
 80086a4:	40020c00 	.word	0x40020c00
 80086a8:	40021000 	.word	0x40021000
 80086ac:	40021400 	.word	0x40021400
 80086b0:	40021800 	.word	0x40021800
 80086b4:	40021c00 	.word	0x40021c00
 80086b8:	40013c00 	.word	0x40013c00

080086bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e001      	b.n	80086de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]
 80086f8:	4613      	mov	r3, r2
 80086fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086fc:	787b      	ldrb	r3, [r7, #1]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008702:	887a      	ldrh	r2, [r7, #2]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008708:	e003      	b.n	8008712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800870a:	887b      	ldrh	r3, [r7, #2]
 800870c:	041a      	lsls	r2, r3, #16
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	619a      	str	r2, [r3, #24]
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008730:	887a      	ldrh	r2, [r7, #2]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4013      	ands	r3, r2
 8008736:	041a      	lsls	r2, r3, #16
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	43d9      	mvns	r1, r3
 800873c:	887b      	ldrh	r3, [r7, #2]
 800873e:	400b      	ands	r3, r1
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	619a      	str	r2, [r3, #24]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	4013      	ands	r3, r2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800876a:	4a05      	ldr	r2, [pc, #20]	; (8008780 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd f9aa 	bl	8005acc <HAL_GPIO_EXTI_Callback>
  }
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	40013c00 	.word	0x40013c00

08008784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e264      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d075      	beq.n	800888e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087a2:	4ba3      	ldr	r3, [pc, #652]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 030c 	and.w	r3, r3, #12
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d00c      	beq.n	80087c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ae:	4ba0      	ldr	r3, [pc, #640]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d112      	bne.n	80087e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ba:	4b9d      	ldr	r3, [pc, #628]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087c6:	d10b      	bne.n	80087e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c8:	4b99      	ldr	r3, [pc, #612]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d05b      	beq.n	800888c <HAL_RCC_OscConfig+0x108>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d157      	bne.n	800888c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e23f      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e8:	d106      	bne.n	80087f8 <HAL_RCC_OscConfig+0x74>
 80087ea:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a90      	ldr	r2, [pc, #576]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80087f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	e01d      	b.n	8008834 <HAL_RCC_OscConfig+0xb0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008800:	d10c      	bne.n	800881c <HAL_RCC_OscConfig+0x98>
 8008802:	4b8b      	ldr	r3, [pc, #556]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a8a      	ldr	r2, [pc, #552]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4b88      	ldr	r3, [pc, #544]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a87      	ldr	r2, [pc, #540]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e00b      	b.n	8008834 <HAL_RCC_OscConfig+0xb0>
 800881c:	4b84      	ldr	r3, [pc, #528]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a83      	ldr	r2, [pc, #524]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	4b81      	ldr	r3, [pc, #516]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a80      	ldr	r2, [pc, #512]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 800882e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d013      	beq.n	8008864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800883c:	f7ff f85e 	bl	80078fc <HAL_GetTick>
 8008840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008844:	f7ff f85a 	bl	80078fc <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b64      	cmp	r3, #100	; 0x64
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e204      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008856:	4b76      	ldr	r3, [pc, #472]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0f0      	beq.n	8008844 <HAL_RCC_OscConfig+0xc0>
 8008862:	e014      	b.n	800888e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008864:	f7ff f84a 	bl	80078fc <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800886c:	f7ff f846 	bl	80078fc <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b64      	cmp	r3, #100	; 0x64
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e1f0      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800887e:	4b6c      	ldr	r3, [pc, #432]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <HAL_RCC_OscConfig+0xe8>
 800888a:	e000      	b.n	800888e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d063      	beq.n	8008962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800889a:	4b65      	ldr	r3, [pc, #404]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 030c 	and.w	r3, r3, #12
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088a6:	4b62      	ldr	r3, [pc, #392]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d11c      	bne.n	80088ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088b2:	4b5f      	ldr	r3, [pc, #380]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d116      	bne.n	80088ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088be:	4b5c      	ldr	r3, [pc, #368]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_RCC_OscConfig+0x152>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d001      	beq.n	80088d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e1c4      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d6:	4b56      	ldr	r3, [pc, #344]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4952      	ldr	r1, [pc, #328]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ea:	e03a      	b.n	8008962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d020      	beq.n	8008936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088f4:	4b4f      	ldr	r3, [pc, #316]	; (8008a34 <HAL_RCC_OscConfig+0x2b0>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fe ffff 	bl	80078fc <HAL_GetTick>
 80088fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008902:	f7fe fffb 	bl	80078fc <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e1a5      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008914:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f0      	beq.n	8008902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008920:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4940      	ldr	r1, [pc, #256]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008930:	4313      	orrs	r3, r2
 8008932:	600b      	str	r3, [r1, #0]
 8008934:	e015      	b.n	8008962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008936:	4b3f      	ldr	r3, [pc, #252]	; (8008a34 <HAL_RCC_OscConfig+0x2b0>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893c:	f7fe ffde 	bl	80078fc <HAL_GetTick>
 8008940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008944:	f7fe ffda 	bl	80078fc <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e184      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008956:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f0      	bne.n	8008944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d030      	beq.n	80089d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d016      	beq.n	80089a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008976:	4b30      	ldr	r3, [pc, #192]	; (8008a38 <HAL_RCC_OscConfig+0x2b4>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897c:	f7fe ffbe 	bl	80078fc <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008984:	f7fe ffba 	bl	80078fc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e164      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008996:	4b26      	ldr	r3, [pc, #152]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0x200>
 80089a2:	e015      	b.n	80089d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <HAL_RCC_OscConfig+0x2b4>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089aa:	f7fe ffa7 	bl	80078fc <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089b0:	e008      	b.n	80089c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089b2:	f7fe ffa3 	bl	80078fc <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e14d      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089c4:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80089c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1f0      	bne.n	80089b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80a0 	beq.w	8008b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089de:	2300      	movs	r3, #0
 80089e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10f      	bne.n	8008a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ee:	2300      	movs	r3, #0
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6413      	str	r3, [r2, #64]	; 0x40
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <HAL_RCC_OscConfig+0x2ac>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_OscConfig+0x2b8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d121      	bne.n	8008a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a1a:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <HAL_RCC_OscConfig+0x2b8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a07      	ldr	r2, [pc, #28]	; (8008a3c <HAL_RCC_OscConfig+0x2b8>)
 8008a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a26:	f7fe ff69 	bl	80078fc <HAL_GetTick>
 8008a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a2c:	e011      	b.n	8008a52 <HAL_RCC_OscConfig+0x2ce>
 8008a2e:	bf00      	nop
 8008a30:	40023800 	.word	0x40023800
 8008a34:	42470000 	.word	0x42470000
 8008a38:	42470e80 	.word	0x42470e80
 8008a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a40:	f7fe ff5c 	bl	80078fc <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e106      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a52:	4b85      	ldr	r3, [pc, #532]	; (8008c68 <HAL_RCC_OscConfig+0x4e4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f0      	beq.n	8008a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d106      	bne.n	8008a74 <HAL_RCC_OscConfig+0x2f0>
 8008a66:	4b81      	ldr	r3, [pc, #516]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	4a80      	ldr	r2, [pc, #512]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	6713      	str	r3, [r2, #112]	; 0x70
 8008a72:	e01c      	b.n	8008aae <HAL_RCC_OscConfig+0x32a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d10c      	bne.n	8008a96 <HAL_RCC_OscConfig+0x312>
 8008a7c:	4b7b      	ldr	r3, [pc, #492]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a80:	4a7a      	ldr	r2, [pc, #488]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a82:	f043 0304 	orr.w	r3, r3, #4
 8008a86:	6713      	str	r3, [r2, #112]	; 0x70
 8008a88:	4b78      	ldr	r3, [pc, #480]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8c:	4a77      	ldr	r2, [pc, #476]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	6713      	str	r3, [r2, #112]	; 0x70
 8008a94:	e00b      	b.n	8008aae <HAL_RCC_OscConfig+0x32a>
 8008a96:	4b75      	ldr	r3, [pc, #468]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	4a74      	ldr	r2, [pc, #464]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa2:	4b72      	ldr	r3, [pc, #456]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	4a71      	ldr	r2, [pc, #452]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008aa8:	f023 0304 	bic.w	r3, r3, #4
 8008aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d015      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab6:	f7fe ff21 	bl	80078fc <HAL_GetTick>
 8008aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008abc:	e00a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008abe:	f7fe ff1d 	bl	80078fc <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e0c5      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ad4:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0ee      	beq.n	8008abe <HAL_RCC_OscConfig+0x33a>
 8008ae0:	e014      	b.n	8008b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ae2:	f7fe ff0b 	bl	80078fc <HAL_GetTick>
 8008ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ae8:	e00a      	b.n	8008b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aea:	f7fe ff07 	bl	80078fc <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e0af      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b00:	4b5a      	ldr	r3, [pc, #360]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1ee      	bne.n	8008aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d105      	bne.n	8008b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b12:	4b56      	ldr	r3, [pc, #344]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	4a55      	ldr	r2, [pc, #340]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 809b 	beq.w	8008c5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b28:	4b50      	ldr	r3, [pc, #320]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 030c 	and.w	r3, r3, #12
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d05c      	beq.n	8008bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d141      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b3c:	4b4c      	ldr	r3, [pc, #304]	; (8008c70 <HAL_RCC_OscConfig+0x4ec>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b42:	f7fe fedb 	bl	80078fc <HAL_GetTick>
 8008b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b48:	e008      	b.n	8008b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b4a:	f7fe fed7 	bl	80078fc <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e081      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5c:	4b43      	ldr	r3, [pc, #268]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1f0      	bne.n	8008b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69da      	ldr	r2, [r3, #28]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	019b      	lsls	r3, r3, #6
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	3b01      	subs	r3, #1
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	061b      	lsls	r3, r3, #24
 8008b8c:	4937      	ldr	r1, [pc, #220]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b92:	4b37      	ldr	r3, [pc, #220]	; (8008c70 <HAL_RCC_OscConfig+0x4ec>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b98:	f7fe feb0 	bl	80078fc <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ba0:	f7fe feac 	bl	80078fc <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e056      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb2:	4b2e      	ldr	r3, [pc, #184]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x41c>
 8008bbe:	e04e      	b.n	8008c5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc0:	4b2b      	ldr	r3, [pc, #172]	; (8008c70 <HAL_RCC_OscConfig+0x4ec>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc6:	f7fe fe99 	bl	80078fc <HAL_GetTick>
 8008bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bcc:	e008      	b.n	8008be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bce:	f7fe fe95 	bl	80078fc <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d901      	bls.n	8008be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e03f      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be0:	4b22      	ldr	r3, [pc, #136]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1f0      	bne.n	8008bce <HAL_RCC_OscConfig+0x44a>
 8008bec:	e037      	b.n	8008c5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e032      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <HAL_RCC_OscConfig+0x4e8>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d028      	beq.n	8008c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d121      	bne.n	8008c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d11a      	bne.n	8008c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d111      	bne.n	8008c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	3b01      	subs	r3, #1
 8008c44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d107      	bne.n	8008c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d001      	beq.n	8008c5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40007000 	.word	0x40007000
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	42470060 	.word	0x42470060

08008c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0cc      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c88:	4b68      	ldr	r3, [pc, #416]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d90c      	bls.n	8008cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c96:	4b65      	ldr	r3, [pc, #404]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c9e:	4b63      	ldr	r3, [pc, #396]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d001      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0b8      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d020      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cc8:	4b59      	ldr	r3, [pc, #356]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	4a58      	ldr	r2, [pc, #352]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ce0:	4b53      	ldr	r3, [pc, #332]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	4a52      	ldr	r2, [pc, #328]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cec:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	494d      	ldr	r1, [pc, #308]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d044      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d107      	bne.n	8008d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d12:	4b47      	ldr	r3, [pc, #284]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d119      	bne.n	8008d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e07f      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d003      	beq.n	8008d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d107      	bne.n	8008d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d32:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e06f      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d42:	4b3b      	ldr	r3, [pc, #236]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e067      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d52:	4b37      	ldr	r3, [pc, #220]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f023 0203 	bic.w	r2, r3, #3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	4934      	ldr	r1, [pc, #208]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d64:	f7fe fdca 	bl	80078fc <HAL_GetTick>
 8008d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d6a:	e00a      	b.n	8008d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6c:	f7fe fdc6 	bl	80078fc <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e04f      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d82:	4b2b      	ldr	r3, [pc, #172]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f003 020c 	and.w	r2, r3, #12
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d1eb      	bne.n	8008d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d94:	4b25      	ldr	r3, [pc, #148]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d20c      	bcs.n	8008dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da2:	4b22      	ldr	r3, [pc, #136]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008daa:	4b20      	ldr	r3, [pc, #128]	; (8008e2c <HAL_RCC_ClockConfig+0x1b8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d001      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e032      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d008      	beq.n	8008dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	4916      	ldr	r1, [pc, #88]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	490e      	ldr	r1, [pc, #56]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008dfa:	f000 f821 	bl	8008e40 <HAL_RCC_GetSysClockFreq>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCC_ClockConfig+0x1bc>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	490a      	ldr	r1, [pc, #40]	; (8008e34 <HAL_RCC_ClockConfig+0x1c0>)
 8008e0c:	5ccb      	ldrb	r3, [r1, r3]
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <HAL_RCC_ClockConfig+0x1c4>)
 8008e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_RCC_ClockConfig+0x1c8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fd2a 	bl	8007874 <HAL_InitTick>

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	40023c00 	.word	0x40023c00
 8008e30:	40023800 	.word	0x40023800
 8008e34:	08010250 	.word	0x08010250
 8008e38:	20000050 	.word	0x20000050
 8008e3c:	20000054 	.word	0x20000054

08008e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e40:	b5b0      	push	{r4, r5, r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e46:	2100      	movs	r1, #0
 8008e48:	6079      	str	r1, [r7, #4]
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	60f9      	str	r1, [r7, #12]
 8008e4e:	2100      	movs	r1, #0
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008e52:	2100      	movs	r1, #0
 8008e54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e56:	4952      	ldr	r1, [pc, #328]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e58:	6889      	ldr	r1, [r1, #8]
 8008e5a:	f001 010c 	and.w	r1, r1, #12
 8008e5e:	2908      	cmp	r1, #8
 8008e60:	d00d      	beq.n	8008e7e <HAL_RCC_GetSysClockFreq+0x3e>
 8008e62:	2908      	cmp	r1, #8
 8008e64:	f200 8094 	bhi.w	8008f90 <HAL_RCC_GetSysClockFreq+0x150>
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d002      	beq.n	8008e72 <HAL_RCC_GetSysClockFreq+0x32>
 8008e6c:	2904      	cmp	r1, #4
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x38>
 8008e70:	e08e      	b.n	8008f90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e72:	4b4c      	ldr	r3, [pc, #304]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008e74:	60bb      	str	r3, [r7, #8]
       break;
 8008e76:	e08e      	b.n	8008f96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e78:	4b4b      	ldr	r3, [pc, #300]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008e7a:	60bb      	str	r3, [r7, #8]
      break;
 8008e7c:	e08b      	b.n	8008f96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e7e:	4948      	ldr	r1, [pc, #288]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e80:	6849      	ldr	r1, [r1, #4]
 8008e82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008e86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e88:	4945      	ldr	r1, [pc, #276]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e8a:	6849      	ldr	r1, [r1, #4]
 8008e8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008e90:	2900      	cmp	r1, #0
 8008e92:	d024      	beq.n	8008ede <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e94:	4942      	ldr	r1, [pc, #264]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e96:	6849      	ldr	r1, [r1, #4]
 8008e98:	0989      	lsrs	r1, r1, #6
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	f04f 0100 	mov.w	r1, #0
 8008ea0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008ea4:	f04f 0500 	mov.w	r5, #0
 8008ea8:	ea00 0204 	and.w	r2, r0, r4
 8008eac:	ea01 0305 	and.w	r3, r1, r5
 8008eb0:	493d      	ldr	r1, [pc, #244]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008eb2:	fb01 f003 	mul.w	r0, r1, r3
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	fb01 f102 	mul.w	r1, r1, r2
 8008ebc:	1844      	adds	r4, r0, r1
 8008ebe:	493a      	ldr	r1, [pc, #232]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ec0:	fba2 0101 	umull	r0, r1, r2, r1
 8008ec4:	1863      	adds	r3, r4, r1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	f7f7 feda 	bl	8000c88 <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4613      	mov	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e04a      	b.n	8008f74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	099b      	lsrs	r3, r3, #6
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008eee:	f04f 0100 	mov.w	r1, #0
 8008ef2:	ea02 0400 	and.w	r4, r2, r0
 8008ef6:	ea03 0501 	and.w	r5, r3, r1
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f04f 0200 	mov.w	r2, #0
 8008f02:	f04f 0300 	mov.w	r3, #0
 8008f06:	014b      	lsls	r3, r1, #5
 8008f08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f0c:	0142      	lsls	r2, r0, #5
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	1b00      	subs	r0, r0, r4
 8008f14:	eb61 0105 	sbc.w	r1, r1, r5
 8008f18:	f04f 0200 	mov.w	r2, #0
 8008f1c:	f04f 0300 	mov.w	r3, #0
 8008f20:	018b      	lsls	r3, r1, #6
 8008f22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f26:	0182      	lsls	r2, r0, #6
 8008f28:	1a12      	subs	r2, r2, r0
 8008f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f2e:	f04f 0000 	mov.w	r0, #0
 8008f32:	f04f 0100 	mov.w	r1, #0
 8008f36:	00d9      	lsls	r1, r3, #3
 8008f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f3c:	00d0      	lsls	r0, r2, #3
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	1912      	adds	r2, r2, r4
 8008f44:	eb45 0303 	adc.w	r3, r5, r3
 8008f48:	f04f 0000 	mov.w	r0, #0
 8008f4c:	f04f 0100 	mov.w	r1, #0
 8008f50:	0299      	lsls	r1, r3, #10
 8008f52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008f56:	0290      	lsls	r0, r2, #10
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	f7f7 fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4613      	mov	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	3301      	adds	r3, #1
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8c:	60bb      	str	r3, [r7, #8]
      break;
 8008f8e:	e002      	b.n	8008f96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f90:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008f92:	60bb      	str	r3, [r7, #8]
      break;
 8008f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f96:	68bb      	ldr	r3, [r7, #8]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	00f42400 	.word	0x00f42400
 8008fa8:	017d7840 	.word	0x017d7840

08008fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000050 	.word	0x20000050

08008fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008fc8:	f7ff fff0 	bl	8008fac <HAL_RCC_GetHCLKFreq>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	0a9b      	lsrs	r3, r3, #10
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	4903      	ldr	r1, [pc, #12]	; (8008fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fda:	5ccb      	ldrb	r3, [r1, r3]
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	40023800 	.word	0x40023800
 8008fe8:	08010260 	.word	0x08010260

08008fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ff0:	f7ff ffdc 	bl	8008fac <HAL_RCC_GetHCLKFreq>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	0b5b      	lsrs	r3, r3, #13
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	4903      	ldr	r1, [pc, #12]	; (8009010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009002:	5ccb      	ldrb	r3, [r1, r3]
 8009004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009008:	4618      	mov	r0, r3
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40023800 	.word	0x40023800
 8009010:	08010260 	.word	0x08010260

08009014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e041      	b.n	80090aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fd fbe2 	bl	8006804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f000 fc84 	bl	8009960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d001      	beq.n	80090cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e04e      	b.n	800916a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a23      	ldr	r2, [pc, #140]	; (8009178 <HAL_TIM_Base_Start_IT+0xc4>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d022      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f6:	d01d      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1f      	ldr	r2, [pc, #124]	; (800917c <HAL_TIM_Base_Start_IT+0xc8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d018      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <HAL_TIM_Base_Start_IT+0xcc>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d013      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <HAL_TIM_Base_Start_IT+0xd0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d00e      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a1b      	ldr	r2, [pc, #108]	; (8009188 <HAL_TIM_Base_Start_IT+0xd4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d009      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <HAL_TIM_Base_Start_IT+0xd8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d004      	beq.n	8009134 <HAL_TIM_Base_Start_IT+0x80>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a18      	ldr	r2, [pc, #96]	; (8009190 <HAL_TIM_Base_Start_IT+0xdc>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d111      	bne.n	8009158 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b06      	cmp	r3, #6
 8009144:	d010      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0201 	orr.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	e007      	b.n	8009168 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40000c00 	.word	0x40000c00
 8009188:	40010400 	.word	0x40010400
 800918c:	40014000 	.word	0x40014000
 8009190:	40001800 	.word	0x40001800

08009194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e041      	b.n	800922a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f839 	bl	8009232 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 fbc4 	bl	8009960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <HAL_TIM_PWM_Start+0x24>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b01      	cmp	r3, #1
 8009262:	bf14      	ite	ne
 8009264:	2301      	movne	r3, #1
 8009266:	2300      	moveq	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	e022      	b.n	80092b2 <HAL_TIM_PWM_Start+0x6a>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d109      	bne.n	8009286 <HAL_TIM_PWM_Start+0x3e>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b01      	cmp	r3, #1
 800927c:	bf14      	ite	ne
 800927e:	2301      	movne	r3, #1
 8009280:	2300      	moveq	r3, #0
 8009282:	b2db      	uxtb	r3, r3
 8009284:	e015      	b.n	80092b2 <HAL_TIM_PWM_Start+0x6a>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b08      	cmp	r3, #8
 800928a:	d109      	bne.n	80092a0 <HAL_TIM_PWM_Start+0x58>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b01      	cmp	r3, #1
 8009296:	bf14      	ite	ne
 8009298:	2301      	movne	r3, #1
 800929a:	2300      	moveq	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	e008      	b.n	80092b2 <HAL_TIM_PWM_Start+0x6a>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	bf14      	ite	ne
 80092ac:	2301      	movne	r3, #1
 80092ae:	2300      	moveq	r3, #0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e07c      	b.n	80093b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <HAL_TIM_PWM_Start+0x82>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c8:	e013      	b.n	80092f2 <HAL_TIM_PWM_Start+0xaa>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d104      	bne.n	80092da <HAL_TIM_PWM_Start+0x92>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d8:	e00b      	b.n	80092f2 <HAL_TIM_PWM_Start+0xaa>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d104      	bne.n	80092ea <HAL_TIM_PWM_Start+0xa2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	e003      	b.n	80092f2 <HAL_TIM_PWM_Start+0xaa>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2202      	movs	r2, #2
 80092ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2201      	movs	r2, #1
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fe1a 	bl	8009f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a2d      	ldr	r2, [pc, #180]	; (80093bc <HAL_TIM_PWM_Start+0x174>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIM_PWM_Start+0xcc>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a2c      	ldr	r2, [pc, #176]	; (80093c0 <HAL_TIM_PWM_Start+0x178>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d101      	bne.n	8009318 <HAL_TIM_PWM_Start+0xd0>
 8009314:	2301      	movs	r3, #1
 8009316:	e000      	b.n	800931a <HAL_TIM_PWM_Start+0xd2>
 8009318:	2300      	movs	r3, #0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800932c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a22      	ldr	r2, [pc, #136]	; (80093bc <HAL_TIM_PWM_Start+0x174>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d022      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009340:	d01d      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <HAL_TIM_PWM_Start+0x17c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d018      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a1d      	ldr	r2, [pc, #116]	; (80093c8 <HAL_TIM_PWM_Start+0x180>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d013      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a1c      	ldr	r2, [pc, #112]	; (80093cc <HAL_TIM_PWM_Start+0x184>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00e      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a16      	ldr	r2, [pc, #88]	; (80093c0 <HAL_TIM_PWM_Start+0x178>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d009      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_TIM_PWM_Start+0x188>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d004      	beq.n	800937e <HAL_TIM_PWM_Start+0x136>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <HAL_TIM_PWM_Start+0x18c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d111      	bne.n	80093a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b06      	cmp	r3, #6
 800938e:	d010      	beq.n	80093b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0201 	orr.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a0:	e007      	b.n	80093b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40010400 	.word	0x40010400
 80093c4:	40000400 	.word	0x40000400
 80093c8:	40000800 	.word	0x40000800
 80093cc:	40000c00 	.word	0x40000c00
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d122      	bne.n	8009434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0202 	mvn.w	r2, #2
 8009404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa81 	bl	8009922 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa73 	bl	800990e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa84 	bl	8009936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b04      	cmp	r3, #4
 8009440:	d122      	bne.n	8009488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b04      	cmp	r3, #4
 800944e:	d11b      	bne.n	8009488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0204 	mvn.w	r2, #4
 8009458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fa57 	bl	8009922 <HAL_TIM_IC_CaptureCallback>
 8009474:	e005      	b.n	8009482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa49 	bl	800990e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa5a 	bl	8009936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0308 	and.w	r3, r3, #8
 8009492:	2b08      	cmp	r3, #8
 8009494:	d122      	bne.n	80094dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d11b      	bne.n	80094dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0208 	mvn.w	r2, #8
 80094ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2204      	movs	r2, #4
 80094b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa2d 	bl	8009922 <HAL_TIM_IC_CaptureCallback>
 80094c8:	e005      	b.n	80094d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa1f 	bl	800990e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fa30 	bl	8009936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0310 	and.w	r3, r3, #16
 80094e6:	2b10      	cmp	r3, #16
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b10      	cmp	r3, #16
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0210 	mvn.w	r2, #16
 8009500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2208      	movs	r2, #8
 8009506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa03 	bl	8009922 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f9f5 	bl	800990e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa06 	bl	8009936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b01      	cmp	r3, #1
 800953c:	d10e      	bne.n	800955c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b01      	cmp	r3, #1
 800954a:	d107      	bne.n	800955c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0201 	mvn.w	r2, #1
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9cf 	bl	80098fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009566:	2b80      	cmp	r3, #128	; 0x80
 8009568:	d10e      	bne.n	8009588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009574:	2b80      	cmp	r3, #128	; 0x80
 8009576:	d107      	bne.n	8009588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fdd4 	bl	800a130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d10e      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a0:	2b40      	cmp	r3, #64	; 0x40
 80095a2:	d107      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9cb 	bl	800994a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b20      	cmp	r3, #32
 80095c0:	d10e      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	d107      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0220 	mvn.w	r2, #32
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fd9e 	bl	800a11c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009602:	2302      	movs	r3, #2
 8009604:	e0ae      	b.n	8009764 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b0c      	cmp	r3, #12
 8009612:	f200 809f 	bhi.w	8009754 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009616:	a201      	add	r2, pc, #4	; (adr r2, 800961c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009651 	.word	0x08009651
 8009620:	08009755 	.word	0x08009755
 8009624:	08009755 	.word	0x08009755
 8009628:	08009755 	.word	0x08009755
 800962c:	08009691 	.word	0x08009691
 8009630:	08009755 	.word	0x08009755
 8009634:	08009755 	.word	0x08009755
 8009638:	08009755 	.word	0x08009755
 800963c:	080096d3 	.word	0x080096d3
 8009640:	08009755 	.word	0x08009755
 8009644:	08009755 	.word	0x08009755
 8009648:	08009755 	.word	0x08009755
 800964c:	08009713 	.word	0x08009713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fa22 	bl	8009aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699a      	ldr	r2, [r3, #24]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0208 	orr.w	r2, r2, #8
 800966a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0204 	bic.w	r2, r2, #4
 800967a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6999      	ldr	r1, [r3, #24]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	691a      	ldr	r2, [r3, #16]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	619a      	str	r2, [r3, #24]
      break;
 800968e:	e064      	b.n	800975a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fa72 	bl	8009b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6999      	ldr	r1, [r3, #24]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	021a      	lsls	r2, r3, #8
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	619a      	str	r2, [r3, #24]
      break;
 80096d0:	e043      	b.n	800975a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fac7 	bl	8009c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69da      	ldr	r2, [r3, #28]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0208 	orr.w	r2, r2, #8
 80096ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69da      	ldr	r2, [r3, #28]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0204 	bic.w	r2, r2, #4
 80096fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69d9      	ldr	r1, [r3, #28]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	61da      	str	r2, [r3, #28]
      break;
 8009710:	e023      	b.n	800975a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fb1b 	bl	8009d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800972c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69da      	ldr	r2, [r3, #28]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800973c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69d9      	ldr	r1, [r3, #28]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	021a      	lsls	r2, r3, #8
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	61da      	str	r2, [r3, #28]
      break;
 8009752:	e002      	b.n	800975a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	75fb      	strb	r3, [r7, #23]
      break;
 8009758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_TIM_ConfigClockSource+0x1c>
 8009784:	2302      	movs	r3, #2
 8009786:	e0b4      	b.n	80098f2 <HAL_TIM_ConfigClockSource+0x186>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c0:	d03e      	beq.n	8009840 <HAL_TIM_ConfigClockSource+0xd4>
 80097c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c6:	f200 8087 	bhi.w	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ce:	f000 8086 	beq.w	80098de <HAL_TIM_ConfigClockSource+0x172>
 80097d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d6:	d87f      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097d8:	2b70      	cmp	r3, #112	; 0x70
 80097da:	d01a      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0xa6>
 80097dc:	2b70      	cmp	r3, #112	; 0x70
 80097de:	d87b      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097e0:	2b60      	cmp	r3, #96	; 0x60
 80097e2:	d050      	beq.n	8009886 <HAL_TIM_ConfigClockSource+0x11a>
 80097e4:	2b60      	cmp	r3, #96	; 0x60
 80097e6:	d877      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097e8:	2b50      	cmp	r3, #80	; 0x50
 80097ea:	d03c      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0xfa>
 80097ec:	2b50      	cmp	r3, #80	; 0x50
 80097ee:	d873      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d058      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x13a>
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d86f      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 80097f8:	2b30      	cmp	r3, #48	; 0x30
 80097fa:	d064      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x15a>
 80097fc:	2b30      	cmp	r3, #48	; 0x30
 80097fe:	d86b      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 8009800:	2b20      	cmp	r3, #32
 8009802:	d060      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x15a>
 8009804:	2b20      	cmp	r3, #32
 8009806:	d867      	bhi.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d05c      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x15a>
 800980c:	2b10      	cmp	r3, #16
 800980e:	d05a      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x15a>
 8009810:	e062      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6899      	ldr	r1, [r3, #8]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f000 fb67 	bl	8009ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	609a      	str	r2, [r3, #8]
      break;
 800983e:	e04f      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	6899      	ldr	r1, [r3, #8]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f000 fb50 	bl	8009ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009862:	609a      	str	r2, [r3, #8]
      break;
 8009864:	e03c      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6859      	ldr	r1, [r3, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	461a      	mov	r2, r3
 8009874:	f000 fac4 	bl	8009e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2150      	movs	r1, #80	; 0x50
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fb1d 	bl	8009ebe <TIM_ITRx_SetConfig>
      break;
 8009884:	e02c      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6859      	ldr	r1, [r3, #4]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	461a      	mov	r2, r3
 8009894:	f000 fae3 	bl	8009e5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2160      	movs	r1, #96	; 0x60
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fb0d 	bl	8009ebe <TIM_ITRx_SetConfig>
      break;
 80098a4:	e01c      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6859      	ldr	r1, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f000 faa4 	bl	8009e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fafd 	bl	8009ebe <TIM_ITRx_SetConfig>
      break;
 80098c4:	e00c      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4619      	mov	r1, r3
 80098d0:	4610      	mov	r0, r2
 80098d2:	f000 faf4 	bl	8009ebe <TIM_ITRx_SetConfig>
      break;
 80098d6:	e003      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
      break;
 80098dc:	e000      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800993e:	bf00      	nop
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
	...

08009960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a40      	ldr	r2, [pc, #256]	; (8009a74 <TIM_Base_SetConfig+0x114>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d013      	beq.n	80099a0 <TIM_Base_SetConfig+0x40>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d00f      	beq.n	80099a0 <TIM_Base_SetConfig+0x40>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a3d      	ldr	r2, [pc, #244]	; (8009a78 <TIM_Base_SetConfig+0x118>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00b      	beq.n	80099a0 <TIM_Base_SetConfig+0x40>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a3c      	ldr	r2, [pc, #240]	; (8009a7c <TIM_Base_SetConfig+0x11c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <TIM_Base_SetConfig+0x40>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a3b      	ldr	r2, [pc, #236]	; (8009a80 <TIM_Base_SetConfig+0x120>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_Base_SetConfig+0x40>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a3a      	ldr	r2, [pc, #232]	; (8009a84 <TIM_Base_SetConfig+0x124>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d108      	bne.n	80099b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a2f      	ldr	r2, [pc, #188]	; (8009a74 <TIM_Base_SetConfig+0x114>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d02b      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c0:	d027      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a2c      	ldr	r2, [pc, #176]	; (8009a78 <TIM_Base_SetConfig+0x118>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d023      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a2b      	ldr	r2, [pc, #172]	; (8009a7c <TIM_Base_SetConfig+0x11c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d01f      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a2a      	ldr	r2, [pc, #168]	; (8009a80 <TIM_Base_SetConfig+0x120>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d01b      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a29      	ldr	r2, [pc, #164]	; (8009a84 <TIM_Base_SetConfig+0x124>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d017      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a28      	ldr	r2, [pc, #160]	; (8009a88 <TIM_Base_SetConfig+0x128>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a27      	ldr	r2, [pc, #156]	; (8009a8c <TIM_Base_SetConfig+0x12c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00f      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a26      	ldr	r2, [pc, #152]	; (8009a90 <TIM_Base_SetConfig+0x130>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00b      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a25      	ldr	r2, [pc, #148]	; (8009a94 <TIM_Base_SetConfig+0x134>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d007      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a24      	ldr	r2, [pc, #144]	; (8009a98 <TIM_Base_SetConfig+0x138>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <TIM_Base_SetConfig+0x13c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d108      	bne.n	8009a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a0a      	ldr	r2, [pc, #40]	; (8009a74 <TIM_Base_SetConfig+0x114>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d003      	beq.n	8009a58 <TIM_Base_SetConfig+0xf8>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a0c      	ldr	r2, [pc, #48]	; (8009a84 <TIM_Base_SetConfig+0x124>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d103      	bne.n	8009a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	691a      	ldr	r2, [r3, #16]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	615a      	str	r2, [r3, #20]
}
 8009a66:	bf00      	nop
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40010000 	.word	0x40010000
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	40000c00 	.word	0x40000c00
 8009a84:	40010400 	.word	0x40010400
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40014400 	.word	0x40014400
 8009a90:	40014800 	.word	0x40014800
 8009a94:	40001800 	.word	0x40001800
 8009a98:	40001c00 	.word	0x40001c00
 8009a9c:	40002000 	.word	0x40002000

08009aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0201 	bic.w	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f023 0302 	bic.w	r3, r3, #2
 8009ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a20      	ldr	r2, [pc, #128]	; (8009b78 <TIM_OC1_SetConfig+0xd8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_OC1_SetConfig+0x64>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a1f      	ldr	r2, [pc, #124]	; (8009b7c <TIM_OC1_SetConfig+0xdc>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d10c      	bne.n	8009b1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f023 0308 	bic.w	r3, r3, #8
 8009b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f023 0304 	bic.w	r3, r3, #4
 8009b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <TIM_OC1_SetConfig+0xd8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_OC1_SetConfig+0x8e>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a14      	ldr	r2, [pc, #80]	; (8009b7c <TIM_OC1_SetConfig+0xdc>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d111      	bne.n	8009b52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	621a      	str	r2, [r3, #32]
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40010400 	.word	0x40010400

08009b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	f023 0210 	bic.w	r2, r3, #16
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f023 0320 	bic.w	r3, r3, #32
 8009bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a22      	ldr	r2, [pc, #136]	; (8009c64 <TIM_OC2_SetConfig+0xe4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d003      	beq.n	8009be8 <TIM_OC2_SetConfig+0x68>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a21      	ldr	r2, [pc, #132]	; (8009c68 <TIM_OC2_SetConfig+0xe8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d10d      	bne.n	8009c04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a17      	ldr	r2, [pc, #92]	; (8009c64 <TIM_OC2_SetConfig+0xe4>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_OC2_SetConfig+0x94>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a16      	ldr	r2, [pc, #88]	; (8009c68 <TIM_OC2_SetConfig+0xe8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d113      	bne.n	8009c3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	621a      	str	r2, [r3, #32]
}
 8009c56:	bf00      	nop
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40010400 	.word	0x40010400

08009c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a21      	ldr	r2, [pc, #132]	; (8009d4c <TIM_OC3_SetConfig+0xe0>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d003      	beq.n	8009cd2 <TIM_OC3_SetConfig+0x66>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a20      	ldr	r2, [pc, #128]	; (8009d50 <TIM_OC3_SetConfig+0xe4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d10d      	bne.n	8009cee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a16      	ldr	r2, [pc, #88]	; (8009d4c <TIM_OC3_SetConfig+0xe0>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d003      	beq.n	8009cfe <TIM_OC3_SetConfig+0x92>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a15      	ldr	r2, [pc, #84]	; (8009d50 <TIM_OC3_SetConfig+0xe4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d113      	bne.n	8009d26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	621a      	str	r2, [r3, #32]
}
 8009d40:	bf00      	nop
 8009d42:	371c      	adds	r7, #28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40010400 	.word	0x40010400

08009d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	031b      	lsls	r3, r3, #12
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a12      	ldr	r2, [pc, #72]	; (8009df8 <TIM_OC4_SetConfig+0xa4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <TIM_OC4_SetConfig+0x68>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a11      	ldr	r2, [pc, #68]	; (8009dfc <TIM_OC4_SetConfig+0xa8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d109      	bne.n	8009dd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	019b      	lsls	r3, r3, #6
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	621a      	str	r2, [r3, #32]
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40010400 	.word	0x40010400

08009e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f023 0201 	bic.w	r2, r3, #1
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f023 030a 	bic.w	r3, r3, #10
 8009e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b087      	sub	sp, #28
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	f023 0210 	bic.w	r2, r3, #16
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	031b      	lsls	r3, r3, #12
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	621a      	str	r2, [r3, #32]
}
 8009eb2:	bf00      	nop
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	f043 0307 	orr.w	r3, r3, #7
 8009ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	609a      	str	r2, [r3, #8]
}
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	021a      	lsls	r2, r3, #8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	609a      	str	r2, [r3, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f003 031f 	and.w	r3, r3, #31
 8009f46:	2201      	movs	r2, #1
 8009f48:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6a1a      	ldr	r2, [r3, #32]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	43db      	mvns	r3, r3
 8009f56:	401a      	ands	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a1a      	ldr	r2, [r3, #32]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f003 031f 	and.w	r3, r3, #31
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d101      	bne.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f94:	2302      	movs	r3, #2
 8009f96:	e05a      	b.n	800a04e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a21      	ldr	r2, [pc, #132]	; (800a05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d022      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe4:	d01d      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1d      	ldr	r2, [pc, #116]	; (800a060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d018      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1b      	ldr	r2, [pc, #108]	; (800a064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1a      	ldr	r2, [pc, #104]	; (800a068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00e      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a18      	ldr	r2, [pc, #96]	; (800a06c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d009      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a17      	ldr	r2, [pc, #92]	; (800a070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d004      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a15      	ldr	r2, [pc, #84]	; (800a074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d10c      	bne.n	800a03c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	4313      	orrs	r3, r2
 800a032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40010000 	.word	0x40010000
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40000c00 	.word	0x40000c00
 800a06c:	40010400 	.word	0x40010400
 800a070:	40014000 	.word	0x40014000
 800a074:	40001800 	.word	0x40001800

0800a078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a090:	2302      	movs	r3, #2
 800a092:	e03d      	b.n	800a110 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e03f      	b.n	800a1d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fc fc2a 	bl	80069c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2224      	movs	r2, #36	; 0x24
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 ffa9 	bl	800b0e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a19c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695a      	ldr	r2, [r3, #20]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	d11d      	bne.n	800a234 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <HAL_UART_Receive_IT+0x26>
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e016      	b.n	800a236 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_UART_Receive_IT+0x38>
 800a212:	2302      	movs	r3, #2
 800a214:	e00f      	b.n	800a236 <HAL_UART_Receive_IT+0x58>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	461a      	mov	r2, r3
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 fcc1 	bl	800abb2 <UART_Start_Receive_IT>
 800a230:	4603      	mov	r3, r0
 800a232:	e000      	b.n	800a236 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a234:	2302      	movs	r3, #2
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08c      	sub	sp, #48	; 0x30
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b20      	cmp	r3, #32
 800a258:	d165      	bne.n	800a326 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <HAL_UART_Transmit_DMA+0x26>
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e05e      	b.n	800a328 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a270:	2b01      	cmp	r3, #1
 800a272:	d101      	bne.n	800a278 <HAL_UART_Transmit_DMA+0x38>
 800a274:	2302      	movs	r3, #2
 800a276:	e057      	b.n	800a328 <HAL_UART_Transmit_DMA+0xe8>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	88fa      	ldrh	r2, [r7, #6]
 800a28a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2221      	movs	r2, #33	; 0x21
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	4a22      	ldr	r2, [pc, #136]	; (800a330 <HAL_UART_Transmit_DMA+0xf0>)
 800a2a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	4a21      	ldr	r2, [pc, #132]	; (800a334 <HAL_UART_Transmit_DMA+0xf4>)
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	4a20      	ldr	r2, [pc, #128]	; (800a338 <HAL_UART_Transmit_DMA+0xf8>)
 800a2b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	2200      	movs	r2, #0
 800a2be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	f7fd fd00 	bl	8007cdc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3314      	adds	r3, #20
 800a2f4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30e:	627a      	str	r2, [r7, #36]	; 0x24
 800a310:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6a39      	ldr	r1, [r7, #32]
 800a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e5      	bne.n	800a2ee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e000      	b.n	800a328 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a326:	2302      	movs	r3, #2
  }
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3730      	adds	r7, #48	; 0x30
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	0800a90d 	.word	0x0800a90d
 800a334:	0800a9a7 	.word	0x0800a9a7
 800a338:	0800ab1f 	.word	0x0800ab1f

0800a33c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b20      	cmp	r3, #32
 800a354:	d11d      	bne.n	800a392 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <HAL_UART_Receive_DMA+0x26>
 800a35c:	88fb      	ldrh	r3, [r7, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e016      	b.n	800a394 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d101      	bne.n	800a374 <HAL_UART_Receive_DMA+0x38>
 800a370:	2302      	movs	r3, #2
 800a372:	e00f      	b.n	800a394 <HAL_UART_Receive_DMA+0x58>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	461a      	mov	r2, r3
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fc4d 	bl	800ac28 <UART_Start_Receive_DMA>
 800a38e:	4603      	mov	r3, r0
 800a390:	e000      	b.n	800a394 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a392:	2302      	movs	r3, #2
  }
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b0ba      	sub	sp, #232	; 0xe8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3d2:	f003 030f 	and.w	r3, r3, #15
 800a3d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a3da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10f      	bne.n	800a402 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <HAL_UART_IRQHandler+0x66>
 800a3ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fdb5 	bl	800af6a <UART_Receive_IT>
      return;
 800a400:	e256      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80de 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x22c>
 800a40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a41c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 80d1 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <HAL_UART_IRQHandler+0xae>
 800a432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f043 0201 	orr.w	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <HAL_UART_IRQHandler+0xd2>
 800a456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	f043 0202 	orr.w	r2, r3, #2
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00b      	beq.n	800a492 <HAL_UART_IRQHandler+0xf6>
 800a47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	f043 0204 	orr.w	r2, r3, #4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d011      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x126>
 800a49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	f043 0208 	orr.w	r2, r3, #8
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 81ed 	beq.w	800a8a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d008      	beq.n	800a4ea <HAL_UART_IRQHandler+0x14e>
 800a4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fd40 	bl	800af6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	bf0c      	ite	eq
 800a4f8:	2301      	moveq	r3, #1
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <HAL_UART_IRQHandler+0x17a>
 800a50e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d04f      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fc48 	bl	800adac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a526:	2b40      	cmp	r3, #64	; 0x40
 800a528:	d141      	bne.n	800a5ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3314      	adds	r3, #20
 800a530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3314      	adds	r3, #20
 800a552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a556:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a55a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1d9      	bne.n	800a52a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	4a7d      	ldr	r2, [pc, #500]	; (800a778 <HAL_UART_IRQHandler+0x3dc>)
 800a584:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fd fc6e 	bl	8007e6c <HAL_DMA_Abort_IT>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d016      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a4:	e00e      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f99a 	bl	800a8e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ac:	e00a      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f996 	bl	800a8e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e006      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f992 	bl	800a8e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a5c2:	e170      	b.n	800a8a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	bf00      	nop
    return;
 800a5c6:	e16e      	b.n	800a8a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	f040 814a 	bne.w	800a866 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 8143 	beq.w	800a866 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 813c 	beq.w	800a866 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60bb      	str	r3, [r7, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60e:	2b40      	cmp	r3, #64	; 0x40
 800a610:	f040 80b4 	bne.w	800a77c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8140 	beq.w	800a8aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a62e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a632:	429a      	cmp	r2, r3
 800a634:	f080 8139 	bcs.w	800a8aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a63e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64a:	f000 8088 	beq.w	800a75e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	330c      	adds	r3, #12
 800a654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a66c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	330c      	adds	r3, #12
 800a676:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a67a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a67e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a682:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a686:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a68a:	e841 2300 	strex	r3, r2, [r1]
 800a68e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1d9      	bne.n	800a64e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6ca:	e841 2300 	strex	r3, r2, [r1]
 800a6ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e1      	bne.n	800a69a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3314      	adds	r3, #20
 800a6dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6e0:	e853 3f00 	ldrex	r3, [r3]
 800a6e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a6e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3314      	adds	r3, #20
 800a6f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a6fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a6fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e3      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	330c      	adds	r3, #12
 800a722:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72e:	f023 0310 	bic.w	r3, r3, #16
 800a732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	330c      	adds	r3, #12
 800a73c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a740:	65ba      	str	r2, [r7, #88]	; 0x58
 800a742:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a744:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a748:	e841 2300 	strex	r3, r2, [r1]
 800a74c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e3      	bne.n	800a71c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fd fb17 	bl	8007d8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a766:	b29b      	uxth	r3, r3
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f8c0 	bl	800a8f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a774:	e099      	b.n	800a8aa <HAL_UART_IRQHandler+0x50e>
 800a776:	bf00      	nop
 800a778:	0800ae73 	.word	0x0800ae73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a784:	b29b      	uxth	r3, r3
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a790:	b29b      	uxth	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 808b 	beq.w	800a8ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8086 	beq.w	800a8ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	330c      	adds	r3, #12
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a7c6:	647a      	str	r2, [r7, #68]	; 0x44
 800a7c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e3      	bne.n	800a7a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3314      	adds	r3, #20
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	f023 0301 	bic.w	r3, r3, #1
 800a7f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a7fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e3      	bne.n	800a7da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	330c      	adds	r3, #12
 800a826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0310 	bic.w	r3, r3, #16
 800a836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	330c      	adds	r3, #12
 800a840:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a844:	61fa      	str	r2, [r7, #28]
 800a846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	69b9      	ldr	r1, [r7, #24]
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	617b      	str	r3, [r7, #20]
   return(result);
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e3      	bne.n	800a820 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f848 	bl	800a8f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a864:	e023      	b.n	800a8ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d009      	beq.n	800a886 <HAL_UART_IRQHandler+0x4ea>
 800a872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fb0b 	bl	800ae9a <UART_Transmit_IT>
    return;
 800a884:	e014      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00e      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x514>
 800a892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb4b 	bl	800af3a <UART_EndTransmit_IT>
    return;
 800a8a4:	e004      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
    return;
 800a8a6:	bf00      	nop
 800a8a8:	e002      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
      return;
 800a8aa:	bf00      	nop
 800a8ac:	e000      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
      return;
 800a8ae:	bf00      	nop
  }
}
 800a8b0:	37e8      	adds	r7, #232	; 0xe8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop

0800a8b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b090      	sub	sp, #64	; 0x40
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a924:	2b00      	cmp	r3, #0
 800a926:	d137      	bne.n	800a998 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a92a:	2200      	movs	r2, #0
 800a92c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3314      	adds	r3, #20
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	623b      	str	r3, [r7, #32]
   return(result);
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a944:	63bb      	str	r3, [r7, #56]	; 0x38
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3314      	adds	r3, #20
 800a94c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a94e:	633a      	str	r2, [r7, #48]	; 0x30
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e5      	bne.n	800a92e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	330c      	adds	r3, #12
 800a968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	60fb      	str	r3, [r7, #12]
   return(result);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a978:	637b      	str	r3, [r7, #52]	; 0x34
 800a97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	330c      	adds	r3, #12
 800a980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a982:	61fa      	str	r2, [r7, #28]
 800a984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a986:	69b9      	ldr	r1, [r7, #24]
 800a988:	69fa      	ldr	r2, [r7, #28]
 800a98a:	e841 2300 	strex	r3, r2, [r1]
 800a98e:	617b      	str	r3, [r7, #20]
   return(result);
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1e5      	bne.n	800a962 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a996:	e002      	b.n	800a99e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a99a:	f7fa fbe5 	bl	8005168 <HAL_UART_TxCpltCallback>
}
 800a99e:	bf00      	nop
 800a9a0:	3740      	adds	r7, #64	; 0x40
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7ff ff7f 	bl	800a8b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b09c      	sub	sp, #112	; 0x70
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d172      	bne.n	800aac4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	330c      	adds	r3, #12
 800aa02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa04:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e5      	bne.n	800a9e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3314      	adds	r3, #20
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	f023 0301 	bic.w	r3, r3, #1
 800aa2e:	667b      	str	r3, [r7, #100]	; 0x64
 800aa30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3314      	adds	r3, #20
 800aa36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa38:	647a      	str	r2, [r7, #68]	; 0x44
 800aa3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e5      	bne.n	800aa18 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3314      	adds	r3, #20
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa62:	663b      	str	r3, [r7, #96]	; 0x60
 800aa64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3314      	adds	r3, #20
 800aa6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa6c:	633a      	str	r2, [r7, #48]	; 0x30
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e5      	bne.n	800aa4c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa82:	2220      	movs	r2, #32
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d119      	bne.n	800aac4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	330c      	adds	r3, #12
 800aa96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0310 	bic.w	r3, r3, #16
 800aaa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	330c      	adds	r3, #12
 800aaae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aab0:	61fa      	str	r2, [r7, #28]
 800aab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69b9      	ldr	r1, [r7, #24]
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	617b      	str	r3, [r7, #20]
   return(result);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e5      	bne.n	800aa90 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d106      	bne.n	800aada <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aace:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aad0:	4619      	mov	r1, r3
 800aad2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aad4:	f7ff ff0e 	bl	800a8f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aad8:	e002      	b.n	800aae0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aadc:	f7fa fb56 	bl	800518c <HAL_UART_RxCpltCallback>
}
 800aae0:	bf00      	nop
 800aae2:	3770      	adds	r7, #112	; 0x70
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d108      	bne.n	800ab10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fef3 	bl	800a8f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab0e:	e002      	b.n	800ab16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7ff fedb 	bl	800a8cc <HAL_UART_RxHalfCpltCallback>
}
 800ab16:	bf00      	nop
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3a:	2b80      	cmp	r3, #128	; 0x80
 800ab3c:	bf0c      	ite	eq
 800ab3e:	2301      	moveq	r3, #1
 800ab40:	2300      	movne	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b21      	cmp	r3, #33	; 0x21
 800ab50:	d108      	bne.n	800ab64 <UART_DMAError+0x46>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ab5e:	68b8      	ldr	r0, [r7, #8]
 800ab60:	f000 f8fc 	bl	800ad5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	bf0c      	ite	eq
 800ab72:	2301      	moveq	r3, #1
 800ab74:	2300      	movne	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b22      	cmp	r3, #34	; 0x22
 800ab84:	d108      	bne.n	800ab98 <UART_DMAError+0x7a>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab92:	68b8      	ldr	r0, [r7, #8]
 800ab94:	f000 f90a 	bl	800adac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	f043 0210 	orr.w	r2, r3, #16
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aba4:	68b8      	ldr	r0, [r7, #8]
 800aba6:	f7ff fe9b 	bl	800a8e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2222      	movs	r2, #34	; 0x22
 800abdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abf6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695a      	ldr	r2, [r3, #20]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0201 	orr.w	r2, r2, #1
 800ac06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0220 	orr.w	r2, r2, #32
 800ac16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b098      	sub	sp, #96	; 0x60
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	88fa      	ldrh	r2, [r7, #6]
 800ac40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2222      	movs	r2, #34	; 0x22
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	4a3e      	ldr	r2, [pc, #248]	; (800ad50 <UART_Start_Receive_DMA+0x128>)
 800ac56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	4a3d      	ldr	r2, [pc, #244]	; (800ad54 <UART_Start_Receive_DMA+0x12c>)
 800ac5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	4a3c      	ldr	r2, [pc, #240]	; (800ad58 <UART_Start_Receive_DMA+0x130>)
 800ac66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac70:	f107 0308 	add.w	r3, r7, #8
 800ac74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	88fb      	ldrh	r3, [r7, #6]
 800ac88:	f7fd f828 	bl	8007cdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	330c      	adds	r3, #12
 800acb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	330c      	adds	r3, #12
 800acc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acca:	64fa      	str	r2, [r7, #76]	; 0x4c
 800accc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800acd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800acd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e5      	bne.n	800acaa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3314      	adds	r3, #20
 800ace4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	f043 0301 	orr.w	r3, r3, #1
 800acf4:	657b      	str	r3, [r7, #84]	; 0x54
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3314      	adds	r3, #20
 800acfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acfe:	63ba      	str	r2, [r7, #56]	; 0x38
 800ad00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e5      	bne.n	800acde <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3314      	adds	r3, #20
 800ad18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	617b      	str	r3, [r7, #20]
   return(result);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad28:	653b      	str	r3, [r7, #80]	; 0x50
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3314      	adds	r3, #20
 800ad30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad32:	627a      	str	r2, [r7, #36]	; 0x24
 800ad34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6a39      	ldr	r1, [r7, #32]
 800ad38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e5      	bne.n	800ad12 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3760      	adds	r7, #96	; 0x60
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	0800a9c3 	.word	0x0800a9c3
 800ad54:	0800aae9 	.word	0x0800aae9
 800ad58:	0800ab1f 	.word	0x0800ab1f

0800ad5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	; 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	330c      	adds	r3, #12
 800ad6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad7a:	61fb      	str	r3, [r7, #28]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	330c      	adds	r3, #12
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	61ba      	str	r2, [r7, #24]
 800ad86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6979      	ldr	r1, [r7, #20]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	613b      	str	r3, [r7, #16]
   return(result);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e5      	bne.n	800ad64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ada0:	bf00      	nop
 800ada2:	3724      	adds	r7, #36	; 0x24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adac:	b480      	push	{r7}
 800adae:	b095      	sub	sp, #84	; 0x54
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800add4:	643a      	str	r2, [r7, #64]	; 0x40
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e5      	bne.n	800adb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3314      	adds	r3, #20
 800adee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3314      	adds	r3, #20
 800ae06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e5      	bne.n	800ade8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d119      	bne.n	800ae58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	330c      	adds	r3, #12
 800ae2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f023 0310 	bic.w	r3, r3, #16
 800ae3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	330c      	adds	r3, #12
 800ae42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae44:	61ba      	str	r2, [r7, #24]
 800ae46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6979      	ldr	r1, [r7, #20]
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	613b      	str	r3, [r7, #16]
   return(result);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e5      	bne.n	800ae24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae66:	bf00      	nop
 800ae68:	3754      	adds	r7, #84	; 0x54
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fd27 	bl	800a8e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b085      	sub	sp, #20
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b21      	cmp	r3, #33	; 0x21
 800aeac:	d13e      	bne.n	800af2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb6:	d114      	bne.n	800aee2 <UART_Transmit_IT+0x48>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d110      	bne.n	800aee2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	1c9a      	adds	r2, r3, #2
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	621a      	str	r2, [r3, #32]
 800aee0:	e008      	b.n	800aef4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	1c59      	adds	r1, r3, #1
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6211      	str	r1, [r2, #32]
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4619      	mov	r1, r3
 800af02:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10f      	bne.n	800af28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	e000      	b.n	800af2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af2c:	2302      	movs	r3, #2
  }
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2220      	movs	r2, #32
 800af56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7fa f904 	bl	8005168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b08c      	sub	sp, #48	; 0x30
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b22      	cmp	r3, #34	; 0x22
 800af7c:	f040 80ab 	bne.w	800b0d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af88:	d117      	bne.n	800afba <UART_Receive_IT+0x50>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d113      	bne.n	800afba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb2:	1c9a      	adds	r2, r3, #2
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	629a      	str	r2, [r3, #40]	; 0x28
 800afb8:	e026      	b.n	800b008 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afcc:	d007      	beq.n	800afde <UART_Receive_IT+0x74>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10a      	bne.n	800afec <UART_Receive_IT+0x82>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	e008      	b.n	800affe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29b      	uxth	r3, r3
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	4619      	mov	r1, r3
 800b016:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d15a      	bne.n	800b0d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0220 	bic.w	r2, r2, #32
 800b02a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b03a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	695a      	ldr	r2, [r3, #20]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0201 	bic.w	r2, r2, #1
 800b04a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d135      	bne.n	800b0c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	330c      	adds	r3, #12
 800b068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	613b      	str	r3, [r7, #16]
   return(result);
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f023 0310 	bic.w	r3, r3, #16
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	330c      	adds	r3, #12
 800b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b082:	623a      	str	r2, [r7, #32]
 800b084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	69f9      	ldr	r1, [r7, #28]
 800b088:	6a3a      	ldr	r2, [r7, #32]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e5      	bne.n	800b062 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0310 	and.w	r3, r3, #16
 800b0a0:	2b10      	cmp	r3, #16
 800b0a2:	d10a      	bne.n	800b0ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff fc17 	bl	800a8f4 <HAL_UARTEx_RxEventCallback>
 800b0c6:	e002      	b.n	800b0ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fa f85f 	bl	800518c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e002      	b.n	800b0d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b0d6:	2302      	movs	r3, #2
  }
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3730      	adds	r7, #48	; 0x30
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	b09f      	sub	sp, #124	; 0x7c
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f6:	68d9      	ldr	r1, [r3, #12]
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	ea40 0301 	orr.w	r3, r0, r1
 800b100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b104:	689a      	ldr	r2, [r3, #8]
 800b106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	431a      	orrs	r2, r3
 800b10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	431a      	orrs	r2, r3
 800b112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	4313      	orrs	r3, r2
 800b118:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b124:	f021 010c 	bic.w	r1, r1, #12
 800b128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b12e:	430b      	orrs	r3, r1
 800b130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13e:	6999      	ldr	r1, [r3, #24]
 800b140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	ea40 0301 	orr.w	r3, r0, r1
 800b148:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	4bc5      	ldr	r3, [pc, #788]	; (800b464 <UART_SetConfig+0x384>)
 800b150:	429a      	cmp	r2, r3
 800b152:	d004      	beq.n	800b15e <UART_SetConfig+0x7e>
 800b154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	4bc3      	ldr	r3, [pc, #780]	; (800b468 <UART_SetConfig+0x388>)
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d103      	bne.n	800b166 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b15e:	f7fd ff45 	bl	8008fec <HAL_RCC_GetPCLK2Freq>
 800b162:	6778      	str	r0, [r7, #116]	; 0x74
 800b164:	e002      	b.n	800b16c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b166:	f7fd ff2d 	bl	8008fc4 <HAL_RCC_GetPCLK1Freq>
 800b16a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b174:	f040 80b6 	bne.w	800b2e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b17a:	461c      	mov	r4, r3
 800b17c:	f04f 0500 	mov.w	r5, #0
 800b180:	4622      	mov	r2, r4
 800b182:	462b      	mov	r3, r5
 800b184:	1891      	adds	r1, r2, r2
 800b186:	6439      	str	r1, [r7, #64]	; 0x40
 800b188:	415b      	adcs	r3, r3
 800b18a:	647b      	str	r3, [r7, #68]	; 0x44
 800b18c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b190:	1912      	adds	r2, r2, r4
 800b192:	eb45 0303 	adc.w	r3, r5, r3
 800b196:	f04f 0000 	mov.w	r0, #0
 800b19a:	f04f 0100 	mov.w	r1, #0
 800b19e:	00d9      	lsls	r1, r3, #3
 800b1a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b1a4:	00d0      	lsls	r0, r2, #3
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	1911      	adds	r1, r2, r4
 800b1ac:	6639      	str	r1, [r7, #96]	; 0x60
 800b1ae:	416b      	adcs	r3, r5
 800b1b0:	667b      	str	r3, [r7, #100]	; 0x64
 800b1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	1891      	adds	r1, r2, r2
 800b1be:	63b9      	str	r1, [r7, #56]	; 0x38
 800b1c0:	415b      	adcs	r3, r3
 800b1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b1cc:	f7f5 fd5c 	bl	8000c88 <__aeabi_uldivmod>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4ba5      	ldr	r3, [pc, #660]	; (800b46c <UART_SetConfig+0x38c>)
 800b1d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b1da:	095b      	lsrs	r3, r3, #5
 800b1dc:	011e      	lsls	r6, r3, #4
 800b1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	f04f 0500 	mov.w	r5, #0
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	1891      	adds	r1, r2, r2
 800b1ec:	6339      	str	r1, [r7, #48]	; 0x30
 800b1ee:	415b      	adcs	r3, r3
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1f6:	1912      	adds	r2, r2, r4
 800b1f8:	eb45 0303 	adc.w	r3, r5, r3
 800b1fc:	f04f 0000 	mov.w	r0, #0
 800b200:	f04f 0100 	mov.w	r1, #0
 800b204:	00d9      	lsls	r1, r3, #3
 800b206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b20a:	00d0      	lsls	r0, r2, #3
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	1911      	adds	r1, r2, r4
 800b212:	65b9      	str	r1, [r7, #88]	; 0x58
 800b214:	416b      	adcs	r3, r5
 800b216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	461a      	mov	r2, r3
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	1891      	adds	r1, r2, r2
 800b224:	62b9      	str	r1, [r7, #40]	; 0x28
 800b226:	415b      	adcs	r3, r3
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b22a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b22e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b232:	f7f5 fd29 	bl	8000c88 <__aeabi_uldivmod>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4b8c      	ldr	r3, [pc, #560]	; (800b46c <UART_SetConfig+0x38c>)
 800b23c:	fba3 1302 	umull	r1, r3, r3, r2
 800b240:	095b      	lsrs	r3, r3, #5
 800b242:	2164      	movs	r1, #100	; 0x64
 800b244:	fb01 f303 	mul.w	r3, r1, r3
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	3332      	adds	r3, #50	; 0x32
 800b24e:	4a87      	ldr	r2, [pc, #540]	; (800b46c <UART_SetConfig+0x38c>)
 800b250:	fba2 2303 	umull	r2, r3, r2, r3
 800b254:	095b      	lsrs	r3, r3, #5
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b25c:	441e      	add	r6, r3
 800b25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b260:	4618      	mov	r0, r3
 800b262:	f04f 0100 	mov.w	r1, #0
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	1894      	adds	r4, r2, r2
 800b26c:	623c      	str	r4, [r7, #32]
 800b26e:	415b      	adcs	r3, r3
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
 800b272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b276:	1812      	adds	r2, r2, r0
 800b278:	eb41 0303 	adc.w	r3, r1, r3
 800b27c:	f04f 0400 	mov.w	r4, #0
 800b280:	f04f 0500 	mov.w	r5, #0
 800b284:	00dd      	lsls	r5, r3, #3
 800b286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b28a:	00d4      	lsls	r4, r2, #3
 800b28c:	4622      	mov	r2, r4
 800b28e:	462b      	mov	r3, r5
 800b290:	1814      	adds	r4, r2, r0
 800b292:	653c      	str	r4, [r7, #80]	; 0x50
 800b294:	414b      	adcs	r3, r1
 800b296:	657b      	str	r3, [r7, #84]	; 0x54
 800b298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	461a      	mov	r2, r3
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	1891      	adds	r1, r2, r2
 800b2a4:	61b9      	str	r1, [r7, #24]
 800b2a6:	415b      	adcs	r3, r3
 800b2a8:	61fb      	str	r3, [r7, #28]
 800b2aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b2b2:	f7f5 fce9 	bl	8000c88 <__aeabi_uldivmod>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4b6c      	ldr	r3, [pc, #432]	; (800b46c <UART_SetConfig+0x38c>)
 800b2bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b2c0:	095b      	lsrs	r3, r3, #5
 800b2c2:	2164      	movs	r1, #100	; 0x64
 800b2c4:	fb01 f303 	mul.w	r3, r1, r3
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	3332      	adds	r3, #50	; 0x32
 800b2ce:	4a67      	ldr	r2, [pc, #412]	; (800b46c <UART_SetConfig+0x38c>)
 800b2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	f003 0207 	and.w	r2, r3, #7
 800b2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4432      	add	r2, r6
 800b2e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b2e2:	e0b9      	b.n	800b458 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	f04f 0500 	mov.w	r5, #0
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	462b      	mov	r3, r5
 800b2f0:	1891      	adds	r1, r2, r2
 800b2f2:	6139      	str	r1, [r7, #16]
 800b2f4:	415b      	adcs	r3, r3
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2fc:	1912      	adds	r2, r2, r4
 800b2fe:	eb45 0303 	adc.w	r3, r5, r3
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f04f 0100 	mov.w	r1, #0
 800b30a:	00d9      	lsls	r1, r3, #3
 800b30c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b310:	00d0      	lsls	r0, r2, #3
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	eb12 0804 	adds.w	r8, r2, r4
 800b31a:	eb43 0905 	adc.w	r9, r3, r5
 800b31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	f04f 0100 	mov.w	r1, #0
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	f04f 0300 	mov.w	r3, #0
 800b330:	008b      	lsls	r3, r1, #2
 800b332:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b336:	0082      	lsls	r2, r0, #2
 800b338:	4640      	mov	r0, r8
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7f5 fca4 	bl	8000c88 <__aeabi_uldivmod>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4b49      	ldr	r3, [pc, #292]	; (800b46c <UART_SetConfig+0x38c>)
 800b346:	fba3 2302 	umull	r2, r3, r3, r2
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	011e      	lsls	r6, r3, #4
 800b34e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b350:	4618      	mov	r0, r3
 800b352:	f04f 0100 	mov.w	r1, #0
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	1894      	adds	r4, r2, r2
 800b35c:	60bc      	str	r4, [r7, #8]
 800b35e:	415b      	adcs	r3, r3
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b366:	1812      	adds	r2, r2, r0
 800b368:	eb41 0303 	adc.w	r3, r1, r3
 800b36c:	f04f 0400 	mov.w	r4, #0
 800b370:	f04f 0500 	mov.w	r5, #0
 800b374:	00dd      	lsls	r5, r3, #3
 800b376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b37a:	00d4      	lsls	r4, r2, #3
 800b37c:	4622      	mov	r2, r4
 800b37e:	462b      	mov	r3, r5
 800b380:	1814      	adds	r4, r2, r0
 800b382:	64bc      	str	r4, [r7, #72]	; 0x48
 800b384:	414b      	adcs	r3, r1
 800b386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f04f 0100 	mov.w	r1, #0
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	008b      	lsls	r3, r1, #2
 800b39c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b3a0:	0082      	lsls	r2, r0, #2
 800b3a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b3a6:	f7f5 fc6f 	bl	8000c88 <__aeabi_uldivmod>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4b2f      	ldr	r3, [pc, #188]	; (800b46c <UART_SetConfig+0x38c>)
 800b3b0:	fba3 1302 	umull	r1, r3, r3, r2
 800b3b4:	095b      	lsrs	r3, r3, #5
 800b3b6:	2164      	movs	r1, #100	; 0x64
 800b3b8:	fb01 f303 	mul.w	r3, r1, r3
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	011b      	lsls	r3, r3, #4
 800b3c0:	3332      	adds	r3, #50	; 0x32
 800b3c2:	4a2a      	ldr	r2, [pc, #168]	; (800b46c <UART_SetConfig+0x38c>)
 800b3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c8:	095b      	lsrs	r3, r3, #5
 800b3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ce:	441e      	add	r6, r3
 800b3d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f04f 0100 	mov.w	r1, #0
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	1894      	adds	r4, r2, r2
 800b3de:	603c      	str	r4, [r7, #0]
 800b3e0:	415b      	adcs	r3, r3
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e8:	1812      	adds	r2, r2, r0
 800b3ea:	eb41 0303 	adc.w	r3, r1, r3
 800b3ee:	f04f 0400 	mov.w	r4, #0
 800b3f2:	f04f 0500 	mov.w	r5, #0
 800b3f6:	00dd      	lsls	r5, r3, #3
 800b3f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b3fc:	00d4      	lsls	r4, r2, #3
 800b3fe:	4622      	mov	r2, r4
 800b400:	462b      	mov	r3, r5
 800b402:	eb12 0a00 	adds.w	sl, r2, r0
 800b406:	eb43 0b01 	adc.w	fp, r3, r1
 800b40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	4618      	mov	r0, r3
 800b410:	f04f 0100 	mov.w	r1, #0
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	008b      	lsls	r3, r1, #2
 800b41e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b422:	0082      	lsls	r2, r0, #2
 800b424:	4650      	mov	r0, sl
 800b426:	4659      	mov	r1, fp
 800b428:	f7f5 fc2e 	bl	8000c88 <__aeabi_uldivmod>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4b0e      	ldr	r3, [pc, #56]	; (800b46c <UART_SetConfig+0x38c>)
 800b432:	fba3 1302 	umull	r1, r3, r3, r2
 800b436:	095b      	lsrs	r3, r3, #5
 800b438:	2164      	movs	r1, #100	; 0x64
 800b43a:	fb01 f303 	mul.w	r3, r1, r3
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	011b      	lsls	r3, r3, #4
 800b442:	3332      	adds	r3, #50	; 0x32
 800b444:	4a09      	ldr	r2, [pc, #36]	; (800b46c <UART_SetConfig+0x38c>)
 800b446:	fba2 2303 	umull	r2, r3, r2, r3
 800b44a:	095b      	lsrs	r3, r3, #5
 800b44c:	f003 020f 	and.w	r2, r3, #15
 800b450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4432      	add	r2, r6
 800b456:	609a      	str	r2, [r3, #8]
}
 800b458:	bf00      	nop
 800b45a:	377c      	adds	r7, #124	; 0x7c
 800b45c:	46bd      	mov	sp, r7
 800b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b462:	bf00      	nop
 800b464:	40011000 	.word	0x40011000
 800b468:	40011400 	.word	0x40011400
 800b46c:	51eb851f 	.word	0x51eb851f

0800b470 <__cxa_pure_virtual>:
 800b470:	b508      	push	{r3, lr}
 800b472:	f000 f80d 	bl	800b490 <_ZSt9terminatev>

0800b476 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b476:	b508      	push	{r3, lr}
 800b478:	4780      	blx	r0
 800b47a:	f000 f80e 	bl	800b49a <abort>
	...

0800b480 <_ZSt13get_terminatev>:
 800b480:	4b02      	ldr	r3, [pc, #8]	; (800b48c <_ZSt13get_terminatev+0xc>)
 800b482:	6818      	ldr	r0, [r3, #0]
 800b484:	f3bf 8f5b 	dmb	ish
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	2000005c 	.word	0x2000005c

0800b490 <_ZSt9terminatev>:
 800b490:	b508      	push	{r3, lr}
 800b492:	f7ff fff5 	bl	800b480 <_ZSt13get_terminatev>
 800b496:	f7ff ffee 	bl	800b476 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b49a <abort>:
 800b49a:	b508      	push	{r3, lr}
 800b49c:	2006      	movs	r0, #6
 800b49e:	f000 fef7 	bl	800c290 <raise>
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7fc f8ae 	bl	8007604 <_exit>

0800b4a8 <atof>:
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f001 bd59 	b.w	800cf60 <strtod>
	...

0800b4b0 <__errno>:
 800b4b0:	4b01      	ldr	r3, [pc, #4]	; (800b4b8 <__errno+0x8>)
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20000060 	.word	0x20000060

0800b4bc <__libc_init_array>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	4d0d      	ldr	r5, [pc, #52]	; (800b4f4 <__libc_init_array+0x38>)
 800b4c0:	4c0d      	ldr	r4, [pc, #52]	; (800b4f8 <__libc_init_array+0x3c>)
 800b4c2:	1b64      	subs	r4, r4, r5
 800b4c4:	10a4      	asrs	r4, r4, #2
 800b4c6:	2600      	movs	r6, #0
 800b4c8:	42a6      	cmp	r6, r4
 800b4ca:	d109      	bne.n	800b4e0 <__libc_init_array+0x24>
 800b4cc:	4d0b      	ldr	r5, [pc, #44]	; (800b4fc <__libc_init_array+0x40>)
 800b4ce:	4c0c      	ldr	r4, [pc, #48]	; (800b500 <__libc_init_array+0x44>)
 800b4d0:	f004 fcaa 	bl	800fe28 <_init>
 800b4d4:	1b64      	subs	r4, r4, r5
 800b4d6:	10a4      	asrs	r4, r4, #2
 800b4d8:	2600      	movs	r6, #0
 800b4da:	42a6      	cmp	r6, r4
 800b4dc:	d105      	bne.n	800b4ea <__libc_init_array+0x2e>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e4:	4798      	blx	r3
 800b4e6:	3601      	adds	r6, #1
 800b4e8:	e7ee      	b.n	800b4c8 <__libc_init_array+0xc>
 800b4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ee:	4798      	blx	r3
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	e7f2      	b.n	800b4da <__libc_init_array+0x1e>
 800b4f4:	08010788 	.word	0x08010788
 800b4f8:	08010788 	.word	0x08010788
 800b4fc:	08010788 	.word	0x08010788
 800b500:	08010790 	.word	0x08010790

0800b504 <memcpy>:
 800b504:	440a      	add	r2, r1
 800b506:	4291      	cmp	r1, r2
 800b508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b50c:	d100      	bne.n	800b510 <memcpy+0xc>
 800b50e:	4770      	bx	lr
 800b510:	b510      	push	{r4, lr}
 800b512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b51a:	4291      	cmp	r1, r2
 800b51c:	d1f9      	bne.n	800b512 <memcpy+0xe>
 800b51e:	bd10      	pop	{r4, pc}

0800b520 <memset>:
 800b520:	4402      	add	r2, r0
 800b522:	4603      	mov	r3, r0
 800b524:	4293      	cmp	r3, r2
 800b526:	d100      	bne.n	800b52a <memset+0xa>
 800b528:	4770      	bx	lr
 800b52a:	f803 1b01 	strb.w	r1, [r3], #1
 800b52e:	e7f9      	b.n	800b524 <memset+0x4>

0800b530 <__cvt>:
 800b530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	ec55 4b10 	vmov	r4, r5, d0
 800b538:	2d00      	cmp	r5, #0
 800b53a:	460e      	mov	r6, r1
 800b53c:	4619      	mov	r1, r3
 800b53e:	462b      	mov	r3, r5
 800b540:	bfbb      	ittet	lt
 800b542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b546:	461d      	movlt	r5, r3
 800b548:	2300      	movge	r3, #0
 800b54a:	232d      	movlt	r3, #45	; 0x2d
 800b54c:	700b      	strb	r3, [r1, #0]
 800b54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b554:	4691      	mov	r9, r2
 800b556:	f023 0820 	bic.w	r8, r3, #32
 800b55a:	bfbc      	itt	lt
 800b55c:	4622      	movlt	r2, r4
 800b55e:	4614      	movlt	r4, r2
 800b560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b564:	d005      	beq.n	800b572 <__cvt+0x42>
 800b566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b56a:	d100      	bne.n	800b56e <__cvt+0x3e>
 800b56c:	3601      	adds	r6, #1
 800b56e:	2102      	movs	r1, #2
 800b570:	e000      	b.n	800b574 <__cvt+0x44>
 800b572:	2103      	movs	r1, #3
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	ab02      	add	r3, sp, #8
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	4653      	mov	r3, sl
 800b582:	4632      	mov	r2, r6
 800b584:	f001 fe84 	bl	800d290 <_dtoa_r>
 800b588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b58c:	4607      	mov	r7, r0
 800b58e:	d102      	bne.n	800b596 <__cvt+0x66>
 800b590:	f019 0f01 	tst.w	r9, #1
 800b594:	d022      	beq.n	800b5dc <__cvt+0xac>
 800b596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b59a:	eb07 0906 	add.w	r9, r7, r6
 800b59e:	d110      	bne.n	800b5c2 <__cvt+0x92>
 800b5a0:	783b      	ldrb	r3, [r7, #0]
 800b5a2:	2b30      	cmp	r3, #48	; 0x30
 800b5a4:	d10a      	bne.n	800b5bc <__cvt+0x8c>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7f5 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5b2:	b918      	cbnz	r0, 800b5bc <__cvt+0x8c>
 800b5b4:	f1c6 0601 	rsb	r6, r6, #1
 800b5b8:	f8ca 6000 	str.w	r6, [sl]
 800b5bc:	f8da 3000 	ldr.w	r3, [sl]
 800b5c0:	4499      	add	r9, r3
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f5 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5ce:	b108      	cbz	r0, 800b5d4 <__cvt+0xa4>
 800b5d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5d4:	2230      	movs	r2, #48	; 0x30
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	454b      	cmp	r3, r9
 800b5da:	d307      	bcc.n	800b5ec <__cvt+0xbc>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e0:	1bdb      	subs	r3, r3, r7
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	b004      	add	sp, #16
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	1c59      	adds	r1, r3, #1
 800b5ee:	9103      	str	r1, [sp, #12]
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e7f0      	b.n	800b5d6 <__cvt+0xa6>

0800b5f4 <__exponent>:
 800b5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2900      	cmp	r1, #0
 800b5fa:	bfb8      	it	lt
 800b5fc:	4249      	neglt	r1, r1
 800b5fe:	f803 2b02 	strb.w	r2, [r3], #2
 800b602:	bfb4      	ite	lt
 800b604:	222d      	movlt	r2, #45	; 0x2d
 800b606:	222b      	movge	r2, #43	; 0x2b
 800b608:	2909      	cmp	r1, #9
 800b60a:	7042      	strb	r2, [r0, #1]
 800b60c:	dd2a      	ble.n	800b664 <__exponent+0x70>
 800b60e:	f10d 0407 	add.w	r4, sp, #7
 800b612:	46a4      	mov	ip, r4
 800b614:	270a      	movs	r7, #10
 800b616:	46a6      	mov	lr, r4
 800b618:	460a      	mov	r2, r1
 800b61a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b61e:	fb07 1516 	mls	r5, r7, r6, r1
 800b622:	3530      	adds	r5, #48	; 0x30
 800b624:	2a63      	cmp	r2, #99	; 0x63
 800b626:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b62a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b62e:	4631      	mov	r1, r6
 800b630:	dcf1      	bgt.n	800b616 <__exponent+0x22>
 800b632:	3130      	adds	r1, #48	; 0x30
 800b634:	f1ae 0502 	sub.w	r5, lr, #2
 800b638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b63c:	1c44      	adds	r4, r0, #1
 800b63e:	4629      	mov	r1, r5
 800b640:	4561      	cmp	r1, ip
 800b642:	d30a      	bcc.n	800b65a <__exponent+0x66>
 800b644:	f10d 0209 	add.w	r2, sp, #9
 800b648:	eba2 020e 	sub.w	r2, r2, lr
 800b64c:	4565      	cmp	r5, ip
 800b64e:	bf88      	it	hi
 800b650:	2200      	movhi	r2, #0
 800b652:	4413      	add	r3, r2
 800b654:	1a18      	subs	r0, r3, r0
 800b656:	b003      	add	sp, #12
 800b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b662:	e7ed      	b.n	800b640 <__exponent+0x4c>
 800b664:	2330      	movs	r3, #48	; 0x30
 800b666:	3130      	adds	r1, #48	; 0x30
 800b668:	7083      	strb	r3, [r0, #2]
 800b66a:	70c1      	strb	r1, [r0, #3]
 800b66c:	1d03      	adds	r3, r0, #4
 800b66e:	e7f1      	b.n	800b654 <__exponent+0x60>

0800b670 <_printf_float>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	ed2d 8b02 	vpush	{d8}
 800b678:	b08d      	sub	sp, #52	; 0x34
 800b67a:	460c      	mov	r4, r1
 800b67c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b680:	4616      	mov	r6, r2
 800b682:	461f      	mov	r7, r3
 800b684:	4605      	mov	r5, r0
 800b686:	f002 ff71 	bl	800e56c <_localeconv_r>
 800b68a:	f8d0 a000 	ldr.w	sl, [r0]
 800b68e:	4650      	mov	r0, sl
 800b690:	f7f4 fd9e 	bl	80001d0 <strlen>
 800b694:	2300      	movs	r3, #0
 800b696:	930a      	str	r3, [sp, #40]	; 0x28
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	f103 0208 	add.w	r2, r3, #8
 800b6ae:	f8c8 2000 	str.w	r2, [r8]
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b6ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b6be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6c2:	9307      	str	r3, [sp, #28]
 800b6c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6c8:	ee08 0a10 	vmov	s16, r0
 800b6cc:	4b9f      	ldr	r3, [pc, #636]	; (800b94c <_printf_float+0x2dc>)
 800b6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d6:	f7f5 fa29 	bl	8000b2c <__aeabi_dcmpun>
 800b6da:	bb88      	cbnz	r0, 800b740 <_printf_float+0xd0>
 800b6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6e0:	4b9a      	ldr	r3, [pc, #616]	; (800b94c <_printf_float+0x2dc>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6e6:	f7f5 fa03 	bl	8000af0 <__aeabi_dcmple>
 800b6ea:	bb48      	cbnz	r0, 800b740 <_printf_float+0xd0>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 f9f2 	bl	8000adc <__aeabi_dcmplt>
 800b6f8:	b110      	cbz	r0, 800b700 <_printf_float+0x90>
 800b6fa:	232d      	movs	r3, #45	; 0x2d
 800b6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b700:	4b93      	ldr	r3, [pc, #588]	; (800b950 <_printf_float+0x2e0>)
 800b702:	4894      	ldr	r0, [pc, #592]	; (800b954 <_printf_float+0x2e4>)
 800b704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b708:	bf94      	ite	ls
 800b70a:	4698      	movls	r8, r3
 800b70c:	4680      	movhi	r8, r0
 800b70e:	2303      	movs	r3, #3
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	f023 0204 	bic.w	r2, r3, #4
 800b718:	6022      	str	r2, [r4, #0]
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	9700      	str	r7, [sp, #0]
 800b720:	4633      	mov	r3, r6
 800b722:	aa0b      	add	r2, sp, #44	; 0x2c
 800b724:	4621      	mov	r1, r4
 800b726:	4628      	mov	r0, r5
 800b728:	f000 f9d8 	bl	800badc <_printf_common>
 800b72c:	3001      	adds	r0, #1
 800b72e:	f040 8090 	bne.w	800b852 <_printf_float+0x1e2>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b736:	b00d      	add	sp, #52	; 0x34
 800b738:	ecbd 8b02 	vpop	{d8}
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	4642      	mov	r2, r8
 800b742:	464b      	mov	r3, r9
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	f7f5 f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800b74c:	b140      	cbz	r0, 800b760 <_printf_float+0xf0>
 800b74e:	464b      	mov	r3, r9
 800b750:	2b00      	cmp	r3, #0
 800b752:	bfbc      	itt	lt
 800b754:	232d      	movlt	r3, #45	; 0x2d
 800b756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b75a:	487f      	ldr	r0, [pc, #508]	; (800b958 <_printf_float+0x2e8>)
 800b75c:	4b7f      	ldr	r3, [pc, #508]	; (800b95c <_printf_float+0x2ec>)
 800b75e:	e7d1      	b.n	800b704 <_printf_float+0x94>
 800b760:	6863      	ldr	r3, [r4, #4]
 800b762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b766:	9206      	str	r2, [sp, #24]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	d13f      	bne.n	800b7ec <_printf_float+0x17c>
 800b76c:	2306      	movs	r3, #6
 800b76e:	6063      	str	r3, [r4, #4]
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	6861      	ldr	r1, [r4, #4]
 800b774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b778:	2300      	movs	r3, #0
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	ab0a      	add	r3, sp, #40	; 0x28
 800b77e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b782:	ab09      	add	r3, sp, #36	; 0x24
 800b784:	ec49 8b10 	vmov	d0, r8, r9
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b790:	4628      	mov	r0, r5
 800b792:	f7ff fecd 	bl	800b530 <__cvt>
 800b796:	9b06      	ldr	r3, [sp, #24]
 800b798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b79a:	2b47      	cmp	r3, #71	; 0x47
 800b79c:	4680      	mov	r8, r0
 800b79e:	d108      	bne.n	800b7b2 <_printf_float+0x142>
 800b7a0:	1cc8      	adds	r0, r1, #3
 800b7a2:	db02      	blt.n	800b7aa <_printf_float+0x13a>
 800b7a4:	6863      	ldr	r3, [r4, #4]
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	dd41      	ble.n	800b82e <_printf_float+0x1be>
 800b7aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800b7ae:	fa5f fb8b 	uxtb.w	fp, fp
 800b7b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7b6:	d820      	bhi.n	800b7fa <_printf_float+0x18a>
 800b7b8:	3901      	subs	r1, #1
 800b7ba:	465a      	mov	r2, fp
 800b7bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b7c2:	f7ff ff17 	bl	800b5f4 <__exponent>
 800b7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c8:	1813      	adds	r3, r2, r0
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	4681      	mov	r9, r0
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	dc02      	bgt.n	800b7d8 <_printf_float+0x168>
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	07d2      	lsls	r2, r2, #31
 800b7d6:	d501      	bpl.n	800b7dc <_printf_float+0x16c>
 800b7d8:	3301      	adds	r3, #1
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d09c      	beq.n	800b71e <_printf_float+0xae>
 800b7e4:	232d      	movs	r3, #45	; 0x2d
 800b7e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ea:	e798      	b.n	800b71e <_printf_float+0xae>
 800b7ec:	9a06      	ldr	r2, [sp, #24]
 800b7ee:	2a47      	cmp	r2, #71	; 0x47
 800b7f0:	d1be      	bne.n	800b770 <_printf_float+0x100>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1bc      	bne.n	800b770 <_printf_float+0x100>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7b9      	b.n	800b76e <_printf_float+0xfe>
 800b7fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7fe:	d118      	bne.n	800b832 <_printf_float+0x1c2>
 800b800:	2900      	cmp	r1, #0
 800b802:	6863      	ldr	r3, [r4, #4]
 800b804:	dd0b      	ble.n	800b81e <_printf_float+0x1ae>
 800b806:	6121      	str	r1, [r4, #16]
 800b808:	b913      	cbnz	r3, 800b810 <_printf_float+0x1a0>
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d502      	bpl.n	800b816 <_printf_float+0x1a6>
 800b810:	3301      	adds	r3, #1
 800b812:	440b      	add	r3, r1
 800b814:	6123      	str	r3, [r4, #16]
 800b816:	65a1      	str	r1, [r4, #88]	; 0x58
 800b818:	f04f 0900 	mov.w	r9, #0
 800b81c:	e7de      	b.n	800b7dc <_printf_float+0x16c>
 800b81e:	b913      	cbnz	r3, 800b826 <_printf_float+0x1b6>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	07d2      	lsls	r2, r2, #31
 800b824:	d501      	bpl.n	800b82a <_printf_float+0x1ba>
 800b826:	3302      	adds	r3, #2
 800b828:	e7f4      	b.n	800b814 <_printf_float+0x1a4>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e7f2      	b.n	800b814 <_printf_float+0x1a4>
 800b82e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b834:	4299      	cmp	r1, r3
 800b836:	db05      	blt.n	800b844 <_printf_float+0x1d4>
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	6121      	str	r1, [r4, #16]
 800b83c:	07d8      	lsls	r0, r3, #31
 800b83e:	d5ea      	bpl.n	800b816 <_printf_float+0x1a6>
 800b840:	1c4b      	adds	r3, r1, #1
 800b842:	e7e7      	b.n	800b814 <_printf_float+0x1a4>
 800b844:	2900      	cmp	r1, #0
 800b846:	bfd4      	ite	le
 800b848:	f1c1 0202 	rsble	r2, r1, #2
 800b84c:	2201      	movgt	r2, #1
 800b84e:	4413      	add	r3, r2
 800b850:	e7e0      	b.n	800b814 <_printf_float+0x1a4>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	055a      	lsls	r2, r3, #21
 800b856:	d407      	bmi.n	800b868 <_printf_float+0x1f8>
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	4642      	mov	r2, r8
 800b85c:	4631      	mov	r1, r6
 800b85e:	4628      	mov	r0, r5
 800b860:	47b8      	blx	r7
 800b862:	3001      	adds	r0, #1
 800b864:	d12c      	bne.n	800b8c0 <_printf_float+0x250>
 800b866:	e764      	b.n	800b732 <_printf_float+0xc2>
 800b868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b86c:	f240 80e0 	bls.w	800ba30 <_printf_float+0x3c0>
 800b870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b874:	2200      	movs	r2, #0
 800b876:	2300      	movs	r3, #0
 800b878:	f7f5 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d034      	beq.n	800b8ea <_printf_float+0x27a>
 800b880:	4a37      	ldr	r2, [pc, #220]	; (800b960 <_printf_float+0x2f0>)
 800b882:	2301      	movs	r3, #1
 800b884:	4631      	mov	r1, r6
 800b886:	4628      	mov	r0, r5
 800b888:	47b8      	blx	r7
 800b88a:	3001      	adds	r0, #1
 800b88c:	f43f af51 	beq.w	800b732 <_printf_float+0xc2>
 800b890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b894:	429a      	cmp	r2, r3
 800b896:	db02      	blt.n	800b89e <_printf_float+0x22e>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	07d8      	lsls	r0, r3, #31
 800b89c:	d510      	bpl.n	800b8c0 <_printf_float+0x250>
 800b89e:	ee18 3a10 	vmov	r3, s16
 800b8a2:	4652      	mov	r2, sl
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	f43f af41 	beq.w	800b732 <_printf_float+0xc2>
 800b8b0:	f04f 0800 	mov.w	r8, #0
 800b8b4:	f104 091a 	add.w	r9, r4, #26
 800b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4543      	cmp	r3, r8
 800b8be:	dc09      	bgt.n	800b8d4 <_printf_float+0x264>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	079b      	lsls	r3, r3, #30
 800b8c4:	f100 8105 	bmi.w	800bad2 <_printf_float+0x462>
 800b8c8:	68e0      	ldr	r0, [r4, #12]
 800b8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8cc:	4298      	cmp	r0, r3
 800b8ce:	bfb8      	it	lt
 800b8d0:	4618      	movlt	r0, r3
 800b8d2:	e730      	b.n	800b736 <_printf_float+0xc6>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b8      	blx	r7
 800b8de:	3001      	adds	r0, #1
 800b8e0:	f43f af27 	beq.w	800b732 <_printf_float+0xc2>
 800b8e4:	f108 0801 	add.w	r8, r8, #1
 800b8e8:	e7e6      	b.n	800b8b8 <_printf_float+0x248>
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dc39      	bgt.n	800b964 <_printf_float+0x2f4>
 800b8f0:	4a1b      	ldr	r2, [pc, #108]	; (800b960 <_printf_float+0x2f0>)
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b8      	blx	r7
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	f43f af19 	beq.w	800b732 <_printf_float+0xc2>
 800b900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b904:	4313      	orrs	r3, r2
 800b906:	d102      	bne.n	800b90e <_printf_float+0x29e>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d5d8      	bpl.n	800b8c0 <_printf_float+0x250>
 800b90e:	ee18 3a10 	vmov	r3, s16
 800b912:	4652      	mov	r2, sl
 800b914:	4631      	mov	r1, r6
 800b916:	4628      	mov	r0, r5
 800b918:	47b8      	blx	r7
 800b91a:	3001      	adds	r0, #1
 800b91c:	f43f af09 	beq.w	800b732 <_printf_float+0xc2>
 800b920:	f04f 0900 	mov.w	r9, #0
 800b924:	f104 0a1a 	add.w	sl, r4, #26
 800b928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92a:	425b      	negs	r3, r3
 800b92c:	454b      	cmp	r3, r9
 800b92e:	dc01      	bgt.n	800b934 <_printf_float+0x2c4>
 800b930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b932:	e792      	b.n	800b85a <_printf_float+0x1ea>
 800b934:	2301      	movs	r3, #1
 800b936:	4652      	mov	r2, sl
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	47b8      	blx	r7
 800b93e:	3001      	adds	r0, #1
 800b940:	f43f aef7 	beq.w	800b732 <_printf_float+0xc2>
 800b944:	f109 0901 	add.w	r9, r9, #1
 800b948:	e7ee      	b.n	800b928 <_printf_float+0x2b8>
 800b94a:	bf00      	nop
 800b94c:	7fefffff 	.word	0x7fefffff
 800b950:	08010274 	.word	0x08010274
 800b954:	08010278 	.word	0x08010278
 800b958:	08010280 	.word	0x08010280
 800b95c:	0801027c 	.word	0x0801027c
 800b960:	08010284 	.word	0x08010284
 800b964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b968:	429a      	cmp	r2, r3
 800b96a:	bfa8      	it	ge
 800b96c:	461a      	movge	r2, r3
 800b96e:	2a00      	cmp	r2, #0
 800b970:	4691      	mov	r9, r2
 800b972:	dc37      	bgt.n	800b9e4 <_printf_float+0x374>
 800b974:	f04f 0b00 	mov.w	fp, #0
 800b978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b97c:	f104 021a 	add.w	r2, r4, #26
 800b980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b982:	9305      	str	r3, [sp, #20]
 800b984:	eba3 0309 	sub.w	r3, r3, r9
 800b988:	455b      	cmp	r3, fp
 800b98a:	dc33      	bgt.n	800b9f4 <_printf_float+0x384>
 800b98c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b990:	429a      	cmp	r2, r3
 800b992:	db3b      	blt.n	800ba0c <_printf_float+0x39c>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	07da      	lsls	r2, r3, #31
 800b998:	d438      	bmi.n	800ba0c <_printf_float+0x39c>
 800b99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	eba2 0901 	sub.w	r9, r2, r1
 800b9a6:	4599      	cmp	r9, r3
 800b9a8:	bfa8      	it	ge
 800b9aa:	4699      	movge	r9, r3
 800b9ac:	f1b9 0f00 	cmp.w	r9, #0
 800b9b0:	dc35      	bgt.n	800ba1e <_printf_float+0x3ae>
 800b9b2:	f04f 0800 	mov.w	r8, #0
 800b9b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9ba:	f104 0a1a 	add.w	sl, r4, #26
 800b9be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c2:	1a9b      	subs	r3, r3, r2
 800b9c4:	eba3 0309 	sub.w	r3, r3, r9
 800b9c8:	4543      	cmp	r3, r8
 800b9ca:	f77f af79 	ble.w	800b8c0 <_printf_float+0x250>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4652      	mov	r2, sl
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b8      	blx	r7
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f43f aeaa 	beq.w	800b732 <_printf_float+0xc2>
 800b9de:	f108 0801 	add.w	r8, r8, #1
 800b9e2:	e7ec      	b.n	800b9be <_printf_float+0x34e>
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d1c0      	bne.n	800b974 <_printf_float+0x304>
 800b9f2:	e69e      	b.n	800b732 <_printf_float+0xc2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	9205      	str	r2, [sp, #20]
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f ae97 	beq.w	800b732 <_printf_float+0xc2>
 800ba04:	9a05      	ldr	r2, [sp, #20]
 800ba06:	f10b 0b01 	add.w	fp, fp, #1
 800ba0a:	e7b9      	b.n	800b980 <_printf_float+0x310>
 800ba0c:	ee18 3a10 	vmov	r3, s16
 800ba10:	4652      	mov	r2, sl
 800ba12:	4631      	mov	r1, r6
 800ba14:	4628      	mov	r0, r5
 800ba16:	47b8      	blx	r7
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d1be      	bne.n	800b99a <_printf_float+0x32a>
 800ba1c:	e689      	b.n	800b732 <_printf_float+0xc2>
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	464b      	mov	r3, r9
 800ba22:	4442      	add	r2, r8
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d1c1      	bne.n	800b9b2 <_printf_float+0x342>
 800ba2e:	e680      	b.n	800b732 <_printf_float+0xc2>
 800ba30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba32:	2a01      	cmp	r2, #1
 800ba34:	dc01      	bgt.n	800ba3a <_printf_float+0x3ca>
 800ba36:	07db      	lsls	r3, r3, #31
 800ba38:	d538      	bpl.n	800baac <_printf_float+0x43c>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b8      	blx	r7
 800ba44:	3001      	adds	r0, #1
 800ba46:	f43f ae74 	beq.w	800b732 <_printf_float+0xc2>
 800ba4a:	ee18 3a10 	vmov	r3, s16
 800ba4e:	4652      	mov	r2, sl
 800ba50:	4631      	mov	r1, r6
 800ba52:	4628      	mov	r0, r5
 800ba54:	47b8      	blx	r7
 800ba56:	3001      	adds	r0, #1
 800ba58:	f43f ae6b 	beq.w	800b732 <_printf_float+0xc2>
 800ba5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	f7f5 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba68:	b9d8      	cbnz	r0, 800baa2 <_printf_float+0x432>
 800ba6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6c:	f108 0201 	add.w	r2, r8, #1
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4631      	mov	r1, r6
 800ba74:	4628      	mov	r0, r5
 800ba76:	47b8      	blx	r7
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d10e      	bne.n	800ba9a <_printf_float+0x42a>
 800ba7c:	e659      	b.n	800b732 <_printf_float+0xc2>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	4652      	mov	r2, sl
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b8      	blx	r7
 800ba88:	3001      	adds	r0, #1
 800ba8a:	f43f ae52 	beq.w	800b732 <_printf_float+0xc2>
 800ba8e:	f108 0801 	add.w	r8, r8, #1
 800ba92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba94:	3b01      	subs	r3, #1
 800ba96:	4543      	cmp	r3, r8
 800ba98:	dcf1      	bgt.n	800ba7e <_printf_float+0x40e>
 800ba9a:	464b      	mov	r3, r9
 800ba9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800baa0:	e6dc      	b.n	800b85c <_printf_float+0x1ec>
 800baa2:	f04f 0800 	mov.w	r8, #0
 800baa6:	f104 0a1a 	add.w	sl, r4, #26
 800baaa:	e7f2      	b.n	800ba92 <_printf_float+0x422>
 800baac:	2301      	movs	r3, #1
 800baae:	4642      	mov	r2, r8
 800bab0:	e7df      	b.n	800ba72 <_printf_float+0x402>
 800bab2:	2301      	movs	r3, #1
 800bab4:	464a      	mov	r2, r9
 800bab6:	4631      	mov	r1, r6
 800bab8:	4628      	mov	r0, r5
 800baba:	47b8      	blx	r7
 800babc:	3001      	adds	r0, #1
 800babe:	f43f ae38 	beq.w	800b732 <_printf_float+0xc2>
 800bac2:	f108 0801 	add.w	r8, r8, #1
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baca:	1a5b      	subs	r3, r3, r1
 800bacc:	4543      	cmp	r3, r8
 800bace:	dcf0      	bgt.n	800bab2 <_printf_float+0x442>
 800bad0:	e6fa      	b.n	800b8c8 <_printf_float+0x258>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	f104 0919 	add.w	r9, r4, #25
 800bada:	e7f4      	b.n	800bac6 <_printf_float+0x456>

0800badc <_printf_common>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	4616      	mov	r6, r2
 800bae2:	4699      	mov	r9, r3
 800bae4:	688a      	ldr	r2, [r1, #8]
 800bae6:	690b      	ldr	r3, [r1, #16]
 800bae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baec:	4293      	cmp	r3, r2
 800baee:	bfb8      	it	lt
 800baf0:	4613      	movlt	r3, r2
 800baf2:	6033      	str	r3, [r6, #0]
 800baf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf8:	4607      	mov	r7, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	b10a      	cbz	r2, 800bb02 <_printf_common+0x26>
 800bafe:	3301      	adds	r3, #1
 800bb00:	6033      	str	r3, [r6, #0]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	0699      	lsls	r1, r3, #26
 800bb06:	bf42      	ittt	mi
 800bb08:	6833      	ldrmi	r3, [r6, #0]
 800bb0a:	3302      	addmi	r3, #2
 800bb0c:	6033      	strmi	r3, [r6, #0]
 800bb0e:	6825      	ldr	r5, [r4, #0]
 800bb10:	f015 0506 	ands.w	r5, r5, #6
 800bb14:	d106      	bne.n	800bb24 <_printf_common+0x48>
 800bb16:	f104 0a19 	add.w	sl, r4, #25
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	6832      	ldr	r2, [r6, #0]
 800bb1e:	1a9b      	subs	r3, r3, r2
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	dc26      	bgt.n	800bb72 <_printf_common+0x96>
 800bb24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb28:	1e13      	subs	r3, r2, #0
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	bf18      	it	ne
 800bb2e:	2301      	movne	r3, #1
 800bb30:	0692      	lsls	r2, r2, #26
 800bb32:	d42b      	bmi.n	800bb8c <_printf_common+0xb0>
 800bb34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb38:	4649      	mov	r1, r9
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	47c0      	blx	r8
 800bb3e:	3001      	adds	r0, #1
 800bb40:	d01e      	beq.n	800bb80 <_printf_common+0xa4>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	68e5      	ldr	r5, [r4, #12]
 800bb46:	6832      	ldr	r2, [r6, #0]
 800bb48:	f003 0306 	and.w	r3, r3, #6
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	bf08      	it	eq
 800bb50:	1aad      	subeq	r5, r5, r2
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	6922      	ldr	r2, [r4, #16]
 800bb56:	bf0c      	ite	eq
 800bb58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb5c:	2500      	movne	r5, #0
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	bfc4      	itt	gt
 800bb62:	1a9b      	subgt	r3, r3, r2
 800bb64:	18ed      	addgt	r5, r5, r3
 800bb66:	2600      	movs	r6, #0
 800bb68:	341a      	adds	r4, #26
 800bb6a:	42b5      	cmp	r5, r6
 800bb6c:	d11a      	bne.n	800bba4 <_printf_common+0xc8>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	e008      	b.n	800bb84 <_printf_common+0xa8>
 800bb72:	2301      	movs	r3, #1
 800bb74:	4652      	mov	r2, sl
 800bb76:	4649      	mov	r1, r9
 800bb78:	4638      	mov	r0, r7
 800bb7a:	47c0      	blx	r8
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d103      	bne.n	800bb88 <_printf_common+0xac>
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb88:	3501      	adds	r5, #1
 800bb8a:	e7c6      	b.n	800bb1a <_printf_common+0x3e>
 800bb8c:	18e1      	adds	r1, r4, r3
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	2030      	movs	r0, #48	; 0x30
 800bb92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb96:	4422      	add	r2, r4
 800bb98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bba0:	3302      	adds	r3, #2
 800bba2:	e7c7      	b.n	800bb34 <_printf_common+0x58>
 800bba4:	2301      	movs	r3, #1
 800bba6:	4622      	mov	r2, r4
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4638      	mov	r0, r7
 800bbac:	47c0      	blx	r8
 800bbae:	3001      	adds	r0, #1
 800bbb0:	d0e6      	beq.n	800bb80 <_printf_common+0xa4>
 800bbb2:	3601      	adds	r6, #1
 800bbb4:	e7d9      	b.n	800bb6a <_printf_common+0x8e>
	...

0800bbb8 <_printf_i>:
 800bbb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	4691      	mov	r9, r2
 800bbc0:	7e27      	ldrb	r7, [r4, #24]
 800bbc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbc4:	2f78      	cmp	r7, #120	; 0x78
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	469a      	mov	sl, r3
 800bbca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbce:	d807      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbd0:	2f62      	cmp	r7, #98	; 0x62
 800bbd2:	d80a      	bhi.n	800bbea <_printf_i+0x32>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	f000 80d8 	beq.w	800bd8a <_printf_i+0x1d2>
 800bbda:	2f58      	cmp	r7, #88	; 0x58
 800bbdc:	f000 80a3 	beq.w	800bd26 <_printf_i+0x16e>
 800bbe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbe8:	e03a      	b.n	800bc60 <_printf_i+0xa8>
 800bbea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbee:	2b15      	cmp	r3, #21
 800bbf0:	d8f6      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbf2:	a001      	add	r0, pc, #4	; (adr r0, 800bbf8 <_printf_i+0x40>)
 800bbf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bbf8:	0800bc51 	.word	0x0800bc51
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bbe1 	.word	0x0800bbe1
 800bc04:	0800bbe1 	.word	0x0800bbe1
 800bc08:	0800bbe1 	.word	0x0800bbe1
 800bc0c:	0800bbe1 	.word	0x0800bbe1
 800bc10:	0800bc65 	.word	0x0800bc65
 800bc14:	0800bbe1 	.word	0x0800bbe1
 800bc18:	0800bbe1 	.word	0x0800bbe1
 800bc1c:	0800bbe1 	.word	0x0800bbe1
 800bc20:	0800bbe1 	.word	0x0800bbe1
 800bc24:	0800bd71 	.word	0x0800bd71
 800bc28:	0800bc95 	.word	0x0800bc95
 800bc2c:	0800bd53 	.word	0x0800bd53
 800bc30:	0800bbe1 	.word	0x0800bbe1
 800bc34:	0800bbe1 	.word	0x0800bbe1
 800bc38:	0800bd93 	.word	0x0800bd93
 800bc3c:	0800bbe1 	.word	0x0800bbe1
 800bc40:	0800bc95 	.word	0x0800bc95
 800bc44:	0800bbe1 	.word	0x0800bbe1
 800bc48:	0800bbe1 	.word	0x0800bbe1
 800bc4c:	0800bd5b 	.word	0x0800bd5b
 800bc50:	680b      	ldr	r3, [r1, #0]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	600a      	str	r2, [r1, #0]
 800bc58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc60:	2301      	movs	r3, #1
 800bc62:	e0a3      	b.n	800bdac <_printf_i+0x1f4>
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	6808      	ldr	r0, [r1, #0]
 800bc68:	062e      	lsls	r6, r5, #24
 800bc6a:	f100 0304 	add.w	r3, r0, #4
 800bc6e:	d50a      	bpl.n	800bc86 <_printf_i+0xce>
 800bc70:	6805      	ldr	r5, [r0, #0]
 800bc72:	600b      	str	r3, [r1, #0]
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	da03      	bge.n	800bc80 <_printf_i+0xc8>
 800bc78:	232d      	movs	r3, #45	; 0x2d
 800bc7a:	426d      	negs	r5, r5
 800bc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc80:	485e      	ldr	r0, [pc, #376]	; (800bdfc <_printf_i+0x244>)
 800bc82:	230a      	movs	r3, #10
 800bc84:	e019      	b.n	800bcba <_printf_i+0x102>
 800bc86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc8a:	6805      	ldr	r5, [r0, #0]
 800bc8c:	600b      	str	r3, [r1, #0]
 800bc8e:	bf18      	it	ne
 800bc90:	b22d      	sxthne	r5, r5
 800bc92:	e7ef      	b.n	800bc74 <_printf_i+0xbc>
 800bc94:	680b      	ldr	r3, [r1, #0]
 800bc96:	6825      	ldr	r5, [r4, #0]
 800bc98:	1d18      	adds	r0, r3, #4
 800bc9a:	6008      	str	r0, [r1, #0]
 800bc9c:	0628      	lsls	r0, r5, #24
 800bc9e:	d501      	bpl.n	800bca4 <_printf_i+0xec>
 800bca0:	681d      	ldr	r5, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <_printf_i+0xf2>
 800bca4:	0669      	lsls	r1, r5, #25
 800bca6:	d5fb      	bpl.n	800bca0 <_printf_i+0xe8>
 800bca8:	881d      	ldrh	r5, [r3, #0]
 800bcaa:	4854      	ldr	r0, [pc, #336]	; (800bdfc <_printf_i+0x244>)
 800bcac:	2f6f      	cmp	r7, #111	; 0x6f
 800bcae:	bf0c      	ite	eq
 800bcb0:	2308      	moveq	r3, #8
 800bcb2:	230a      	movne	r3, #10
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcba:	6866      	ldr	r6, [r4, #4]
 800bcbc:	60a6      	str	r6, [r4, #8]
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	bfa2      	ittt	ge
 800bcc2:	6821      	ldrge	r1, [r4, #0]
 800bcc4:	f021 0104 	bicge.w	r1, r1, #4
 800bcc8:	6021      	strge	r1, [r4, #0]
 800bcca:	b90d      	cbnz	r5, 800bcd0 <_printf_i+0x118>
 800bccc:	2e00      	cmp	r6, #0
 800bcce:	d04d      	beq.n	800bd6c <_printf_i+0x1b4>
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcd6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcda:	5dc7      	ldrb	r7, [r0, r7]
 800bcdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bce0:	462f      	mov	r7, r5
 800bce2:	42bb      	cmp	r3, r7
 800bce4:	460d      	mov	r5, r1
 800bce6:	d9f4      	bls.n	800bcd2 <_printf_i+0x11a>
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d10b      	bne.n	800bd04 <_printf_i+0x14c>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	07df      	lsls	r7, r3, #31
 800bcf0:	d508      	bpl.n	800bd04 <_printf_i+0x14c>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	6861      	ldr	r1, [r4, #4]
 800bcf6:	4299      	cmp	r1, r3
 800bcf8:	bfde      	ittt	le
 800bcfa:	2330      	movle	r3, #48	; 0x30
 800bcfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd00:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bd04:	1b92      	subs	r2, r2, r6
 800bd06:	6122      	str	r2, [r4, #16]
 800bd08:	f8cd a000 	str.w	sl, [sp]
 800bd0c:	464b      	mov	r3, r9
 800bd0e:	aa03      	add	r2, sp, #12
 800bd10:	4621      	mov	r1, r4
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7ff fee2 	bl	800badc <_printf_common>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d14c      	bne.n	800bdb6 <_printf_i+0x1fe>
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd20:	b004      	add	sp, #16
 800bd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd26:	4835      	ldr	r0, [pc, #212]	; (800bdfc <_printf_i+0x244>)
 800bd28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	680e      	ldr	r6, [r1, #0]
 800bd30:	061f      	lsls	r7, r3, #24
 800bd32:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd36:	600e      	str	r6, [r1, #0]
 800bd38:	d514      	bpl.n	800bd64 <_printf_i+0x1ac>
 800bd3a:	07d9      	lsls	r1, r3, #31
 800bd3c:	bf44      	itt	mi
 800bd3e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd42:	6023      	strmi	r3, [r4, #0]
 800bd44:	b91d      	cbnz	r5, 800bd4e <_printf_i+0x196>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	f023 0320 	bic.w	r3, r3, #32
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	2310      	movs	r3, #16
 800bd50:	e7b0      	b.n	800bcb4 <_printf_i+0xfc>
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	f043 0320 	orr.w	r3, r3, #32
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	2378      	movs	r3, #120	; 0x78
 800bd5c:	4828      	ldr	r0, [pc, #160]	; (800be00 <_printf_i+0x248>)
 800bd5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd62:	e7e3      	b.n	800bd2c <_printf_i+0x174>
 800bd64:	065e      	lsls	r6, r3, #25
 800bd66:	bf48      	it	mi
 800bd68:	b2ad      	uxthmi	r5, r5
 800bd6a:	e7e6      	b.n	800bd3a <_printf_i+0x182>
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	e7bb      	b.n	800bce8 <_printf_i+0x130>
 800bd70:	680b      	ldr	r3, [r1, #0]
 800bd72:	6826      	ldr	r6, [r4, #0]
 800bd74:	6960      	ldr	r0, [r4, #20]
 800bd76:	1d1d      	adds	r5, r3, #4
 800bd78:	600d      	str	r5, [r1, #0]
 800bd7a:	0635      	lsls	r5, r6, #24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	d501      	bpl.n	800bd84 <_printf_i+0x1cc>
 800bd80:	6018      	str	r0, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <_printf_i+0x1d2>
 800bd84:	0671      	lsls	r1, r6, #25
 800bd86:	d5fb      	bpl.n	800bd80 <_printf_i+0x1c8>
 800bd88:	8018      	strh	r0, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	4616      	mov	r6, r2
 800bd90:	e7ba      	b.n	800bd08 <_printf_i+0x150>
 800bd92:	680b      	ldr	r3, [r1, #0]
 800bd94:	1d1a      	adds	r2, r3, #4
 800bd96:	600a      	str	r2, [r1, #0]
 800bd98:	681e      	ldr	r6, [r3, #0]
 800bd9a:	6862      	ldr	r2, [r4, #4]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7f4 fa1e 	bl	80001e0 <memchr>
 800bda4:	b108      	cbz	r0, 800bdaa <_printf_i+0x1f2>
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	6060      	str	r0, [r4, #4]
 800bdaa:	6863      	ldr	r3, [r4, #4]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb4:	e7a8      	b.n	800bd08 <_printf_i+0x150>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	47d0      	blx	sl
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d0ab      	beq.n	800bd1c <_printf_i+0x164>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	079b      	lsls	r3, r3, #30
 800bdc8:	d413      	bmi.n	800bdf2 <_printf_i+0x23a>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	4298      	cmp	r0, r3
 800bdd0:	bfb8      	it	lt
 800bdd2:	4618      	movlt	r0, r3
 800bdd4:	e7a4      	b.n	800bd20 <_printf_i+0x168>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4649      	mov	r1, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	47d0      	blx	sl
 800bde0:	3001      	adds	r0, #1
 800bde2:	d09b      	beq.n	800bd1c <_printf_i+0x164>
 800bde4:	3501      	adds	r5, #1
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	9903      	ldr	r1, [sp, #12]
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dcf2      	bgt.n	800bdd6 <_printf_i+0x21e>
 800bdf0:	e7eb      	b.n	800bdca <_printf_i+0x212>
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	f104 0619 	add.w	r6, r4, #25
 800bdf8:	e7f5      	b.n	800bde6 <_printf_i+0x22e>
 800bdfa:	bf00      	nop
 800bdfc:	08010286 	.word	0x08010286
 800be00:	08010297 	.word	0x08010297

0800be04 <_scanf_float>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	b087      	sub	sp, #28
 800be0a:	4617      	mov	r7, r2
 800be0c:	9303      	str	r3, [sp, #12]
 800be0e:	688b      	ldr	r3, [r1, #8]
 800be10:	1e5a      	subs	r2, r3, #1
 800be12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be16:	bf83      	ittte	hi
 800be18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be1c:	195b      	addhi	r3, r3, r5
 800be1e:	9302      	strhi	r3, [sp, #8]
 800be20:	2300      	movls	r3, #0
 800be22:	bf86      	itte	hi
 800be24:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be28:	608b      	strhi	r3, [r1, #8]
 800be2a:	9302      	strls	r3, [sp, #8]
 800be2c:	680b      	ldr	r3, [r1, #0]
 800be2e:	468b      	mov	fp, r1
 800be30:	2500      	movs	r5, #0
 800be32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800be36:	f84b 3b1c 	str.w	r3, [fp], #28
 800be3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be3e:	4680      	mov	r8, r0
 800be40:	460c      	mov	r4, r1
 800be42:	465e      	mov	r6, fp
 800be44:	46aa      	mov	sl, r5
 800be46:	46a9      	mov	r9, r5
 800be48:	9501      	str	r5, [sp, #4]
 800be4a:	68a2      	ldr	r2, [r4, #8]
 800be4c:	b152      	cbz	r2, 800be64 <_scanf_float+0x60>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b4e      	cmp	r3, #78	; 0x4e
 800be54:	d864      	bhi.n	800bf20 <_scanf_float+0x11c>
 800be56:	2b40      	cmp	r3, #64	; 0x40
 800be58:	d83c      	bhi.n	800bed4 <_scanf_float+0xd0>
 800be5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800be5e:	b2c8      	uxtb	r0, r1
 800be60:	280e      	cmp	r0, #14
 800be62:	d93a      	bls.n	800beda <_scanf_float+0xd6>
 800be64:	f1b9 0f00 	cmp.w	r9, #0
 800be68:	d003      	beq.n	800be72 <_scanf_float+0x6e>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800be76:	f1ba 0f01 	cmp.w	sl, #1
 800be7a:	f200 8113 	bhi.w	800c0a4 <_scanf_float+0x2a0>
 800be7e:	455e      	cmp	r6, fp
 800be80:	f200 8105 	bhi.w	800c08e <_scanf_float+0x28a>
 800be84:	2501      	movs	r5, #1
 800be86:	4628      	mov	r0, r5
 800be88:	b007      	add	sp, #28
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800be92:	2a0d      	cmp	r2, #13
 800be94:	d8e6      	bhi.n	800be64 <_scanf_float+0x60>
 800be96:	a101      	add	r1, pc, #4	; (adr r1, 800be9c <_scanf_float+0x98>)
 800be98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be9c:	0800bfdb 	.word	0x0800bfdb
 800bea0:	0800be65 	.word	0x0800be65
 800bea4:	0800be65 	.word	0x0800be65
 800bea8:	0800be65 	.word	0x0800be65
 800beac:	0800c03b 	.word	0x0800c03b
 800beb0:	0800c013 	.word	0x0800c013
 800beb4:	0800be65 	.word	0x0800be65
 800beb8:	0800be65 	.word	0x0800be65
 800bebc:	0800bfe9 	.word	0x0800bfe9
 800bec0:	0800be65 	.word	0x0800be65
 800bec4:	0800be65 	.word	0x0800be65
 800bec8:	0800be65 	.word	0x0800be65
 800becc:	0800be65 	.word	0x0800be65
 800bed0:	0800bfa1 	.word	0x0800bfa1
 800bed4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bed8:	e7db      	b.n	800be92 <_scanf_float+0x8e>
 800beda:	290e      	cmp	r1, #14
 800bedc:	d8c2      	bhi.n	800be64 <_scanf_float+0x60>
 800bede:	a001      	add	r0, pc, #4	; (adr r0, 800bee4 <_scanf_float+0xe0>)
 800bee0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bee4:	0800bf93 	.word	0x0800bf93
 800bee8:	0800be65 	.word	0x0800be65
 800beec:	0800bf93 	.word	0x0800bf93
 800bef0:	0800c027 	.word	0x0800c027
 800bef4:	0800be65 	.word	0x0800be65
 800bef8:	0800bf41 	.word	0x0800bf41
 800befc:	0800bf7d 	.word	0x0800bf7d
 800bf00:	0800bf7d 	.word	0x0800bf7d
 800bf04:	0800bf7d 	.word	0x0800bf7d
 800bf08:	0800bf7d 	.word	0x0800bf7d
 800bf0c:	0800bf7d 	.word	0x0800bf7d
 800bf10:	0800bf7d 	.word	0x0800bf7d
 800bf14:	0800bf7d 	.word	0x0800bf7d
 800bf18:	0800bf7d 	.word	0x0800bf7d
 800bf1c:	0800bf7d 	.word	0x0800bf7d
 800bf20:	2b6e      	cmp	r3, #110	; 0x6e
 800bf22:	d809      	bhi.n	800bf38 <_scanf_float+0x134>
 800bf24:	2b60      	cmp	r3, #96	; 0x60
 800bf26:	d8b2      	bhi.n	800be8e <_scanf_float+0x8a>
 800bf28:	2b54      	cmp	r3, #84	; 0x54
 800bf2a:	d077      	beq.n	800c01c <_scanf_float+0x218>
 800bf2c:	2b59      	cmp	r3, #89	; 0x59
 800bf2e:	d199      	bne.n	800be64 <_scanf_float+0x60>
 800bf30:	2d07      	cmp	r5, #7
 800bf32:	d197      	bne.n	800be64 <_scanf_float+0x60>
 800bf34:	2508      	movs	r5, #8
 800bf36:	e029      	b.n	800bf8c <_scanf_float+0x188>
 800bf38:	2b74      	cmp	r3, #116	; 0x74
 800bf3a:	d06f      	beq.n	800c01c <_scanf_float+0x218>
 800bf3c:	2b79      	cmp	r3, #121	; 0x79
 800bf3e:	e7f6      	b.n	800bf2e <_scanf_float+0x12a>
 800bf40:	6821      	ldr	r1, [r4, #0]
 800bf42:	05c8      	lsls	r0, r1, #23
 800bf44:	d51a      	bpl.n	800bf7c <_scanf_float+0x178>
 800bf46:	9b02      	ldr	r3, [sp, #8]
 800bf48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bf4c:	6021      	str	r1, [r4, #0]
 800bf4e:	f109 0901 	add.w	r9, r9, #1
 800bf52:	b11b      	cbz	r3, 800bf5c <_scanf_float+0x158>
 800bf54:	3b01      	subs	r3, #1
 800bf56:	3201      	adds	r2, #1
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	60a2      	str	r2, [r4, #8]
 800bf5c:	68a3      	ldr	r3, [r4, #8]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	3301      	adds	r3, #1
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	607b      	str	r3, [r7, #4]
 800bf70:	f340 8084 	ble.w	800c07c <_scanf_float+0x278>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	3301      	adds	r3, #1
 800bf78:	603b      	str	r3, [r7, #0]
 800bf7a:	e766      	b.n	800be4a <_scanf_float+0x46>
 800bf7c:	eb1a 0f05 	cmn.w	sl, r5
 800bf80:	f47f af70 	bne.w	800be64 <_scanf_float+0x60>
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bf8a:	6022      	str	r2, [r4, #0]
 800bf8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf90:	e7e4      	b.n	800bf5c <_scanf_float+0x158>
 800bf92:	6822      	ldr	r2, [r4, #0]
 800bf94:	0610      	lsls	r0, r2, #24
 800bf96:	f57f af65 	bpl.w	800be64 <_scanf_float+0x60>
 800bf9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf9e:	e7f4      	b.n	800bf8a <_scanf_float+0x186>
 800bfa0:	f1ba 0f00 	cmp.w	sl, #0
 800bfa4:	d10e      	bne.n	800bfc4 <_scanf_float+0x1c0>
 800bfa6:	f1b9 0f00 	cmp.w	r9, #0
 800bfaa:	d10e      	bne.n	800bfca <_scanf_float+0x1c6>
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bfb2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bfb6:	d108      	bne.n	800bfca <_scanf_float+0x1c6>
 800bfb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bfbc:	6022      	str	r2, [r4, #0]
 800bfbe:	f04f 0a01 	mov.w	sl, #1
 800bfc2:	e7e3      	b.n	800bf8c <_scanf_float+0x188>
 800bfc4:	f1ba 0f02 	cmp.w	sl, #2
 800bfc8:	d055      	beq.n	800c076 <_scanf_float+0x272>
 800bfca:	2d01      	cmp	r5, #1
 800bfcc:	d002      	beq.n	800bfd4 <_scanf_float+0x1d0>
 800bfce:	2d04      	cmp	r5, #4
 800bfd0:	f47f af48 	bne.w	800be64 <_scanf_float+0x60>
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	b2ed      	uxtb	r5, r5
 800bfd8:	e7d8      	b.n	800bf8c <_scanf_float+0x188>
 800bfda:	f1ba 0f01 	cmp.w	sl, #1
 800bfde:	f47f af41 	bne.w	800be64 <_scanf_float+0x60>
 800bfe2:	f04f 0a02 	mov.w	sl, #2
 800bfe6:	e7d1      	b.n	800bf8c <_scanf_float+0x188>
 800bfe8:	b97d      	cbnz	r5, 800c00a <_scanf_float+0x206>
 800bfea:	f1b9 0f00 	cmp.w	r9, #0
 800bfee:	f47f af3c 	bne.w	800be6a <_scanf_float+0x66>
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bff8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bffc:	f47f af39 	bne.w	800be72 <_scanf_float+0x6e>
 800c000:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c004:	6022      	str	r2, [r4, #0]
 800c006:	2501      	movs	r5, #1
 800c008:	e7c0      	b.n	800bf8c <_scanf_float+0x188>
 800c00a:	2d03      	cmp	r5, #3
 800c00c:	d0e2      	beq.n	800bfd4 <_scanf_float+0x1d0>
 800c00e:	2d05      	cmp	r5, #5
 800c010:	e7de      	b.n	800bfd0 <_scanf_float+0x1cc>
 800c012:	2d02      	cmp	r5, #2
 800c014:	f47f af26 	bne.w	800be64 <_scanf_float+0x60>
 800c018:	2503      	movs	r5, #3
 800c01a:	e7b7      	b.n	800bf8c <_scanf_float+0x188>
 800c01c:	2d06      	cmp	r5, #6
 800c01e:	f47f af21 	bne.w	800be64 <_scanf_float+0x60>
 800c022:	2507      	movs	r5, #7
 800c024:	e7b2      	b.n	800bf8c <_scanf_float+0x188>
 800c026:	6822      	ldr	r2, [r4, #0]
 800c028:	0591      	lsls	r1, r2, #22
 800c02a:	f57f af1b 	bpl.w	800be64 <_scanf_float+0x60>
 800c02e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c032:	6022      	str	r2, [r4, #0]
 800c034:	f8cd 9004 	str.w	r9, [sp, #4]
 800c038:	e7a8      	b.n	800bf8c <_scanf_float+0x188>
 800c03a:	6822      	ldr	r2, [r4, #0]
 800c03c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c040:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c044:	d006      	beq.n	800c054 <_scanf_float+0x250>
 800c046:	0550      	lsls	r0, r2, #21
 800c048:	f57f af0c 	bpl.w	800be64 <_scanf_float+0x60>
 800c04c:	f1b9 0f00 	cmp.w	r9, #0
 800c050:	f43f af0f 	beq.w	800be72 <_scanf_float+0x6e>
 800c054:	0591      	lsls	r1, r2, #22
 800c056:	bf58      	it	pl
 800c058:	9901      	ldrpl	r1, [sp, #4]
 800c05a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c05e:	bf58      	it	pl
 800c060:	eba9 0101 	subpl.w	r1, r9, r1
 800c064:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c068:	bf58      	it	pl
 800c06a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c06e:	6022      	str	r2, [r4, #0]
 800c070:	f04f 0900 	mov.w	r9, #0
 800c074:	e78a      	b.n	800bf8c <_scanf_float+0x188>
 800c076:	f04f 0a03 	mov.w	sl, #3
 800c07a:	e787      	b.n	800bf8c <_scanf_float+0x188>
 800c07c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c080:	4639      	mov	r1, r7
 800c082:	4640      	mov	r0, r8
 800c084:	4798      	blx	r3
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f aedf 	beq.w	800be4a <_scanf_float+0x46>
 800c08c:	e6ea      	b.n	800be64 <_scanf_float+0x60>
 800c08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c096:	463a      	mov	r2, r7
 800c098:	4640      	mov	r0, r8
 800c09a:	4798      	blx	r3
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	e6ec      	b.n	800be7e <_scanf_float+0x7a>
 800c0a4:	1e6b      	subs	r3, r5, #1
 800c0a6:	2b06      	cmp	r3, #6
 800c0a8:	d825      	bhi.n	800c0f6 <_scanf_float+0x2f2>
 800c0aa:	2d02      	cmp	r5, #2
 800c0ac:	d836      	bhi.n	800c11c <_scanf_float+0x318>
 800c0ae:	455e      	cmp	r6, fp
 800c0b0:	f67f aee8 	bls.w	800be84 <_scanf_float+0x80>
 800c0b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4640      	mov	r0, r8
 800c0c0:	4798      	blx	r3
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	e7f1      	b.n	800c0ae <_scanf_float+0x2aa>
 800c0ca:	9802      	ldr	r0, [sp, #8]
 800c0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4798      	blx	r3
 800c0dc:	6923      	ldr	r3, [r4, #16]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c0e6:	fa5f fa8a 	uxtb.w	sl, sl
 800c0ea:	f1ba 0f02 	cmp.w	sl, #2
 800c0ee:	d1ec      	bne.n	800c0ca <_scanf_float+0x2c6>
 800c0f0:	3d03      	subs	r5, #3
 800c0f2:	b2ed      	uxtb	r5, r5
 800c0f4:	1b76      	subs	r6, r6, r5
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	05da      	lsls	r2, r3, #23
 800c0fa:	d52f      	bpl.n	800c15c <_scanf_float+0x358>
 800c0fc:	055b      	lsls	r3, r3, #21
 800c0fe:	d510      	bpl.n	800c122 <_scanf_float+0x31e>
 800c100:	455e      	cmp	r6, fp
 800c102:	f67f aebf 	bls.w	800be84 <_scanf_float+0x80>
 800c106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c10e:	463a      	mov	r2, r7
 800c110:	4640      	mov	r0, r8
 800c112:	4798      	blx	r3
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	3b01      	subs	r3, #1
 800c118:	6123      	str	r3, [r4, #16]
 800c11a:	e7f1      	b.n	800c100 <_scanf_float+0x2fc>
 800c11c:	46aa      	mov	sl, r5
 800c11e:	9602      	str	r6, [sp, #8]
 800c120:	e7df      	b.n	800c0e2 <_scanf_float+0x2de>
 800c122:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	2965      	cmp	r1, #101	; 0x65
 800c12a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c12e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800c132:	6123      	str	r3, [r4, #16]
 800c134:	d00c      	beq.n	800c150 <_scanf_float+0x34c>
 800c136:	2945      	cmp	r1, #69	; 0x45
 800c138:	d00a      	beq.n	800c150 <_scanf_float+0x34c>
 800c13a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c13e:	463a      	mov	r2, r7
 800c140:	4640      	mov	r0, r8
 800c142:	4798      	blx	r3
 800c144:	6923      	ldr	r3, [r4, #16]
 800c146:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	1eb5      	subs	r5, r6, #2
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c154:	463a      	mov	r2, r7
 800c156:	4640      	mov	r0, r8
 800c158:	4798      	blx	r3
 800c15a:	462e      	mov	r6, r5
 800c15c:	6825      	ldr	r5, [r4, #0]
 800c15e:	f015 0510 	ands.w	r5, r5, #16
 800c162:	d158      	bne.n	800c216 <_scanf_float+0x412>
 800c164:	7035      	strb	r5, [r6, #0]
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c170:	d11c      	bne.n	800c1ac <_scanf_float+0x3a8>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	454b      	cmp	r3, r9
 800c176:	eba3 0209 	sub.w	r2, r3, r9
 800c17a:	d124      	bne.n	800c1c6 <_scanf_float+0x3c2>
 800c17c:	2200      	movs	r2, #0
 800c17e:	4659      	mov	r1, fp
 800c180:	4640      	mov	r0, r8
 800c182:	f000 fee7 	bl	800cf54 <_strtod_r>
 800c186:	9b03      	ldr	r3, [sp, #12]
 800c188:	6821      	ldr	r1, [r4, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f011 0f02 	tst.w	r1, #2
 800c190:	ec57 6b10 	vmov	r6, r7, d0
 800c194:	f103 0204 	add.w	r2, r3, #4
 800c198:	d020      	beq.n	800c1dc <_scanf_float+0x3d8>
 800c19a:	9903      	ldr	r1, [sp, #12]
 800c19c:	600a      	str	r2, [r1, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	e9c3 6700 	strd	r6, r7, [r3]
 800c1a4:	68e3      	ldr	r3, [r4, #12]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	60e3      	str	r3, [r4, #12]
 800c1aa:	e66c      	b.n	800be86 <_scanf_float+0x82>
 800c1ac:	9b04      	ldr	r3, [sp, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0e4      	beq.n	800c17c <_scanf_float+0x378>
 800c1b2:	9905      	ldr	r1, [sp, #20]
 800c1b4:	230a      	movs	r3, #10
 800c1b6:	462a      	mov	r2, r5
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f000 ffbc 	bl	800d138 <_strtol_r>
 800c1c0:	9b04      	ldr	r3, [sp, #16]
 800c1c2:	9e05      	ldr	r6, [sp, #20]
 800c1c4:	1ac2      	subs	r2, r0, r3
 800c1c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c1ca:	429e      	cmp	r6, r3
 800c1cc:	bf28      	it	cs
 800c1ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c1d2:	4912      	ldr	r1, [pc, #72]	; (800c21c <_scanf_float+0x418>)
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 f877 	bl	800c2c8 <siprintf>
 800c1da:	e7cf      	b.n	800c17c <_scanf_float+0x378>
 800c1dc:	f011 0f04 	tst.w	r1, #4
 800c1e0:	9903      	ldr	r1, [sp, #12]
 800c1e2:	600a      	str	r2, [r1, #0]
 800c1e4:	d1db      	bne.n	800c19e <_scanf_float+0x39a>
 800c1e6:	f8d3 8000 	ldr.w	r8, [r3]
 800c1ea:	ee10 2a10 	vmov	r2, s0
 800c1ee:	ee10 0a10 	vmov	r0, s0
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	f7f4 fc99 	bl	8000b2c <__aeabi_dcmpun>
 800c1fa:	b128      	cbz	r0, 800c208 <_scanf_float+0x404>
 800c1fc:	4808      	ldr	r0, [pc, #32]	; (800c220 <_scanf_float+0x41c>)
 800c1fe:	f000 f819 	bl	800c234 <nanf>
 800c202:	ed88 0a00 	vstr	s0, [r8]
 800c206:	e7cd      	b.n	800c1a4 <_scanf_float+0x3a0>
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 fcec 	bl	8000be8 <__aeabi_d2f>
 800c210:	f8c8 0000 	str.w	r0, [r8]
 800c214:	e7c6      	b.n	800c1a4 <_scanf_float+0x3a0>
 800c216:	2500      	movs	r5, #0
 800c218:	e635      	b.n	800be86 <_scanf_float+0x82>
 800c21a:	bf00      	nop
 800c21c:	080102a8 	.word	0x080102a8
 800c220:	080103b3 	.word	0x080103b3

0800c224 <realloc>:
 800c224:	4b02      	ldr	r3, [pc, #8]	; (800c230 <realloc+0xc>)
 800c226:	460a      	mov	r2, r1
 800c228:	4601      	mov	r1, r0
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f002 bf30 	b.w	800f090 <_realloc_r>
 800c230:	20000060 	.word	0x20000060

0800c234 <nanf>:
 800c234:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c23c <nanf+0x8>
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	7fc00000 	.word	0x7fc00000

0800c240 <_raise_r>:
 800c240:	291f      	cmp	r1, #31
 800c242:	b538      	push	{r3, r4, r5, lr}
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	d904      	bls.n	800c254 <_raise_r+0x14>
 800c24a:	2316      	movs	r3, #22
 800c24c:	6003      	str	r3, [r0, #0]
 800c24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c256:	b112      	cbz	r2, 800c25e <_raise_r+0x1e>
 800c258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c25c:	b94b      	cbnz	r3, 800c272 <_raise_r+0x32>
 800c25e:	4620      	mov	r0, r4
 800c260:	f000 f830 	bl	800c2c4 <_getpid_r>
 800c264:	462a      	mov	r2, r5
 800c266:	4601      	mov	r1, r0
 800c268:	4620      	mov	r0, r4
 800c26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c26e:	f000 b817 	b.w	800c2a0 <_kill_r>
 800c272:	2b01      	cmp	r3, #1
 800c274:	d00a      	beq.n	800c28c <_raise_r+0x4c>
 800c276:	1c59      	adds	r1, r3, #1
 800c278:	d103      	bne.n	800c282 <_raise_r+0x42>
 800c27a:	2316      	movs	r3, #22
 800c27c:	6003      	str	r3, [r0, #0]
 800c27e:	2001      	movs	r0, #1
 800c280:	e7e7      	b.n	800c252 <_raise_r+0x12>
 800c282:	2400      	movs	r4, #0
 800c284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c288:	4628      	mov	r0, r5
 800c28a:	4798      	blx	r3
 800c28c:	2000      	movs	r0, #0
 800c28e:	e7e0      	b.n	800c252 <_raise_r+0x12>

0800c290 <raise>:
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <raise+0xc>)
 800c292:	4601      	mov	r1, r0
 800c294:	6818      	ldr	r0, [r3, #0]
 800c296:	f7ff bfd3 	b.w	800c240 <_raise_r>
 800c29a:	bf00      	nop
 800c29c:	20000060 	.word	0x20000060

0800c2a0 <_kill_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d07      	ldr	r5, [pc, #28]	; (800c2c0 <_kill_r+0x20>)
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	f7fb f999 	bl	80075e4 <_kill>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	d102      	bne.n	800c2bc <_kill_r+0x1c>
 800c2b6:	682b      	ldr	r3, [r5, #0]
 800c2b8:	b103      	cbz	r3, 800c2bc <_kill_r+0x1c>
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	bd38      	pop	{r3, r4, r5, pc}
 800c2be:	bf00      	nop
 800c2c0:	200011b0 	.word	0x200011b0

0800c2c4 <_getpid_r>:
 800c2c4:	f7fb b986 	b.w	80075d4 <_getpid>

0800c2c8 <siprintf>:
 800c2c8:	b40e      	push	{r1, r2, r3}
 800c2ca:	b500      	push	{lr}
 800c2cc:	b09c      	sub	sp, #112	; 0x70
 800c2ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c2d0:	9002      	str	r0, [sp, #8]
 800c2d2:	9006      	str	r0, [sp, #24]
 800c2d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2d8:	4809      	ldr	r0, [pc, #36]	; (800c300 <siprintf+0x38>)
 800c2da:	9107      	str	r1, [sp, #28]
 800c2dc:	9104      	str	r1, [sp, #16]
 800c2de:	4909      	ldr	r1, [pc, #36]	; (800c304 <siprintf+0x3c>)
 800c2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e4:	9105      	str	r1, [sp, #20]
 800c2e6:	6800      	ldr	r0, [r0, #0]
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	a902      	add	r1, sp, #8
 800c2ec:	f002 ff52 	bl	800f194 <_svfiprintf_r>
 800c2f0:	9b02      	ldr	r3, [sp, #8]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	b01c      	add	sp, #112	; 0x70
 800c2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2fc:	b003      	add	sp, #12
 800c2fe:	4770      	bx	lr
 800c300:	20000060 	.word	0x20000060
 800c304:	ffff0208 	.word	0xffff0208

0800c308 <sulp>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	4604      	mov	r4, r0
 800c30c:	460d      	mov	r5, r1
 800c30e:	ec45 4b10 	vmov	d0, r4, r5
 800c312:	4616      	mov	r6, r2
 800c314:	f002 fcb4 	bl	800ec80 <__ulp>
 800c318:	ec51 0b10 	vmov	r0, r1, d0
 800c31c:	b17e      	cbz	r6, 800c33e <sulp+0x36>
 800c31e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c326:	2b00      	cmp	r3, #0
 800c328:	dd09      	ble.n	800c33e <sulp+0x36>
 800c32a:	051b      	lsls	r3, r3, #20
 800c32c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c330:	2400      	movs	r4, #0
 800c332:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c336:	4622      	mov	r2, r4
 800c338:	462b      	mov	r3, r5
 800c33a:	f7f4 f95d 	bl	80005f8 <__aeabi_dmul>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}

0800c340 <_strtod_l>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	b0a3      	sub	sp, #140	; 0x8c
 800c346:	461f      	mov	r7, r3
 800c348:	2300      	movs	r3, #0
 800c34a:	931e      	str	r3, [sp, #120]	; 0x78
 800c34c:	4ba4      	ldr	r3, [pc, #656]	; (800c5e0 <_strtod_l+0x2a0>)
 800c34e:	9219      	str	r2, [sp, #100]	; 0x64
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	9307      	str	r3, [sp, #28]
 800c354:	4604      	mov	r4, r0
 800c356:	4618      	mov	r0, r3
 800c358:	4688      	mov	r8, r1
 800c35a:	f7f3 ff39 	bl	80001d0 <strlen>
 800c35e:	f04f 0a00 	mov.w	sl, #0
 800c362:	4605      	mov	r5, r0
 800c364:	f04f 0b00 	mov.w	fp, #0
 800c368:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c36c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	2a2b      	cmp	r2, #43	; 0x2b
 800c372:	d04c      	beq.n	800c40e <_strtod_l+0xce>
 800c374:	d839      	bhi.n	800c3ea <_strtod_l+0xaa>
 800c376:	2a0d      	cmp	r2, #13
 800c378:	d832      	bhi.n	800c3e0 <_strtod_l+0xa0>
 800c37a:	2a08      	cmp	r2, #8
 800c37c:	d832      	bhi.n	800c3e4 <_strtod_l+0xa4>
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d03c      	beq.n	800c3fc <_strtod_l+0xbc>
 800c382:	2300      	movs	r3, #0
 800c384:	930e      	str	r3, [sp, #56]	; 0x38
 800c386:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c388:	7833      	ldrb	r3, [r6, #0]
 800c38a:	2b30      	cmp	r3, #48	; 0x30
 800c38c:	f040 80b4 	bne.w	800c4f8 <_strtod_l+0x1b8>
 800c390:	7873      	ldrb	r3, [r6, #1]
 800c392:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c396:	2b58      	cmp	r3, #88	; 0x58
 800c398:	d16c      	bne.n	800c474 <_strtod_l+0x134>
 800c39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	ab1e      	add	r3, sp, #120	; 0x78
 800c3a0:	9702      	str	r7, [sp, #8]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4a8f      	ldr	r2, [pc, #572]	; (800c5e4 <_strtod_l+0x2a4>)
 800c3a6:	ab1f      	add	r3, sp, #124	; 0x7c
 800c3a8:	a91d      	add	r1, sp, #116	; 0x74
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f001 fdd6 	bl	800df5c <__gethex>
 800c3b0:	f010 0707 	ands.w	r7, r0, #7
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	d005      	beq.n	800c3c4 <_strtod_l+0x84>
 800c3b8:	2f06      	cmp	r7, #6
 800c3ba:	d12a      	bne.n	800c412 <_strtod_l+0xd2>
 800c3bc:	3601      	adds	r6, #1
 800c3be:	2300      	movs	r3, #0
 800c3c0:	961d      	str	r6, [sp, #116]	; 0x74
 800c3c2:	930e      	str	r3, [sp, #56]	; 0x38
 800c3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f040 8596 	bne.w	800cef8 <_strtod_l+0xbb8>
 800c3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3ce:	b1db      	cbz	r3, 800c408 <_strtod_l+0xc8>
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3d6:	ec43 2b10 	vmov	d0, r2, r3
 800c3da:	b023      	add	sp, #140	; 0x8c
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	2a20      	cmp	r2, #32
 800c3e2:	d1ce      	bne.n	800c382 <_strtod_l+0x42>
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	931d      	str	r3, [sp, #116]	; 0x74
 800c3e8:	e7c0      	b.n	800c36c <_strtod_l+0x2c>
 800c3ea:	2a2d      	cmp	r2, #45	; 0x2d
 800c3ec:	d1c9      	bne.n	800c382 <_strtod_l+0x42>
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	920e      	str	r2, [sp, #56]	; 0x38
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	921d      	str	r2, [sp, #116]	; 0x74
 800c3f6:	785b      	ldrb	r3, [r3, #1]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1c4      	bne.n	800c386 <_strtod_l+0x46>
 800c3fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c402:	2b00      	cmp	r3, #0
 800c404:	f040 8576 	bne.w	800cef4 <_strtod_l+0xbb4>
 800c408:	4652      	mov	r2, sl
 800c40a:	465b      	mov	r3, fp
 800c40c:	e7e3      	b.n	800c3d6 <_strtod_l+0x96>
 800c40e:	2200      	movs	r2, #0
 800c410:	e7ee      	b.n	800c3f0 <_strtod_l+0xb0>
 800c412:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c414:	b13a      	cbz	r2, 800c426 <_strtod_l+0xe6>
 800c416:	2135      	movs	r1, #53	; 0x35
 800c418:	a820      	add	r0, sp, #128	; 0x80
 800c41a:	f002 fd3c 	bl	800ee96 <__copybits>
 800c41e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c420:	4620      	mov	r0, r4
 800c422:	f002 f901 	bl	800e628 <_Bfree>
 800c426:	3f01      	subs	r7, #1
 800c428:	2f05      	cmp	r7, #5
 800c42a:	d807      	bhi.n	800c43c <_strtod_l+0xfc>
 800c42c:	e8df f007 	tbb	[pc, r7]
 800c430:	1d180b0e 	.word	0x1d180b0e
 800c434:	030e      	.short	0x030e
 800c436:	f04f 0b00 	mov.w	fp, #0
 800c43a:	46da      	mov	sl, fp
 800c43c:	0728      	lsls	r0, r5, #28
 800c43e:	d5c1      	bpl.n	800c3c4 <_strtod_l+0x84>
 800c440:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c444:	e7be      	b.n	800c3c4 <_strtod_l+0x84>
 800c446:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c44a:	e7f7      	b.n	800c43c <_strtod_l+0xfc>
 800c44c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c450:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c456:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c45a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c45e:	e7ed      	b.n	800c43c <_strtod_l+0xfc>
 800c460:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c5e8 <_strtod_l+0x2a8>
 800c464:	f04f 0a00 	mov.w	sl, #0
 800c468:	e7e8      	b.n	800c43c <_strtod_l+0xfc>
 800c46a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c46e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c472:	e7e3      	b.n	800c43c <_strtod_l+0xfc>
 800c474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	921d      	str	r2, [sp, #116]	; 0x74
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	2b30      	cmp	r3, #48	; 0x30
 800c47e:	d0f9      	beq.n	800c474 <_strtod_l+0x134>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d09f      	beq.n	800c3c4 <_strtod_l+0x84>
 800c484:	2301      	movs	r3, #1
 800c486:	f04f 0900 	mov.w	r9, #0
 800c48a:	9304      	str	r3, [sp, #16]
 800c48c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c48e:	930a      	str	r3, [sp, #40]	; 0x28
 800c490:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c494:	464f      	mov	r7, r9
 800c496:	220a      	movs	r2, #10
 800c498:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c49a:	7806      	ldrb	r6, [r0, #0]
 800c49c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c4a0:	b2d9      	uxtb	r1, r3
 800c4a2:	2909      	cmp	r1, #9
 800c4a4:	d92a      	bls.n	800c4fc <_strtod_l+0x1bc>
 800c4a6:	9907      	ldr	r1, [sp, #28]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	f003 f8e5 	bl	800f678 <strncmp>
 800c4ae:	b398      	cbz	r0, 800c518 <_strtod_l+0x1d8>
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	463d      	mov	r5, r7
 800c4b6:	9007      	str	r0, [sp, #28]
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	2b65      	cmp	r3, #101	; 0x65
 800c4bc:	d001      	beq.n	800c4c2 <_strtod_l+0x182>
 800c4be:	2b45      	cmp	r3, #69	; 0x45
 800c4c0:	d118      	bne.n	800c4f4 <_strtod_l+0x1b4>
 800c4c2:	b91d      	cbnz	r5, 800c4cc <_strtod_l+0x18c>
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	4303      	orrs	r3, r0
 800c4c8:	d098      	beq.n	800c3fc <_strtod_l+0xbc>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c4d0:	f108 0301 	add.w	r3, r8, #1
 800c4d4:	931d      	str	r3, [sp, #116]	; 0x74
 800c4d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c4da:	2b2b      	cmp	r3, #43	; 0x2b
 800c4dc:	d075      	beq.n	800c5ca <_strtod_l+0x28a>
 800c4de:	2b2d      	cmp	r3, #45	; 0x2d
 800c4e0:	d07b      	beq.n	800c5da <_strtod_l+0x29a>
 800c4e2:	f04f 0c00 	mov.w	ip, #0
 800c4e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c4ea:	2909      	cmp	r1, #9
 800c4ec:	f240 8082 	bls.w	800c5f4 <_strtod_l+0x2b4>
 800c4f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c4f4:	2600      	movs	r6, #0
 800c4f6:	e09d      	b.n	800c634 <_strtod_l+0x2f4>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e7c4      	b.n	800c486 <_strtod_l+0x146>
 800c4fc:	2f08      	cmp	r7, #8
 800c4fe:	bfd8      	it	le
 800c500:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c502:	f100 0001 	add.w	r0, r0, #1
 800c506:	bfda      	itte	le
 800c508:	fb02 3301 	mlale	r3, r2, r1, r3
 800c50c:	9309      	strle	r3, [sp, #36]	; 0x24
 800c50e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c512:	3701      	adds	r7, #1
 800c514:	901d      	str	r0, [sp, #116]	; 0x74
 800c516:	e7bf      	b.n	800c498 <_strtod_l+0x158>
 800c518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c51a:	195a      	adds	r2, r3, r5
 800c51c:	921d      	str	r2, [sp, #116]	; 0x74
 800c51e:	5d5b      	ldrb	r3, [r3, r5]
 800c520:	2f00      	cmp	r7, #0
 800c522:	d037      	beq.n	800c594 <_strtod_l+0x254>
 800c524:	9007      	str	r0, [sp, #28]
 800c526:	463d      	mov	r5, r7
 800c528:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c52c:	2a09      	cmp	r2, #9
 800c52e:	d912      	bls.n	800c556 <_strtod_l+0x216>
 800c530:	2201      	movs	r2, #1
 800c532:	e7c2      	b.n	800c4ba <_strtod_l+0x17a>
 800c534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c536:	1c5a      	adds	r2, r3, #1
 800c538:	921d      	str	r2, [sp, #116]	; 0x74
 800c53a:	785b      	ldrb	r3, [r3, #1]
 800c53c:	3001      	adds	r0, #1
 800c53e:	2b30      	cmp	r3, #48	; 0x30
 800c540:	d0f8      	beq.n	800c534 <_strtod_l+0x1f4>
 800c542:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c546:	2a08      	cmp	r2, #8
 800c548:	f200 84db 	bhi.w	800cf02 <_strtod_l+0xbc2>
 800c54c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c54e:	9007      	str	r0, [sp, #28]
 800c550:	2000      	movs	r0, #0
 800c552:	920a      	str	r2, [sp, #40]	; 0x28
 800c554:	4605      	mov	r5, r0
 800c556:	3b30      	subs	r3, #48	; 0x30
 800c558:	f100 0201 	add.w	r2, r0, #1
 800c55c:	d014      	beq.n	800c588 <_strtod_l+0x248>
 800c55e:	9907      	ldr	r1, [sp, #28]
 800c560:	4411      	add	r1, r2
 800c562:	9107      	str	r1, [sp, #28]
 800c564:	462a      	mov	r2, r5
 800c566:	eb00 0e05 	add.w	lr, r0, r5
 800c56a:	210a      	movs	r1, #10
 800c56c:	4572      	cmp	r2, lr
 800c56e:	d113      	bne.n	800c598 <_strtod_l+0x258>
 800c570:	182a      	adds	r2, r5, r0
 800c572:	2a08      	cmp	r2, #8
 800c574:	f105 0501 	add.w	r5, r5, #1
 800c578:	4405      	add	r5, r0
 800c57a:	dc1c      	bgt.n	800c5b6 <_strtod_l+0x276>
 800c57c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c57e:	220a      	movs	r2, #10
 800c580:	fb02 3301 	mla	r3, r2, r1, r3
 800c584:	9309      	str	r3, [sp, #36]	; 0x24
 800c586:	2200      	movs	r2, #0
 800c588:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c58a:	1c59      	adds	r1, r3, #1
 800c58c:	911d      	str	r1, [sp, #116]	; 0x74
 800c58e:	785b      	ldrb	r3, [r3, #1]
 800c590:	4610      	mov	r0, r2
 800c592:	e7c9      	b.n	800c528 <_strtod_l+0x1e8>
 800c594:	4638      	mov	r0, r7
 800c596:	e7d2      	b.n	800c53e <_strtod_l+0x1fe>
 800c598:	2a08      	cmp	r2, #8
 800c59a:	dc04      	bgt.n	800c5a6 <_strtod_l+0x266>
 800c59c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c59e:	434e      	muls	r6, r1
 800c5a0:	9609      	str	r6, [sp, #36]	; 0x24
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	e7e2      	b.n	800c56c <_strtod_l+0x22c>
 800c5a6:	f102 0c01 	add.w	ip, r2, #1
 800c5aa:	f1bc 0f10 	cmp.w	ip, #16
 800c5ae:	bfd8      	it	le
 800c5b0:	fb01 f909 	mulle.w	r9, r1, r9
 800c5b4:	e7f5      	b.n	800c5a2 <_strtod_l+0x262>
 800c5b6:	2d10      	cmp	r5, #16
 800c5b8:	bfdc      	itt	le
 800c5ba:	220a      	movle	r2, #10
 800c5bc:	fb02 3909 	mlale	r9, r2, r9, r3
 800c5c0:	e7e1      	b.n	800c586 <_strtod_l+0x246>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9307      	str	r3, [sp, #28]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	e77c      	b.n	800c4c4 <_strtod_l+0x184>
 800c5ca:	f04f 0c00 	mov.w	ip, #0
 800c5ce:	f108 0302 	add.w	r3, r8, #2
 800c5d2:	931d      	str	r3, [sp, #116]	; 0x74
 800c5d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c5d8:	e785      	b.n	800c4e6 <_strtod_l+0x1a6>
 800c5da:	f04f 0c01 	mov.w	ip, #1
 800c5de:	e7f6      	b.n	800c5ce <_strtod_l+0x28e>
 800c5e0:	0801059c 	.word	0x0801059c
 800c5e4:	080102b0 	.word	0x080102b0
 800c5e8:	7ff00000 	.word	0x7ff00000
 800c5ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5ee:	1c59      	adds	r1, r3, #1
 800c5f0:	911d      	str	r1, [sp, #116]	; 0x74
 800c5f2:	785b      	ldrb	r3, [r3, #1]
 800c5f4:	2b30      	cmp	r3, #48	; 0x30
 800c5f6:	d0f9      	beq.n	800c5ec <_strtod_l+0x2ac>
 800c5f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c5fc:	2908      	cmp	r1, #8
 800c5fe:	f63f af79 	bhi.w	800c4f4 <_strtod_l+0x1b4>
 800c602:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c60c:	1c59      	adds	r1, r3, #1
 800c60e:	911d      	str	r1, [sp, #116]	; 0x74
 800c610:	785b      	ldrb	r3, [r3, #1]
 800c612:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c616:	2e09      	cmp	r6, #9
 800c618:	d937      	bls.n	800c68a <_strtod_l+0x34a>
 800c61a:	9e08      	ldr	r6, [sp, #32]
 800c61c:	1b89      	subs	r1, r1, r6
 800c61e:	2908      	cmp	r1, #8
 800c620:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c624:	dc02      	bgt.n	800c62c <_strtod_l+0x2ec>
 800c626:	4576      	cmp	r6, lr
 800c628:	bfa8      	it	ge
 800c62a:	4676      	movge	r6, lr
 800c62c:	f1bc 0f00 	cmp.w	ip, #0
 800c630:	d000      	beq.n	800c634 <_strtod_l+0x2f4>
 800c632:	4276      	negs	r6, r6
 800c634:	2d00      	cmp	r5, #0
 800c636:	d14f      	bne.n	800c6d8 <_strtod_l+0x398>
 800c638:	9904      	ldr	r1, [sp, #16]
 800c63a:	4301      	orrs	r1, r0
 800c63c:	f47f aec2 	bne.w	800c3c4 <_strtod_l+0x84>
 800c640:	2a00      	cmp	r2, #0
 800c642:	f47f aedb 	bne.w	800c3fc <_strtod_l+0xbc>
 800c646:	2b69      	cmp	r3, #105	; 0x69
 800c648:	d027      	beq.n	800c69a <_strtod_l+0x35a>
 800c64a:	dc24      	bgt.n	800c696 <_strtod_l+0x356>
 800c64c:	2b49      	cmp	r3, #73	; 0x49
 800c64e:	d024      	beq.n	800c69a <_strtod_l+0x35a>
 800c650:	2b4e      	cmp	r3, #78	; 0x4e
 800c652:	f47f aed3 	bne.w	800c3fc <_strtod_l+0xbc>
 800c656:	499e      	ldr	r1, [pc, #632]	; (800c8d0 <_strtod_l+0x590>)
 800c658:	a81d      	add	r0, sp, #116	; 0x74
 800c65a:	f001 fed7 	bl	800e40c <__match>
 800c65e:	2800      	cmp	r0, #0
 800c660:	f43f aecc 	beq.w	800c3fc <_strtod_l+0xbc>
 800c664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b28      	cmp	r3, #40	; 0x28
 800c66a:	d12d      	bne.n	800c6c8 <_strtod_l+0x388>
 800c66c:	4999      	ldr	r1, [pc, #612]	; (800c8d4 <_strtod_l+0x594>)
 800c66e:	aa20      	add	r2, sp, #128	; 0x80
 800c670:	a81d      	add	r0, sp, #116	; 0x74
 800c672:	f001 fedf 	bl	800e434 <__hexnan>
 800c676:	2805      	cmp	r0, #5
 800c678:	d126      	bne.n	800c6c8 <_strtod_l+0x388>
 800c67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c67c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c680:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c684:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c688:	e69c      	b.n	800c3c4 <_strtod_l+0x84>
 800c68a:	210a      	movs	r1, #10
 800c68c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c690:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c694:	e7b9      	b.n	800c60a <_strtod_l+0x2ca>
 800c696:	2b6e      	cmp	r3, #110	; 0x6e
 800c698:	e7db      	b.n	800c652 <_strtod_l+0x312>
 800c69a:	498f      	ldr	r1, [pc, #572]	; (800c8d8 <_strtod_l+0x598>)
 800c69c:	a81d      	add	r0, sp, #116	; 0x74
 800c69e:	f001 feb5 	bl	800e40c <__match>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	f43f aeaa 	beq.w	800c3fc <_strtod_l+0xbc>
 800c6a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6aa:	498c      	ldr	r1, [pc, #560]	; (800c8dc <_strtod_l+0x59c>)
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	a81d      	add	r0, sp, #116	; 0x74
 800c6b0:	931d      	str	r3, [sp, #116]	; 0x74
 800c6b2:	f001 feab 	bl	800e40c <__match>
 800c6b6:	b910      	cbnz	r0, 800c6be <_strtod_l+0x37e>
 800c6b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	931d      	str	r3, [sp, #116]	; 0x74
 800c6be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c8ec <_strtod_l+0x5ac>
 800c6c2:	f04f 0a00 	mov.w	sl, #0
 800c6c6:	e67d      	b.n	800c3c4 <_strtod_l+0x84>
 800c6c8:	4885      	ldr	r0, [pc, #532]	; (800c8e0 <_strtod_l+0x5a0>)
 800c6ca:	f002 ffbd 	bl	800f648 <nan>
 800c6ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c6d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c6d6:	e675      	b.n	800c3c4 <_strtod_l+0x84>
 800c6d8:	9b07      	ldr	r3, [sp, #28]
 800c6da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6dc:	1af3      	subs	r3, r6, r3
 800c6de:	2f00      	cmp	r7, #0
 800c6e0:	bf08      	it	eq
 800c6e2:	462f      	moveq	r7, r5
 800c6e4:	2d10      	cmp	r5, #16
 800c6e6:	9308      	str	r3, [sp, #32]
 800c6e8:	46a8      	mov	r8, r5
 800c6ea:	bfa8      	it	ge
 800c6ec:	f04f 0810 	movge.w	r8, #16
 800c6f0:	f7f3 ff08 	bl	8000504 <__aeabi_ui2d>
 800c6f4:	2d09      	cmp	r5, #9
 800c6f6:	4682      	mov	sl, r0
 800c6f8:	468b      	mov	fp, r1
 800c6fa:	dd13      	ble.n	800c724 <_strtod_l+0x3e4>
 800c6fc:	4b79      	ldr	r3, [pc, #484]	; (800c8e4 <_strtod_l+0x5a4>)
 800c6fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c702:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c706:	f7f3 ff77 	bl	80005f8 <__aeabi_dmul>
 800c70a:	4682      	mov	sl, r0
 800c70c:	4648      	mov	r0, r9
 800c70e:	468b      	mov	fp, r1
 800c710:	f7f3 fef8 	bl	8000504 <__aeabi_ui2d>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	f7f3 fdb6 	bl	800028c <__adddf3>
 800c720:	4682      	mov	sl, r0
 800c722:	468b      	mov	fp, r1
 800c724:	2d0f      	cmp	r5, #15
 800c726:	dc38      	bgt.n	800c79a <_strtod_l+0x45a>
 800c728:	9b08      	ldr	r3, [sp, #32]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f ae4a 	beq.w	800c3c4 <_strtod_l+0x84>
 800c730:	dd24      	ble.n	800c77c <_strtod_l+0x43c>
 800c732:	2b16      	cmp	r3, #22
 800c734:	dc0b      	bgt.n	800c74e <_strtod_l+0x40e>
 800c736:	4d6b      	ldr	r5, [pc, #428]	; (800c8e4 <_strtod_l+0x5a4>)
 800c738:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c73c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c740:	4652      	mov	r2, sl
 800c742:	465b      	mov	r3, fp
 800c744:	f7f3 ff58 	bl	80005f8 <__aeabi_dmul>
 800c748:	4682      	mov	sl, r0
 800c74a:	468b      	mov	fp, r1
 800c74c:	e63a      	b.n	800c3c4 <_strtod_l+0x84>
 800c74e:	9a08      	ldr	r2, [sp, #32]
 800c750:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c754:	4293      	cmp	r3, r2
 800c756:	db20      	blt.n	800c79a <_strtod_l+0x45a>
 800c758:	4c62      	ldr	r4, [pc, #392]	; (800c8e4 <_strtod_l+0x5a4>)
 800c75a:	f1c5 050f 	rsb	r5, r5, #15
 800c75e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c762:	4652      	mov	r2, sl
 800c764:	465b      	mov	r3, fp
 800c766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c76a:	f7f3 ff45 	bl	80005f8 <__aeabi_dmul>
 800c76e:	9b08      	ldr	r3, [sp, #32]
 800c770:	1b5d      	subs	r5, r3, r5
 800c772:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c776:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c77a:	e7e3      	b.n	800c744 <_strtod_l+0x404>
 800c77c:	9b08      	ldr	r3, [sp, #32]
 800c77e:	3316      	adds	r3, #22
 800c780:	db0b      	blt.n	800c79a <_strtod_l+0x45a>
 800c782:	9b07      	ldr	r3, [sp, #28]
 800c784:	4a57      	ldr	r2, [pc, #348]	; (800c8e4 <_strtod_l+0x5a4>)
 800c786:	1b9e      	subs	r6, r3, r6
 800c788:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c790:	4650      	mov	r0, sl
 800c792:	4659      	mov	r1, fp
 800c794:	f7f4 f85a 	bl	800084c <__aeabi_ddiv>
 800c798:	e7d6      	b.n	800c748 <_strtod_l+0x408>
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	eba5 0808 	sub.w	r8, r5, r8
 800c7a0:	4498      	add	r8, r3
 800c7a2:	f1b8 0f00 	cmp.w	r8, #0
 800c7a6:	dd71      	ble.n	800c88c <_strtod_l+0x54c>
 800c7a8:	f018 030f 	ands.w	r3, r8, #15
 800c7ac:	d00a      	beq.n	800c7c4 <_strtod_l+0x484>
 800c7ae:	494d      	ldr	r1, [pc, #308]	; (800c8e4 <_strtod_l+0x5a4>)
 800c7b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7bc:	f7f3 ff1c 	bl	80005f8 <__aeabi_dmul>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	468b      	mov	fp, r1
 800c7c4:	f038 080f 	bics.w	r8, r8, #15
 800c7c8:	d04d      	beq.n	800c866 <_strtod_l+0x526>
 800c7ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c7ce:	dd22      	ble.n	800c816 <_strtod_l+0x4d6>
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	462e      	mov	r6, r5
 800c7d4:	9509      	str	r5, [sp, #36]	; 0x24
 800c7d6:	9507      	str	r5, [sp, #28]
 800c7d8:	2322      	movs	r3, #34	; 0x22
 800c7da:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c8ec <_strtod_l+0x5ac>
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f43f adec 	beq.w	800c3c4 <_strtod_l+0x84>
 800c7ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f001 ff1a 	bl	800e628 <_Bfree>
 800c7f4:	9907      	ldr	r1, [sp, #28]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f001 ff16 	bl	800e628 <_Bfree>
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4620      	mov	r0, r4
 800c800:	f001 ff12 	bl	800e628 <_Bfree>
 800c804:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c806:	4620      	mov	r0, r4
 800c808:	f001 ff0e 	bl	800e628 <_Bfree>
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	f001 ff0a 	bl	800e628 <_Bfree>
 800c814:	e5d6      	b.n	800c3c4 <_strtod_l+0x84>
 800c816:	2300      	movs	r3, #0
 800c818:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c81c:	4650      	mov	r0, sl
 800c81e:	4659      	mov	r1, fp
 800c820:	4699      	mov	r9, r3
 800c822:	f1b8 0f01 	cmp.w	r8, #1
 800c826:	dc21      	bgt.n	800c86c <_strtod_l+0x52c>
 800c828:	b10b      	cbz	r3, 800c82e <_strtod_l+0x4ee>
 800c82a:	4682      	mov	sl, r0
 800c82c:	468b      	mov	fp, r1
 800c82e:	4b2e      	ldr	r3, [pc, #184]	; (800c8e8 <_strtod_l+0x5a8>)
 800c830:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c834:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c838:	4652      	mov	r2, sl
 800c83a:	465b      	mov	r3, fp
 800c83c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c840:	f7f3 feda 	bl	80005f8 <__aeabi_dmul>
 800c844:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <_strtod_l+0x5ac>)
 800c846:	460a      	mov	r2, r1
 800c848:	400b      	ands	r3, r1
 800c84a:	4929      	ldr	r1, [pc, #164]	; (800c8f0 <_strtod_l+0x5b0>)
 800c84c:	428b      	cmp	r3, r1
 800c84e:	4682      	mov	sl, r0
 800c850:	d8be      	bhi.n	800c7d0 <_strtod_l+0x490>
 800c852:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c856:	428b      	cmp	r3, r1
 800c858:	bf86      	itte	hi
 800c85a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c8f4 <_strtod_l+0x5b4>
 800c85e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c862:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c866:	2300      	movs	r3, #0
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	e081      	b.n	800c970 <_strtod_l+0x630>
 800c86c:	f018 0f01 	tst.w	r8, #1
 800c870:	d007      	beq.n	800c882 <_strtod_l+0x542>
 800c872:	4b1d      	ldr	r3, [pc, #116]	; (800c8e8 <_strtod_l+0x5a8>)
 800c874:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 febc 	bl	80005f8 <__aeabi_dmul>
 800c880:	2301      	movs	r3, #1
 800c882:	f109 0901 	add.w	r9, r9, #1
 800c886:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c88a:	e7ca      	b.n	800c822 <_strtod_l+0x4e2>
 800c88c:	d0eb      	beq.n	800c866 <_strtod_l+0x526>
 800c88e:	f1c8 0800 	rsb	r8, r8, #0
 800c892:	f018 020f 	ands.w	r2, r8, #15
 800c896:	d00a      	beq.n	800c8ae <_strtod_l+0x56e>
 800c898:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <_strtod_l+0x5a4>)
 800c89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c89e:	4650      	mov	r0, sl
 800c8a0:	4659      	mov	r1, fp
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 ffd1 	bl	800084c <__aeabi_ddiv>
 800c8aa:	4682      	mov	sl, r0
 800c8ac:	468b      	mov	fp, r1
 800c8ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c8b2:	d0d8      	beq.n	800c866 <_strtod_l+0x526>
 800c8b4:	f1b8 0f1f 	cmp.w	r8, #31
 800c8b8:	dd1e      	ble.n	800c8f8 <_strtod_l+0x5b8>
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	462e      	mov	r6, r5
 800c8be:	9509      	str	r5, [sp, #36]	; 0x24
 800c8c0:	9507      	str	r5, [sp, #28]
 800c8c2:	2322      	movs	r3, #34	; 0x22
 800c8c4:	f04f 0a00 	mov.w	sl, #0
 800c8c8:	f04f 0b00 	mov.w	fp, #0
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	e789      	b.n	800c7e4 <_strtod_l+0x4a4>
 800c8d0:	08010281 	.word	0x08010281
 800c8d4:	080102c4 	.word	0x080102c4
 800c8d8:	08010279 	.word	0x08010279
 800c8dc:	080104b8 	.word	0x080104b8
 800c8e0:	080103b3 	.word	0x080103b3
 800c8e4:	08010638 	.word	0x08010638
 800c8e8:	08010610 	.word	0x08010610
 800c8ec:	7ff00000 	.word	0x7ff00000
 800c8f0:	7ca00000 	.word	0x7ca00000
 800c8f4:	7fefffff 	.word	0x7fefffff
 800c8f8:	f018 0310 	ands.w	r3, r8, #16
 800c8fc:	bf18      	it	ne
 800c8fe:	236a      	movne	r3, #106	; 0x6a
 800c900:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ccb8 <_strtod_l+0x978>
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	4650      	mov	r0, sl
 800c908:	4659      	mov	r1, fp
 800c90a:	2300      	movs	r3, #0
 800c90c:	f018 0f01 	tst.w	r8, #1
 800c910:	d004      	beq.n	800c91c <_strtod_l+0x5dc>
 800c912:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c916:	f7f3 fe6f 	bl	80005f8 <__aeabi_dmul>
 800c91a:	2301      	movs	r3, #1
 800c91c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c920:	f109 0908 	add.w	r9, r9, #8
 800c924:	d1f2      	bne.n	800c90c <_strtod_l+0x5cc>
 800c926:	b10b      	cbz	r3, 800c92c <_strtod_l+0x5ec>
 800c928:	4682      	mov	sl, r0
 800c92a:	468b      	mov	fp, r1
 800c92c:	9b04      	ldr	r3, [sp, #16]
 800c92e:	b1bb      	cbz	r3, 800c960 <_strtod_l+0x620>
 800c930:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c934:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c938:	2b00      	cmp	r3, #0
 800c93a:	4659      	mov	r1, fp
 800c93c:	dd10      	ble.n	800c960 <_strtod_l+0x620>
 800c93e:	2b1f      	cmp	r3, #31
 800c940:	f340 8128 	ble.w	800cb94 <_strtod_l+0x854>
 800c944:	2b34      	cmp	r3, #52	; 0x34
 800c946:	bfde      	ittt	le
 800c948:	3b20      	suble	r3, #32
 800c94a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800c94e:	fa02 f303 	lslle.w	r3, r2, r3
 800c952:	f04f 0a00 	mov.w	sl, #0
 800c956:	bfcc      	ite	gt
 800c958:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c95c:	ea03 0b01 	andle.w	fp, r3, r1
 800c960:	2200      	movs	r2, #0
 800c962:	2300      	movs	r3, #0
 800c964:	4650      	mov	r0, sl
 800c966:	4659      	mov	r1, fp
 800c968:	f7f4 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d1a4      	bne.n	800c8ba <_strtod_l+0x57a>
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c976:	462b      	mov	r3, r5
 800c978:	463a      	mov	r2, r7
 800c97a:	4620      	mov	r0, r4
 800c97c:	f001 fec0 	bl	800e700 <__s2b>
 800c980:	9009      	str	r0, [sp, #36]	; 0x24
 800c982:	2800      	cmp	r0, #0
 800c984:	f43f af24 	beq.w	800c7d0 <_strtod_l+0x490>
 800c988:	9b07      	ldr	r3, [sp, #28]
 800c98a:	1b9e      	subs	r6, r3, r6
 800c98c:	9b08      	ldr	r3, [sp, #32]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bfb4      	ite	lt
 800c992:	4633      	movlt	r3, r6
 800c994:	2300      	movge	r3, #0
 800c996:	9310      	str	r3, [sp, #64]	; 0x40
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	2500      	movs	r5, #0
 800c99c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c9a0:	9318      	str	r3, [sp, #96]	; 0x60
 800c9a2:	462e      	mov	r6, r5
 800c9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	6859      	ldr	r1, [r3, #4]
 800c9aa:	f001 fdfd 	bl	800e5a8 <_Balloc>
 800c9ae:	9007      	str	r0, [sp, #28]
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f43f af11 	beq.w	800c7d8 <_strtod_l+0x498>
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	691a      	ldr	r2, [r3, #16]
 800c9ba:	3202      	adds	r2, #2
 800c9bc:	f103 010c 	add.w	r1, r3, #12
 800c9c0:	0092      	lsls	r2, r2, #2
 800c9c2:	300c      	adds	r0, #12
 800c9c4:	f7fe fd9e 	bl	800b504 <memcpy>
 800c9c8:	ec4b ab10 	vmov	d0, sl, fp
 800c9cc:	aa20      	add	r2, sp, #128	; 0x80
 800c9ce:	a91f      	add	r1, sp, #124	; 0x7c
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c9d6:	f002 f9cf 	bl	800ed78 <__d2b>
 800c9da:	901e      	str	r0, [sp, #120]	; 0x78
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	f43f aefb 	beq.w	800c7d8 <_strtod_l+0x498>
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f001 ff25 	bl	800e834 <__i2b>
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f43f aef3 	beq.w	800c7d8 <_strtod_l+0x498>
 800c9f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c9f4:	9904      	ldr	r1, [sp, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	bfab      	itete	ge
 800c9fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c9fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c9fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ca00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ca04:	bfac      	ite	ge
 800ca06:	eb03 0902 	addge.w	r9, r3, r2
 800ca0a:	1ad7      	sublt	r7, r2, r3
 800ca0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca0e:	eba3 0801 	sub.w	r8, r3, r1
 800ca12:	4490      	add	r8, r2
 800ca14:	4ba3      	ldr	r3, [pc, #652]	; (800cca4 <_strtod_l+0x964>)
 800ca16:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ca1a:	4598      	cmp	r8, r3
 800ca1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca20:	f280 80cc 	bge.w	800cbbc <_strtod_l+0x87c>
 800ca24:	eba3 0308 	sub.w	r3, r3, r8
 800ca28:	2b1f      	cmp	r3, #31
 800ca2a:	eba2 0203 	sub.w	r2, r2, r3
 800ca2e:	f04f 0101 	mov.w	r1, #1
 800ca32:	f300 80b6 	bgt.w	800cba2 <_strtod_l+0x862>
 800ca36:	fa01 f303 	lsl.w	r3, r1, r3
 800ca3a:	9311      	str	r3, [sp, #68]	; 0x44
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ca40:	eb09 0802 	add.w	r8, r9, r2
 800ca44:	9b04      	ldr	r3, [sp, #16]
 800ca46:	45c1      	cmp	r9, r8
 800ca48:	4417      	add	r7, r2
 800ca4a:	441f      	add	r7, r3
 800ca4c:	464b      	mov	r3, r9
 800ca4e:	bfa8      	it	ge
 800ca50:	4643      	movge	r3, r8
 800ca52:	42bb      	cmp	r3, r7
 800ca54:	bfa8      	it	ge
 800ca56:	463b      	movge	r3, r7
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	bfc2      	ittt	gt
 800ca5c:	eba8 0803 	subgt.w	r8, r8, r3
 800ca60:	1aff      	subgt	r7, r7, r3
 800ca62:	eba9 0903 	subgt.w	r9, r9, r3
 800ca66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dd17      	ble.n	800ca9c <_strtod_l+0x75c>
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 ff9b 	bl	800e9ac <__pow5mult>
 800ca76:	4606      	mov	r6, r0
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	f43f aead 	beq.w	800c7d8 <_strtod_l+0x498>
 800ca7e:	4601      	mov	r1, r0
 800ca80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca82:	4620      	mov	r0, r4
 800ca84:	f001 feec 	bl	800e860 <__multiply>
 800ca88:	900f      	str	r0, [sp, #60]	; 0x3c
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	f43f aea4 	beq.w	800c7d8 <_strtod_l+0x498>
 800ca90:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ca92:	4620      	mov	r0, r4
 800ca94:	f001 fdc8 	bl	800e628 <_Bfree>
 800ca98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca9a:	931e      	str	r3, [sp, #120]	; 0x78
 800ca9c:	f1b8 0f00 	cmp.w	r8, #0
 800caa0:	f300 8091 	bgt.w	800cbc6 <_strtod_l+0x886>
 800caa4:	9b08      	ldr	r3, [sp, #32]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd08      	ble.n	800cabc <_strtod_l+0x77c>
 800caaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800caac:	9907      	ldr	r1, [sp, #28]
 800caae:	4620      	mov	r0, r4
 800cab0:	f001 ff7c 	bl	800e9ac <__pow5mult>
 800cab4:	9007      	str	r0, [sp, #28]
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f43f ae8e 	beq.w	800c7d8 <_strtod_l+0x498>
 800cabc:	2f00      	cmp	r7, #0
 800cabe:	dd08      	ble.n	800cad2 <_strtod_l+0x792>
 800cac0:	9907      	ldr	r1, [sp, #28]
 800cac2:	463a      	mov	r2, r7
 800cac4:	4620      	mov	r0, r4
 800cac6:	f001 ffcb 	bl	800ea60 <__lshift>
 800caca:	9007      	str	r0, [sp, #28]
 800cacc:	2800      	cmp	r0, #0
 800cace:	f43f ae83 	beq.w	800c7d8 <_strtod_l+0x498>
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	dd08      	ble.n	800caea <_strtod_l+0x7aa>
 800cad8:	4631      	mov	r1, r6
 800cada:	464a      	mov	r2, r9
 800cadc:	4620      	mov	r0, r4
 800cade:	f001 ffbf 	bl	800ea60 <__lshift>
 800cae2:	4606      	mov	r6, r0
 800cae4:	2800      	cmp	r0, #0
 800cae6:	f43f ae77 	beq.w	800c7d8 <_strtod_l+0x498>
 800caea:	9a07      	ldr	r2, [sp, #28]
 800caec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800caee:	4620      	mov	r0, r4
 800caf0:	f002 f83e 	bl	800eb70 <__mdiff>
 800caf4:	4605      	mov	r5, r0
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f43f ae6e 	beq.w	800c7d8 <_strtod_l+0x498>
 800cafc:	68c3      	ldr	r3, [r0, #12]
 800cafe:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb00:	2300      	movs	r3, #0
 800cb02:	60c3      	str	r3, [r0, #12]
 800cb04:	4631      	mov	r1, r6
 800cb06:	f002 f817 	bl	800eb38 <__mcmp>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	da65      	bge.n	800cbda <_strtod_l+0x89a>
 800cb0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb10:	ea53 030a 	orrs.w	r3, r3, sl
 800cb14:	f040 8087 	bne.w	800cc26 <_strtod_l+0x8e6>
 800cb18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 8082 	bne.w	800cc26 <_strtod_l+0x8e6>
 800cb22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb26:	0d1b      	lsrs	r3, r3, #20
 800cb28:	051b      	lsls	r3, r3, #20
 800cb2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb2e:	d97a      	bls.n	800cc26 <_strtod_l+0x8e6>
 800cb30:	696b      	ldr	r3, [r5, #20]
 800cb32:	b913      	cbnz	r3, 800cb3a <_strtod_l+0x7fa>
 800cb34:	692b      	ldr	r3, [r5, #16]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	dd75      	ble.n	800cc26 <_strtod_l+0x8e6>
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f001 ff8e 	bl	800ea60 <__lshift>
 800cb44:	4631      	mov	r1, r6
 800cb46:	4605      	mov	r5, r0
 800cb48:	f001 fff6 	bl	800eb38 <__mcmp>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	dd6a      	ble.n	800cc26 <_strtod_l+0x8e6>
 800cb50:	9904      	ldr	r1, [sp, #16]
 800cb52:	4a55      	ldr	r2, [pc, #340]	; (800cca8 <_strtod_l+0x968>)
 800cb54:	465b      	mov	r3, fp
 800cb56:	2900      	cmp	r1, #0
 800cb58:	f000 8085 	beq.w	800cc66 <_strtod_l+0x926>
 800cb5c:	ea02 010b 	and.w	r1, r2, fp
 800cb60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb64:	dc7f      	bgt.n	800cc66 <_strtod_l+0x926>
 800cb66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb6a:	f77f aeaa 	ble.w	800c8c2 <_strtod_l+0x582>
 800cb6e:	4a4f      	ldr	r2, [pc, #316]	; (800ccac <_strtod_l+0x96c>)
 800cb70:	2300      	movs	r3, #0
 800cb72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cb76:	4650      	mov	r0, sl
 800cb78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cb7c:	4659      	mov	r1, fp
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	460b      	mov	r3, r1
 800cb84:	4303      	orrs	r3, r0
 800cb86:	bf08      	it	eq
 800cb88:	2322      	moveq	r3, #34	; 0x22
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	468b      	mov	fp, r1
 800cb8e:	bf08      	it	eq
 800cb90:	6023      	streq	r3, [r4, #0]
 800cb92:	e62b      	b.n	800c7ec <_strtod_l+0x4ac>
 800cb94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb98:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9c:	ea03 0a0a 	and.w	sl, r3, sl
 800cba0:	e6de      	b.n	800c960 <_strtod_l+0x620>
 800cba2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cba6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cbaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cbae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cbb2:	fa01 f308 	lsl.w	r3, r1, r8
 800cbb6:	930c      	str	r3, [sp, #48]	; 0x30
 800cbb8:	9111      	str	r1, [sp, #68]	; 0x44
 800cbba:	e741      	b.n	800ca40 <_strtod_l+0x700>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	930c      	str	r3, [sp, #48]	; 0x30
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	9311      	str	r3, [sp, #68]	; 0x44
 800cbc4:	e73c      	b.n	800ca40 <_strtod_l+0x700>
 800cbc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cbc8:	4642      	mov	r2, r8
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f001 ff48 	bl	800ea60 <__lshift>
 800cbd0:	901e      	str	r0, [sp, #120]	; 0x78
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f47f af66 	bne.w	800caa4 <_strtod_l+0x764>
 800cbd8:	e5fe      	b.n	800c7d8 <_strtod_l+0x498>
 800cbda:	465f      	mov	r7, fp
 800cbdc:	d16e      	bne.n	800ccbc <_strtod_l+0x97c>
 800cbde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbe4:	b342      	cbz	r2, 800cc38 <_strtod_l+0x8f8>
 800cbe6:	4a32      	ldr	r2, [pc, #200]	; (800ccb0 <_strtod_l+0x970>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d128      	bne.n	800cc3e <_strtod_l+0x8fe>
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	4650      	mov	r0, sl
 800cbf0:	b1eb      	cbz	r3, 800cc2e <_strtod_l+0x8ee>
 800cbf2:	4a2d      	ldr	r2, [pc, #180]	; (800cca8 <_strtod_l+0x968>)
 800cbf4:	403a      	ands	r2, r7
 800cbf6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cbfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cbfe:	d819      	bhi.n	800cc34 <_strtod_l+0x8f4>
 800cc00:	0d12      	lsrs	r2, r2, #20
 800cc02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc06:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0a:	4298      	cmp	r0, r3
 800cc0c:	d117      	bne.n	800cc3e <_strtod_l+0x8fe>
 800cc0e:	4b29      	ldr	r3, [pc, #164]	; (800ccb4 <_strtod_l+0x974>)
 800cc10:	429f      	cmp	r7, r3
 800cc12:	d102      	bne.n	800cc1a <_strtod_l+0x8da>
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f addf 	beq.w	800c7d8 <_strtod_l+0x498>
 800cc1a:	4b23      	ldr	r3, [pc, #140]	; (800cca8 <_strtod_l+0x968>)
 800cc1c:	403b      	ands	r3, r7
 800cc1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cc22:	f04f 0a00 	mov.w	sl, #0
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1a0      	bne.n	800cb6e <_strtod_l+0x82e>
 800cc2c:	e5de      	b.n	800c7ec <_strtod_l+0x4ac>
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc32:	e7ea      	b.n	800cc0a <_strtod_l+0x8ca>
 800cc34:	460b      	mov	r3, r1
 800cc36:	e7e8      	b.n	800cc0a <_strtod_l+0x8ca>
 800cc38:	ea53 030a 	orrs.w	r3, r3, sl
 800cc3c:	d088      	beq.n	800cb50 <_strtod_l+0x810>
 800cc3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc40:	b1db      	cbz	r3, 800cc7a <_strtod_l+0x93a>
 800cc42:	423b      	tst	r3, r7
 800cc44:	d0ef      	beq.n	800cc26 <_strtod_l+0x8e6>
 800cc46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc48:	9a04      	ldr	r2, [sp, #16]
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	4659      	mov	r1, fp
 800cc4e:	b1c3      	cbz	r3, 800cc82 <_strtod_l+0x942>
 800cc50:	f7ff fb5a 	bl	800c308 <sulp>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc5c:	f7f3 fb16 	bl	800028c <__adddf3>
 800cc60:	4682      	mov	sl, r0
 800cc62:	468b      	mov	fp, r1
 800cc64:	e7df      	b.n	800cc26 <_strtod_l+0x8e6>
 800cc66:	4013      	ands	r3, r2
 800cc68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cc6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cc78:	e7d5      	b.n	800cc26 <_strtod_l+0x8e6>
 800cc7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc7c:	ea13 0f0a 	tst.w	r3, sl
 800cc80:	e7e0      	b.n	800cc44 <_strtod_l+0x904>
 800cc82:	f7ff fb41 	bl	800c308 <sulp>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc8e:	f7f3 fafb 	bl	8000288 <__aeabi_dsub>
 800cc92:	2200      	movs	r2, #0
 800cc94:	2300      	movs	r3, #0
 800cc96:	4682      	mov	sl, r0
 800cc98:	468b      	mov	fp, r1
 800cc9a:	f7f3 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d0c1      	beq.n	800cc26 <_strtod_l+0x8e6>
 800cca2:	e60e      	b.n	800c8c2 <_strtod_l+0x582>
 800cca4:	fffffc02 	.word	0xfffffc02
 800cca8:	7ff00000 	.word	0x7ff00000
 800ccac:	39500000 	.word	0x39500000
 800ccb0:	000fffff 	.word	0x000fffff
 800ccb4:	7fefffff 	.word	0x7fefffff
 800ccb8:	080102d8 	.word	0x080102d8
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f002 f8b6 	bl	800ee30 <__ratio>
 800ccc4:	ec59 8b10 	vmov	r8, r9, d0
 800ccc8:	ee10 0a10 	vmov	r0, s0
 800cccc:	2200      	movs	r2, #0
 800ccce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	f7f3 ff0c 	bl	8000af0 <__aeabi_dcmple>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d07c      	beq.n	800cdd6 <_strtod_l+0xa96>
 800ccdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d04c      	beq.n	800cd7c <_strtod_l+0xa3c>
 800cce2:	4b95      	ldr	r3, [pc, #596]	; (800cf38 <_strtod_l+0xbf8>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ccea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cf38 <_strtod_l+0xbf8>
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	4b92      	ldr	r3, [pc, #584]	; (800cf3c <_strtod_l+0xbfc>)
 800ccf4:	403b      	ands	r3, r7
 800ccf6:	9311      	str	r3, [sp, #68]	; 0x44
 800ccf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ccfa:	4b91      	ldr	r3, [pc, #580]	; (800cf40 <_strtod_l+0xc00>)
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f040 80b2 	bne.w	800ce66 <_strtod_l+0xb26>
 800cd02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cd0e:	ec4b ab10 	vmov	d0, sl, fp
 800cd12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800cd16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd1a:	f001 ffb1 	bl	800ec80 <__ulp>
 800cd1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd22:	ec53 2b10 	vmov	r2, r3, d0
 800cd26:	f7f3 fc67 	bl	80005f8 <__aeabi_dmul>
 800cd2a:	4652      	mov	r2, sl
 800cd2c:	465b      	mov	r3, fp
 800cd2e:	f7f3 faad 	bl	800028c <__adddf3>
 800cd32:	460b      	mov	r3, r1
 800cd34:	4981      	ldr	r1, [pc, #516]	; (800cf3c <_strtod_l+0xbfc>)
 800cd36:	4a83      	ldr	r2, [pc, #524]	; (800cf44 <_strtod_l+0xc04>)
 800cd38:	4019      	ands	r1, r3
 800cd3a:	4291      	cmp	r1, r2
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	d95e      	bls.n	800cdfe <_strtod_l+0xabe>
 800cd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d103      	bne.n	800cd52 <_strtod_l+0xa12>
 800cd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	f43f ad43 	beq.w	800c7d8 <_strtod_l+0x498>
 800cd52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800cf50 <_strtod_l+0xc10>
 800cd56:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cd5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f001 fc63 	bl	800e628 <_Bfree>
 800cd62:	9907      	ldr	r1, [sp, #28]
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 fc5f 	bl	800e628 <_Bfree>
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f001 fc5b 	bl	800e628 <_Bfree>
 800cd72:	4629      	mov	r1, r5
 800cd74:	4620      	mov	r0, r4
 800cd76:	f001 fc57 	bl	800e628 <_Bfree>
 800cd7a:	e613      	b.n	800c9a4 <_strtod_l+0x664>
 800cd7c:	f1ba 0f00 	cmp.w	sl, #0
 800cd80:	d11b      	bne.n	800cdba <_strtod_l+0xa7a>
 800cd82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd86:	b9f3      	cbnz	r3, 800cdc6 <_strtod_l+0xa86>
 800cd88:	4b6b      	ldr	r3, [pc, #428]	; (800cf38 <_strtod_l+0xbf8>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f7f3 fea4 	bl	8000adc <__aeabi_dcmplt>
 800cd94:	b9d0      	cbnz	r0, 800cdcc <_strtod_l+0xa8c>
 800cd96:	4640      	mov	r0, r8
 800cd98:	4649      	mov	r1, r9
 800cd9a:	4b6b      	ldr	r3, [pc, #428]	; (800cf48 <_strtod_l+0xc08>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f7f3 fc2b 	bl	80005f8 <__aeabi_dmul>
 800cda2:	4680      	mov	r8, r0
 800cda4:	4689      	mov	r9, r1
 800cda6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cdaa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800cdae:	931b      	str	r3, [sp, #108]	; 0x6c
 800cdb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cdb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cdb8:	e79b      	b.n	800ccf2 <_strtod_l+0x9b2>
 800cdba:	f1ba 0f01 	cmp.w	sl, #1
 800cdbe:	d102      	bne.n	800cdc6 <_strtod_l+0xa86>
 800cdc0:	2f00      	cmp	r7, #0
 800cdc2:	f43f ad7e 	beq.w	800c8c2 <_strtod_l+0x582>
 800cdc6:	4b61      	ldr	r3, [pc, #388]	; (800cf4c <_strtod_l+0xc0c>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	e78c      	b.n	800cce6 <_strtod_l+0x9a6>
 800cdcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cf48 <_strtod_l+0xc08>
 800cdd0:	f04f 0800 	mov.w	r8, #0
 800cdd4:	e7e7      	b.n	800cda6 <_strtod_l+0xa66>
 800cdd6:	4b5c      	ldr	r3, [pc, #368]	; (800cf48 <_strtod_l+0xc08>)
 800cdd8:	4640      	mov	r0, r8
 800cdda:	4649      	mov	r1, r9
 800cddc:	2200      	movs	r2, #0
 800cdde:	f7f3 fc0b 	bl	80005f8 <__aeabi_dmul>
 800cde2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cde4:	4680      	mov	r8, r0
 800cde6:	4689      	mov	r9, r1
 800cde8:	b933      	cbnz	r3, 800cdf8 <_strtod_l+0xab8>
 800cdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdee:	9012      	str	r0, [sp, #72]	; 0x48
 800cdf0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdf2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cdf6:	e7dd      	b.n	800cdb4 <_strtod_l+0xa74>
 800cdf8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800cdfc:	e7f9      	b.n	800cdf2 <_strtod_l+0xab2>
 800cdfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ce02:	9b04      	ldr	r3, [sp, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1a8      	bne.n	800cd5a <_strtod_l+0xa1a>
 800ce08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce0e:	0d1b      	lsrs	r3, r3, #20
 800ce10:	051b      	lsls	r3, r3, #20
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d1a1      	bne.n	800cd5a <_strtod_l+0xa1a>
 800ce16:	4640      	mov	r0, r8
 800ce18:	4649      	mov	r1, r9
 800ce1a:	f7f3 ff4d 	bl	8000cb8 <__aeabi_d2lz>
 800ce1e:	f7f3 fbbd 	bl	800059c <__aeabi_l2d>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4640      	mov	r0, r8
 800ce28:	4649      	mov	r1, r9
 800ce2a:	f7f3 fa2d 	bl	8000288 <__aeabi_dsub>
 800ce2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce34:	ea43 030a 	orr.w	r3, r3, sl
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	4680      	mov	r8, r0
 800ce3c:	4689      	mov	r9, r1
 800ce3e:	d053      	beq.n	800cee8 <_strtod_l+0xba8>
 800ce40:	a335      	add	r3, pc, #212	; (adr r3, 800cf18 <_strtod_l+0xbd8>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 fe49 	bl	8000adc <__aeabi_dcmplt>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f47f acce 	bne.w	800c7ec <_strtod_l+0x4ac>
 800ce50:	a333      	add	r3, pc, #204	; (adr r3, 800cf20 <_strtod_l+0xbe0>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	4640      	mov	r0, r8
 800ce58:	4649      	mov	r1, r9
 800ce5a:	f7f3 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	f43f af7b 	beq.w	800cd5a <_strtod_l+0xa1a>
 800ce64:	e4c2      	b.n	800c7ec <_strtod_l+0x4ac>
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	b333      	cbz	r3, 800ceb8 <_strtod_l+0xb78>
 800ce6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce70:	d822      	bhi.n	800ceb8 <_strtod_l+0xb78>
 800ce72:	a32d      	add	r3, pc, #180	; (adr r3, 800cf28 <_strtod_l+0xbe8>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 fe38 	bl	8000af0 <__aeabi_dcmple>
 800ce80:	b1a0      	cbz	r0, 800ceac <_strtod_l+0xb6c>
 800ce82:	4649      	mov	r1, r9
 800ce84:	4640      	mov	r0, r8
 800ce86:	f7f3 fe8f 	bl	8000ba8 <__aeabi_d2uiz>
 800ce8a:	2801      	cmp	r0, #1
 800ce8c:	bf38      	it	cc
 800ce8e:	2001      	movcc	r0, #1
 800ce90:	f7f3 fb38 	bl	8000504 <__aeabi_ui2d>
 800ce94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce96:	4680      	mov	r8, r0
 800ce98:	4689      	mov	r9, r1
 800ce9a:	bb13      	cbnz	r3, 800cee2 <_strtod_l+0xba2>
 800ce9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cea0:	9014      	str	r0, [sp, #80]	; 0x50
 800cea2:	9315      	str	r3, [sp, #84]	; 0x54
 800cea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cea8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ceac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ceb0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	930d      	str	r3, [sp, #52]	; 0x34
 800ceb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cebc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cec0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cec4:	f001 fedc 	bl	800ec80 <__ulp>
 800cec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cecc:	ec53 2b10 	vmov	r2, r3, d0
 800ced0:	f7f3 fb92 	bl	80005f8 <__aeabi_dmul>
 800ced4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ced8:	f7f3 f9d8 	bl	800028c <__adddf3>
 800cedc:	4682      	mov	sl, r0
 800cede:	468b      	mov	fp, r1
 800cee0:	e78f      	b.n	800ce02 <_strtod_l+0xac2>
 800cee2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800cee6:	e7dd      	b.n	800cea4 <_strtod_l+0xb64>
 800cee8:	a311      	add	r3, pc, #68	; (adr r3, 800cf30 <_strtod_l+0xbf0>)
 800ceea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceee:	f7f3 fdf5 	bl	8000adc <__aeabi_dcmplt>
 800cef2:	e7b4      	b.n	800ce5e <_strtod_l+0xb1e>
 800cef4:	2300      	movs	r3, #0
 800cef6:	930e      	str	r3, [sp, #56]	; 0x38
 800cef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cefa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	f7ff ba65 	b.w	800c3cc <_strtod_l+0x8c>
 800cf02:	2b65      	cmp	r3, #101	; 0x65
 800cf04:	f43f ab5d 	beq.w	800c5c2 <_strtod_l+0x282>
 800cf08:	2b45      	cmp	r3, #69	; 0x45
 800cf0a:	f43f ab5a 	beq.w	800c5c2 <_strtod_l+0x282>
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f7ff bb92 	b.w	800c638 <_strtod_l+0x2f8>
 800cf14:	f3af 8000 	nop.w
 800cf18:	94a03595 	.word	0x94a03595
 800cf1c:	3fdfffff 	.word	0x3fdfffff
 800cf20:	35afe535 	.word	0x35afe535
 800cf24:	3fe00000 	.word	0x3fe00000
 800cf28:	ffc00000 	.word	0xffc00000
 800cf2c:	41dfffff 	.word	0x41dfffff
 800cf30:	94a03595 	.word	0x94a03595
 800cf34:	3fcfffff 	.word	0x3fcfffff
 800cf38:	3ff00000 	.word	0x3ff00000
 800cf3c:	7ff00000 	.word	0x7ff00000
 800cf40:	7fe00000 	.word	0x7fe00000
 800cf44:	7c9fffff 	.word	0x7c9fffff
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	bff00000 	.word	0xbff00000
 800cf50:	7fefffff 	.word	0x7fefffff

0800cf54 <_strtod_r>:
 800cf54:	4b01      	ldr	r3, [pc, #4]	; (800cf5c <_strtod_r+0x8>)
 800cf56:	f7ff b9f3 	b.w	800c340 <_strtod_l>
 800cf5a:	bf00      	nop
 800cf5c:	200000c8 	.word	0x200000c8

0800cf60 <strtod>:
 800cf60:	460a      	mov	r2, r1
 800cf62:	4601      	mov	r1, r0
 800cf64:	4802      	ldr	r0, [pc, #8]	; (800cf70 <strtod+0x10>)
 800cf66:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <strtod+0x14>)
 800cf68:	6800      	ldr	r0, [r0, #0]
 800cf6a:	f7ff b9e9 	b.w	800c340 <_strtod_l>
 800cf6e:	bf00      	nop
 800cf70:	20000060 	.word	0x20000060
 800cf74:	200000c8 	.word	0x200000c8

0800cf78 <strtok>:
 800cf78:	4b16      	ldr	r3, [pc, #88]	; (800cfd4 <strtok+0x5c>)
 800cf7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf7c:	681e      	ldr	r6, [r3, #0]
 800cf7e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cf80:	4605      	mov	r5, r0
 800cf82:	b9fc      	cbnz	r4, 800cfc4 <strtok+0x4c>
 800cf84:	2050      	movs	r0, #80	; 0x50
 800cf86:	9101      	str	r1, [sp, #4]
 800cf88:	f001 faf4 	bl	800e574 <malloc>
 800cf8c:	9901      	ldr	r1, [sp, #4]
 800cf8e:	65b0      	str	r0, [r6, #88]	; 0x58
 800cf90:	4602      	mov	r2, r0
 800cf92:	b920      	cbnz	r0, 800cf9e <strtok+0x26>
 800cf94:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <strtok+0x60>)
 800cf96:	4811      	ldr	r0, [pc, #68]	; (800cfdc <strtok+0x64>)
 800cf98:	2157      	movs	r1, #87	; 0x57
 800cf9a:	f000 f8cf 	bl	800d13c <__assert_func>
 800cf9e:	e9c0 4400 	strd	r4, r4, [r0]
 800cfa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cfa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cfaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cfae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cfb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cfb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cfba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cfbe:	6184      	str	r4, [r0, #24]
 800cfc0:	7704      	strb	r4, [r0, #28]
 800cfc2:	6244      	str	r4, [r0, #36]	; 0x24
 800cfc4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4628      	mov	r0, r5
 800cfca:	b002      	add	sp, #8
 800cfcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfd0:	f000 b806 	b.w	800cfe0 <__strtok_r>
 800cfd4:	20000060 	.word	0x20000060
 800cfd8:	08010300 	.word	0x08010300
 800cfdc:	08010317 	.word	0x08010317

0800cfe0 <__strtok_r>:
 800cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe2:	b908      	cbnz	r0, 800cfe8 <__strtok_r+0x8>
 800cfe4:	6810      	ldr	r0, [r2, #0]
 800cfe6:	b188      	cbz	r0, 800d00c <__strtok_r+0x2c>
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4620      	mov	r0, r4
 800cfec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cff0:	460f      	mov	r7, r1
 800cff2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cff6:	b91e      	cbnz	r6, 800d000 <__strtok_r+0x20>
 800cff8:	b965      	cbnz	r5, 800d014 <__strtok_r+0x34>
 800cffa:	6015      	str	r5, [r2, #0]
 800cffc:	4628      	mov	r0, r5
 800cffe:	e005      	b.n	800d00c <__strtok_r+0x2c>
 800d000:	42b5      	cmp	r5, r6
 800d002:	d1f6      	bne.n	800cff2 <__strtok_r+0x12>
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1f0      	bne.n	800cfea <__strtok_r+0xa>
 800d008:	6014      	str	r4, [r2, #0]
 800d00a:	7003      	strb	r3, [r0, #0]
 800d00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d00e:	461c      	mov	r4, r3
 800d010:	e00c      	b.n	800d02c <__strtok_r+0x4c>
 800d012:	b915      	cbnz	r5, 800d01a <__strtok_r+0x3a>
 800d014:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d018:	460e      	mov	r6, r1
 800d01a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d01e:	42ab      	cmp	r3, r5
 800d020:	d1f7      	bne.n	800d012 <__strtok_r+0x32>
 800d022:	2b00      	cmp	r3, #0
 800d024:	d0f3      	beq.n	800d00e <__strtok_r+0x2e>
 800d026:	2300      	movs	r3, #0
 800d028:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d02c:	6014      	str	r4, [r2, #0]
 800d02e:	e7ed      	b.n	800d00c <__strtok_r+0x2c>

0800d030 <_strtol_l.isra.0>:
 800d030:	2b01      	cmp	r3, #1
 800d032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d036:	d001      	beq.n	800d03c <_strtol_l.isra.0+0xc>
 800d038:	2b24      	cmp	r3, #36	; 0x24
 800d03a:	d906      	bls.n	800d04a <_strtol_l.isra.0+0x1a>
 800d03c:	f7fe fa38 	bl	800b4b0 <__errno>
 800d040:	2316      	movs	r3, #22
 800d042:	6003      	str	r3, [r0, #0]
 800d044:	2000      	movs	r0, #0
 800d046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04a:	4f3a      	ldr	r7, [pc, #232]	; (800d134 <_strtol_l.isra.0+0x104>)
 800d04c:	468e      	mov	lr, r1
 800d04e:	4676      	mov	r6, lr
 800d050:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d054:	5de5      	ldrb	r5, [r4, r7]
 800d056:	f015 0508 	ands.w	r5, r5, #8
 800d05a:	d1f8      	bne.n	800d04e <_strtol_l.isra.0+0x1e>
 800d05c:	2c2d      	cmp	r4, #45	; 0x2d
 800d05e:	d134      	bne.n	800d0ca <_strtol_l.isra.0+0x9a>
 800d060:	f89e 4000 	ldrb.w	r4, [lr]
 800d064:	f04f 0801 	mov.w	r8, #1
 800d068:	f106 0e02 	add.w	lr, r6, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d05c      	beq.n	800d12a <_strtol_l.isra.0+0xfa>
 800d070:	2b10      	cmp	r3, #16
 800d072:	d10c      	bne.n	800d08e <_strtol_l.isra.0+0x5e>
 800d074:	2c30      	cmp	r4, #48	; 0x30
 800d076:	d10a      	bne.n	800d08e <_strtol_l.isra.0+0x5e>
 800d078:	f89e 4000 	ldrb.w	r4, [lr]
 800d07c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d080:	2c58      	cmp	r4, #88	; 0x58
 800d082:	d14d      	bne.n	800d120 <_strtol_l.isra.0+0xf0>
 800d084:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d088:	2310      	movs	r3, #16
 800d08a:	f10e 0e02 	add.w	lr, lr, #2
 800d08e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d092:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800d096:	2600      	movs	r6, #0
 800d098:	fbbc f9f3 	udiv	r9, ip, r3
 800d09c:	4635      	mov	r5, r6
 800d09e:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d0a6:	2f09      	cmp	r7, #9
 800d0a8:	d818      	bhi.n	800d0dc <_strtol_l.isra.0+0xac>
 800d0aa:	463c      	mov	r4, r7
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	dd24      	ble.n	800d0fa <_strtol_l.isra.0+0xca>
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	db1f      	blt.n	800d0f4 <_strtol_l.isra.0+0xc4>
 800d0b4:	45a9      	cmp	r9, r5
 800d0b6:	d31d      	bcc.n	800d0f4 <_strtol_l.isra.0+0xc4>
 800d0b8:	d101      	bne.n	800d0be <_strtol_l.isra.0+0x8e>
 800d0ba:	45a2      	cmp	sl, r4
 800d0bc:	db1a      	blt.n	800d0f4 <_strtol_l.isra.0+0xc4>
 800d0be:	fb05 4503 	mla	r5, r5, r3, r4
 800d0c2:	2601      	movs	r6, #1
 800d0c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d0c8:	e7eb      	b.n	800d0a2 <_strtol_l.isra.0+0x72>
 800d0ca:	2c2b      	cmp	r4, #43	; 0x2b
 800d0cc:	bf08      	it	eq
 800d0ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d0d2:	46a8      	mov	r8, r5
 800d0d4:	bf08      	it	eq
 800d0d6:	f106 0e02 	addeq.w	lr, r6, #2
 800d0da:	e7c7      	b.n	800d06c <_strtol_l.isra.0+0x3c>
 800d0dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d0e0:	2f19      	cmp	r7, #25
 800d0e2:	d801      	bhi.n	800d0e8 <_strtol_l.isra.0+0xb8>
 800d0e4:	3c37      	subs	r4, #55	; 0x37
 800d0e6:	e7e1      	b.n	800d0ac <_strtol_l.isra.0+0x7c>
 800d0e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d0ec:	2f19      	cmp	r7, #25
 800d0ee:	d804      	bhi.n	800d0fa <_strtol_l.isra.0+0xca>
 800d0f0:	3c57      	subs	r4, #87	; 0x57
 800d0f2:	e7db      	b.n	800d0ac <_strtol_l.isra.0+0x7c>
 800d0f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d0f8:	e7e4      	b.n	800d0c4 <_strtol_l.isra.0+0x94>
 800d0fa:	2e00      	cmp	r6, #0
 800d0fc:	da05      	bge.n	800d10a <_strtol_l.isra.0+0xda>
 800d0fe:	2322      	movs	r3, #34	; 0x22
 800d100:	6003      	str	r3, [r0, #0]
 800d102:	4665      	mov	r5, ip
 800d104:	b942      	cbnz	r2, 800d118 <_strtol_l.isra.0+0xe8>
 800d106:	4628      	mov	r0, r5
 800d108:	e79d      	b.n	800d046 <_strtol_l.isra.0+0x16>
 800d10a:	f1b8 0f00 	cmp.w	r8, #0
 800d10e:	d000      	beq.n	800d112 <_strtol_l.isra.0+0xe2>
 800d110:	426d      	negs	r5, r5
 800d112:	2a00      	cmp	r2, #0
 800d114:	d0f7      	beq.n	800d106 <_strtol_l.isra.0+0xd6>
 800d116:	b10e      	cbz	r6, 800d11c <_strtol_l.isra.0+0xec>
 800d118:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800d11c:	6011      	str	r1, [r2, #0]
 800d11e:	e7f2      	b.n	800d106 <_strtol_l.isra.0+0xd6>
 800d120:	2430      	movs	r4, #48	; 0x30
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1b3      	bne.n	800d08e <_strtol_l.isra.0+0x5e>
 800d126:	2308      	movs	r3, #8
 800d128:	e7b1      	b.n	800d08e <_strtol_l.isra.0+0x5e>
 800d12a:	2c30      	cmp	r4, #48	; 0x30
 800d12c:	d0a4      	beq.n	800d078 <_strtol_l.isra.0+0x48>
 800d12e:	230a      	movs	r3, #10
 800d130:	e7ad      	b.n	800d08e <_strtol_l.isra.0+0x5e>
 800d132:	bf00      	nop
 800d134:	080103b5 	.word	0x080103b5

0800d138 <_strtol_r>:
 800d138:	f7ff bf7a 	b.w	800d030 <_strtol_l.isra.0>

0800d13c <__assert_func>:
 800d13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d13e:	4614      	mov	r4, r2
 800d140:	461a      	mov	r2, r3
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <__assert_func+0x2c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4605      	mov	r5, r0
 800d148:	68d8      	ldr	r0, [r3, #12]
 800d14a:	b14c      	cbz	r4, 800d160 <__assert_func+0x24>
 800d14c:	4b07      	ldr	r3, [pc, #28]	; (800d16c <__assert_func+0x30>)
 800d14e:	9100      	str	r1, [sp, #0]
 800d150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d154:	4906      	ldr	r1, [pc, #24]	; (800d170 <__assert_func+0x34>)
 800d156:	462b      	mov	r3, r5
 800d158:	f000 fe86 	bl	800de68 <fiprintf>
 800d15c:	f7fe f99d 	bl	800b49a <abort>
 800d160:	4b04      	ldr	r3, [pc, #16]	; (800d174 <__assert_func+0x38>)
 800d162:	461c      	mov	r4, r3
 800d164:	e7f3      	b.n	800d14e <__assert_func+0x12>
 800d166:	bf00      	nop
 800d168:	20000060 	.word	0x20000060
 800d16c:	08010378 	.word	0x08010378
 800d170:	08010385 	.word	0x08010385
 800d174:	080103b3 	.word	0x080103b3

0800d178 <quorem>:
 800d178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	6903      	ldr	r3, [r0, #16]
 800d17e:	690c      	ldr	r4, [r1, #16]
 800d180:	42a3      	cmp	r3, r4
 800d182:	4607      	mov	r7, r0
 800d184:	f2c0 8081 	blt.w	800d28a <quorem+0x112>
 800d188:	3c01      	subs	r4, #1
 800d18a:	f101 0814 	add.w	r8, r1, #20
 800d18e:	f100 0514 	add.w	r5, r0, #20
 800d192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d19c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1b0:	d331      	bcc.n	800d216 <quorem+0x9e>
 800d1b2:	f04f 0e00 	mov.w	lr, #0
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	46ac      	mov	ip, r5
 800d1ba:	46f2      	mov	sl, lr
 800d1bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1c0:	b293      	uxth	r3, r2
 800d1c2:	fb06 e303 	mla	r3, r6, r3, lr
 800d1c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d0:	0c12      	lsrs	r2, r2, #16
 800d1d2:	f8dc a000 	ldr.w	sl, [ip]
 800d1d6:	fb06 e202 	mla	r2, r6, r2, lr
 800d1da:	fa13 f38a 	uxtah	r3, r3, sl
 800d1de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1e2:	fa1f fa82 	uxth.w	sl, r2
 800d1e6:	f8dc 2000 	ldr.w	r2, [ip]
 800d1ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d1ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1f8:	4581      	cmp	r9, r0
 800d1fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d1fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d202:	d2db      	bcs.n	800d1bc <quorem+0x44>
 800d204:	f855 300b 	ldr.w	r3, [r5, fp]
 800d208:	b92b      	cbnz	r3, 800d216 <quorem+0x9e>
 800d20a:	9b01      	ldr	r3, [sp, #4]
 800d20c:	3b04      	subs	r3, #4
 800d20e:	429d      	cmp	r5, r3
 800d210:	461a      	mov	r2, r3
 800d212:	d32e      	bcc.n	800d272 <quorem+0xfa>
 800d214:	613c      	str	r4, [r7, #16]
 800d216:	4638      	mov	r0, r7
 800d218:	f001 fc8e 	bl	800eb38 <__mcmp>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	db24      	blt.n	800d26a <quorem+0xf2>
 800d220:	3601      	adds	r6, #1
 800d222:	4628      	mov	r0, r5
 800d224:	f04f 0c00 	mov.w	ip, #0
 800d228:	f858 2b04 	ldr.w	r2, [r8], #4
 800d22c:	f8d0 e000 	ldr.w	lr, [r0]
 800d230:	b293      	uxth	r3, r2
 800d232:	ebac 0303 	sub.w	r3, ip, r3
 800d236:	0c12      	lsrs	r2, r2, #16
 800d238:	fa13 f38e 	uxtah	r3, r3, lr
 800d23c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d244:	b29b      	uxth	r3, r3
 800d246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d24a:	45c1      	cmp	r9, r8
 800d24c:	f840 3b04 	str.w	r3, [r0], #4
 800d250:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d254:	d2e8      	bcs.n	800d228 <quorem+0xb0>
 800d256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d25e:	b922      	cbnz	r2, 800d26a <quorem+0xf2>
 800d260:	3b04      	subs	r3, #4
 800d262:	429d      	cmp	r5, r3
 800d264:	461a      	mov	r2, r3
 800d266:	d30a      	bcc.n	800d27e <quorem+0x106>
 800d268:	613c      	str	r4, [r7, #16]
 800d26a:	4630      	mov	r0, r6
 800d26c:	b003      	add	sp, #12
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	6812      	ldr	r2, [r2, #0]
 800d274:	3b04      	subs	r3, #4
 800d276:	2a00      	cmp	r2, #0
 800d278:	d1cc      	bne.n	800d214 <quorem+0x9c>
 800d27a:	3c01      	subs	r4, #1
 800d27c:	e7c7      	b.n	800d20e <quorem+0x96>
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	3b04      	subs	r3, #4
 800d282:	2a00      	cmp	r2, #0
 800d284:	d1f0      	bne.n	800d268 <quorem+0xf0>
 800d286:	3c01      	subs	r4, #1
 800d288:	e7eb      	b.n	800d262 <quorem+0xea>
 800d28a:	2000      	movs	r0, #0
 800d28c:	e7ee      	b.n	800d26c <quorem+0xf4>
	...

0800d290 <_dtoa_r>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	ed2d 8b02 	vpush	{d8}
 800d298:	ec57 6b10 	vmov	r6, r7, d0
 800d29c:	b095      	sub	sp, #84	; 0x54
 800d29e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2a4:	9105      	str	r1, [sp, #20]
 800d2a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d2ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2b0:	b975      	cbnz	r5, 800d2d0 <_dtoa_r+0x40>
 800d2b2:	2010      	movs	r0, #16
 800d2b4:	f001 f95e 	bl	800e574 <malloc>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	6260      	str	r0, [r4, #36]	; 0x24
 800d2bc:	b920      	cbnz	r0, 800d2c8 <_dtoa_r+0x38>
 800d2be:	4bb2      	ldr	r3, [pc, #712]	; (800d588 <_dtoa_r+0x2f8>)
 800d2c0:	21ea      	movs	r1, #234	; 0xea
 800d2c2:	48b2      	ldr	r0, [pc, #712]	; (800d58c <_dtoa_r+0x2fc>)
 800d2c4:	f7ff ff3a 	bl	800d13c <__assert_func>
 800d2c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2cc:	6005      	str	r5, [r0, #0]
 800d2ce:	60c5      	str	r5, [r0, #12]
 800d2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	b151      	cbz	r1, 800d2ec <_dtoa_r+0x5c>
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	604a      	str	r2, [r1, #4]
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4093      	lsls	r3, r2
 800d2de:	608b      	str	r3, [r1, #8]
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f001 f9a1 	bl	800e628 <_Bfree>
 800d2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	1e3b      	subs	r3, r7, #0
 800d2ee:	bfb9      	ittee	lt
 800d2f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2f4:	9303      	strlt	r3, [sp, #12]
 800d2f6:	2300      	movge	r3, #0
 800d2f8:	f8c8 3000 	strge.w	r3, [r8]
 800d2fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d300:	4ba3      	ldr	r3, [pc, #652]	; (800d590 <_dtoa_r+0x300>)
 800d302:	bfbc      	itt	lt
 800d304:	2201      	movlt	r2, #1
 800d306:	f8c8 2000 	strlt.w	r2, [r8]
 800d30a:	ea33 0309 	bics.w	r3, r3, r9
 800d30e:	d11b      	bne.n	800d348 <_dtoa_r+0xb8>
 800d310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d312:	f242 730f 	movw	r3, #9999	; 0x270f
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d31c:	4333      	orrs	r3, r6
 800d31e:	f000 857a 	beq.w	800de16 <_dtoa_r+0xb86>
 800d322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d324:	b963      	cbnz	r3, 800d340 <_dtoa_r+0xb0>
 800d326:	4b9b      	ldr	r3, [pc, #620]	; (800d594 <_dtoa_r+0x304>)
 800d328:	e024      	b.n	800d374 <_dtoa_r+0xe4>
 800d32a:	4b9b      	ldr	r3, [pc, #620]	; (800d598 <_dtoa_r+0x308>)
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	3308      	adds	r3, #8
 800d330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	9800      	ldr	r0, [sp, #0]
 800d336:	b015      	add	sp, #84	; 0x54
 800d338:	ecbd 8b02 	vpop	{d8}
 800d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d340:	4b94      	ldr	r3, [pc, #592]	; (800d594 <_dtoa_r+0x304>)
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	3303      	adds	r3, #3
 800d346:	e7f3      	b.n	800d330 <_dtoa_r+0xa0>
 800d348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d34c:	2200      	movs	r2, #0
 800d34e:	ec51 0b17 	vmov	r0, r1, d7
 800d352:	2300      	movs	r3, #0
 800d354:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d358:	f7f3 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d35c:	4680      	mov	r8, r0
 800d35e:	b158      	cbz	r0, 800d378 <_dtoa_r+0xe8>
 800d360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d362:	2301      	movs	r3, #1
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 8551 	beq.w	800de10 <_dtoa_r+0xb80>
 800d36e:	488b      	ldr	r0, [pc, #556]	; (800d59c <_dtoa_r+0x30c>)
 800d370:	6018      	str	r0, [r3, #0]
 800d372:	1e43      	subs	r3, r0, #1
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	e7dd      	b.n	800d334 <_dtoa_r+0xa4>
 800d378:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d37c:	aa12      	add	r2, sp, #72	; 0x48
 800d37e:	a913      	add	r1, sp, #76	; 0x4c
 800d380:	4620      	mov	r0, r4
 800d382:	f001 fcf9 	bl	800ed78 <__d2b>
 800d386:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d38a:	4683      	mov	fp, r0
 800d38c:	2d00      	cmp	r5, #0
 800d38e:	d07c      	beq.n	800d48a <_dtoa_r+0x1fa>
 800d390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d392:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d39a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d39e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d3a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d3a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3aa:	4b7d      	ldr	r3, [pc, #500]	; (800d5a0 <_dtoa_r+0x310>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f2 ff69 	bl	8000288 <__aeabi_dsub>
 800d3b6:	a36e      	add	r3, pc, #440	; (adr r3, 800d570 <_dtoa_r+0x2e0>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f3 f91c 	bl	80005f8 <__aeabi_dmul>
 800d3c0:	a36d      	add	r3, pc, #436	; (adr r3, 800d578 <_dtoa_r+0x2e8>)
 800d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c6:	f7f2 ff61 	bl	800028c <__adddf3>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	460f      	mov	r7, r1
 800d3d0:	f7f3 f8a8 	bl	8000524 <__aeabi_i2d>
 800d3d4:	a36a      	add	r3, pc, #424	; (adr r3, 800d580 <_dtoa_r+0x2f0>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	f7f3 f90d 	bl	80005f8 <__aeabi_dmul>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	f7f2 ff51 	bl	800028c <__adddf3>
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	460f      	mov	r7, r1
 800d3ee:	f7f3 fbb3 	bl	8000b58 <__aeabi_d2iz>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	4682      	mov	sl, r0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f3 fb6e 	bl	8000adc <__aeabi_dcmplt>
 800d400:	b148      	cbz	r0, 800d416 <_dtoa_r+0x186>
 800d402:	4650      	mov	r0, sl
 800d404:	f7f3 f88e 	bl	8000524 <__aeabi_i2d>
 800d408:	4632      	mov	r2, r6
 800d40a:	463b      	mov	r3, r7
 800d40c:	f7f3 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d410:	b908      	cbnz	r0, 800d416 <_dtoa_r+0x186>
 800d412:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d416:	f1ba 0f16 	cmp.w	sl, #22
 800d41a:	d854      	bhi.n	800d4c6 <_dtoa_r+0x236>
 800d41c:	4b61      	ldr	r3, [pc, #388]	; (800d5a4 <_dtoa_r+0x314>)
 800d41e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d42a:	f7f3 fb57 	bl	8000adc <__aeabi_dcmplt>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d04b      	beq.n	800d4ca <_dtoa_r+0x23a>
 800d432:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d436:	2300      	movs	r3, #0
 800d438:	930e      	str	r3, [sp, #56]	; 0x38
 800d43a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d43c:	1b5d      	subs	r5, r3, r5
 800d43e:	1e6b      	subs	r3, r5, #1
 800d440:	9304      	str	r3, [sp, #16]
 800d442:	bf43      	ittte	mi
 800d444:	2300      	movmi	r3, #0
 800d446:	f1c5 0801 	rsbmi	r8, r5, #1
 800d44a:	9304      	strmi	r3, [sp, #16]
 800d44c:	f04f 0800 	movpl.w	r8, #0
 800d450:	f1ba 0f00 	cmp.w	sl, #0
 800d454:	db3b      	blt.n	800d4ce <_dtoa_r+0x23e>
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d45c:	4453      	add	r3, sl
 800d45e:	9304      	str	r3, [sp, #16]
 800d460:	2300      	movs	r3, #0
 800d462:	9306      	str	r3, [sp, #24]
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	2b09      	cmp	r3, #9
 800d468:	d869      	bhi.n	800d53e <_dtoa_r+0x2ae>
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	bfc4      	itt	gt
 800d46e:	3b04      	subgt	r3, #4
 800d470:	9305      	strgt	r3, [sp, #20]
 800d472:	9b05      	ldr	r3, [sp, #20]
 800d474:	f1a3 0302 	sub.w	r3, r3, #2
 800d478:	bfcc      	ite	gt
 800d47a:	2500      	movgt	r5, #0
 800d47c:	2501      	movle	r5, #1
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d869      	bhi.n	800d556 <_dtoa_r+0x2c6>
 800d482:	e8df f003 	tbb	[pc, r3]
 800d486:	4e2c      	.short	0x4e2c
 800d488:	5a4c      	.short	0x5a4c
 800d48a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d48e:	441d      	add	r5, r3
 800d490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d494:	2b20      	cmp	r3, #32
 800d496:	bfc1      	itttt	gt
 800d498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d49c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4a0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d4a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4a8:	bfda      	itte	le
 800d4aa:	f1c3 0320 	rsble	r3, r3, #32
 800d4ae:	fa06 f003 	lslle.w	r0, r6, r3
 800d4b2:	4318      	orrgt	r0, r3
 800d4b4:	f7f3 f826 	bl	8000504 <__aeabi_ui2d>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	4606      	mov	r6, r0
 800d4bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4c0:	3d01      	subs	r5, #1
 800d4c2:	9310      	str	r3, [sp, #64]	; 0x40
 800d4c4:	e771      	b.n	800d3aa <_dtoa_r+0x11a>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e7b6      	b.n	800d438 <_dtoa_r+0x1a8>
 800d4ca:	900e      	str	r0, [sp, #56]	; 0x38
 800d4cc:	e7b5      	b.n	800d43a <_dtoa_r+0x1aa>
 800d4ce:	f1ca 0300 	rsb	r3, sl, #0
 800d4d2:	9306      	str	r3, [sp, #24]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	eba8 080a 	sub.w	r8, r8, sl
 800d4da:	930d      	str	r3, [sp, #52]	; 0x34
 800d4dc:	e7c2      	b.n	800d464 <_dtoa_r+0x1d4>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9308      	str	r3, [sp, #32]
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	dc39      	bgt.n	800d55c <_dtoa_r+0x2cc>
 800d4e8:	f04f 0901 	mov.w	r9, #1
 800d4ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d4f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	6042      	str	r2, [r0, #4]
 800d4fc:	2204      	movs	r2, #4
 800d4fe:	f102 0614 	add.w	r6, r2, #20
 800d502:	429e      	cmp	r6, r3
 800d504:	6841      	ldr	r1, [r0, #4]
 800d506:	d92f      	bls.n	800d568 <_dtoa_r+0x2d8>
 800d508:	4620      	mov	r0, r4
 800d50a:	f001 f84d 	bl	800e5a8 <_Balloc>
 800d50e:	9000      	str	r0, [sp, #0]
 800d510:	2800      	cmp	r0, #0
 800d512:	d14b      	bne.n	800d5ac <_dtoa_r+0x31c>
 800d514:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <_dtoa_r+0x318>)
 800d516:	4602      	mov	r2, r0
 800d518:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d51c:	e6d1      	b.n	800d2c2 <_dtoa_r+0x32>
 800d51e:	2301      	movs	r3, #1
 800d520:	e7de      	b.n	800d4e0 <_dtoa_r+0x250>
 800d522:	2300      	movs	r3, #0
 800d524:	9308      	str	r3, [sp, #32]
 800d526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d528:	eb0a 0903 	add.w	r9, sl, r3
 800d52c:	f109 0301 	add.w	r3, r9, #1
 800d530:	2b01      	cmp	r3, #1
 800d532:	9301      	str	r3, [sp, #4]
 800d534:	bfb8      	it	lt
 800d536:	2301      	movlt	r3, #1
 800d538:	e7dd      	b.n	800d4f6 <_dtoa_r+0x266>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e7f2      	b.n	800d524 <_dtoa_r+0x294>
 800d53e:	2501      	movs	r5, #1
 800d540:	2300      	movs	r3, #0
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	9508      	str	r5, [sp, #32]
 800d546:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d54a:	2200      	movs	r2, #0
 800d54c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d550:	2312      	movs	r3, #18
 800d552:	9209      	str	r2, [sp, #36]	; 0x24
 800d554:	e7cf      	b.n	800d4f6 <_dtoa_r+0x266>
 800d556:	2301      	movs	r3, #1
 800d558:	9308      	str	r3, [sp, #32]
 800d55a:	e7f4      	b.n	800d546 <_dtoa_r+0x2b6>
 800d55c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d560:	f8cd 9004 	str.w	r9, [sp, #4]
 800d564:	464b      	mov	r3, r9
 800d566:	e7c6      	b.n	800d4f6 <_dtoa_r+0x266>
 800d568:	3101      	adds	r1, #1
 800d56a:	6041      	str	r1, [r0, #4]
 800d56c:	0052      	lsls	r2, r2, #1
 800d56e:	e7c6      	b.n	800d4fe <_dtoa_r+0x26e>
 800d570:	636f4361 	.word	0x636f4361
 800d574:	3fd287a7 	.word	0x3fd287a7
 800d578:	8b60c8b3 	.word	0x8b60c8b3
 800d57c:	3fc68a28 	.word	0x3fc68a28
 800d580:	509f79fb 	.word	0x509f79fb
 800d584:	3fd34413 	.word	0x3fd34413
 800d588:	08010300 	.word	0x08010300
 800d58c:	080104c2 	.word	0x080104c2
 800d590:	7ff00000 	.word	0x7ff00000
 800d594:	080104be 	.word	0x080104be
 800d598:	080104b5 	.word	0x080104b5
 800d59c:	08010285 	.word	0x08010285
 800d5a0:	3ff80000 	.word	0x3ff80000
 800d5a4:	08010638 	.word	0x08010638
 800d5a8:	08010521 	.word	0x08010521
 800d5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ae:	9a00      	ldr	r2, [sp, #0]
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	9b01      	ldr	r3, [sp, #4]
 800d5b4:	2b0e      	cmp	r3, #14
 800d5b6:	f200 80ad 	bhi.w	800d714 <_dtoa_r+0x484>
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	f000 80aa 	beq.w	800d714 <_dtoa_r+0x484>
 800d5c0:	f1ba 0f00 	cmp.w	sl, #0
 800d5c4:	dd36      	ble.n	800d634 <_dtoa_r+0x3a4>
 800d5c6:	4ac3      	ldr	r2, [pc, #780]	; (800d8d4 <_dtoa_r+0x644>)
 800d5c8:	f00a 030f 	and.w	r3, sl, #15
 800d5cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5d0:	ed93 7b00 	vldr	d7, [r3]
 800d5d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d5d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d5dc:	eeb0 8a47 	vmov.f32	s16, s14
 800d5e0:	eef0 8a67 	vmov.f32	s17, s15
 800d5e4:	d016      	beq.n	800d614 <_dtoa_r+0x384>
 800d5e6:	4bbc      	ldr	r3, [pc, #752]	; (800d8d8 <_dtoa_r+0x648>)
 800d5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d5ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5f0:	f7f3 f92c 	bl	800084c <__aeabi_ddiv>
 800d5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5f8:	f007 070f 	and.w	r7, r7, #15
 800d5fc:	2503      	movs	r5, #3
 800d5fe:	4eb6      	ldr	r6, [pc, #728]	; (800d8d8 <_dtoa_r+0x648>)
 800d600:	b957      	cbnz	r7, 800d618 <_dtoa_r+0x388>
 800d602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d606:	ec53 2b18 	vmov	r2, r3, d8
 800d60a:	f7f3 f91f 	bl	800084c <__aeabi_ddiv>
 800d60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d612:	e029      	b.n	800d668 <_dtoa_r+0x3d8>
 800d614:	2502      	movs	r5, #2
 800d616:	e7f2      	b.n	800d5fe <_dtoa_r+0x36e>
 800d618:	07f9      	lsls	r1, r7, #31
 800d61a:	d508      	bpl.n	800d62e <_dtoa_r+0x39e>
 800d61c:	ec51 0b18 	vmov	r0, r1, d8
 800d620:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d624:	f7f2 ffe8 	bl	80005f8 <__aeabi_dmul>
 800d628:	ec41 0b18 	vmov	d8, r0, r1
 800d62c:	3501      	adds	r5, #1
 800d62e:	107f      	asrs	r7, r7, #1
 800d630:	3608      	adds	r6, #8
 800d632:	e7e5      	b.n	800d600 <_dtoa_r+0x370>
 800d634:	f000 80a6 	beq.w	800d784 <_dtoa_r+0x4f4>
 800d638:	f1ca 0600 	rsb	r6, sl, #0
 800d63c:	4ba5      	ldr	r3, [pc, #660]	; (800d8d4 <_dtoa_r+0x644>)
 800d63e:	4fa6      	ldr	r7, [pc, #664]	; (800d8d8 <_dtoa_r+0x648>)
 800d640:	f006 020f 	and.w	r2, r6, #15
 800d644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d658:	1136      	asrs	r6, r6, #4
 800d65a:	2300      	movs	r3, #0
 800d65c:	2502      	movs	r5, #2
 800d65e:	2e00      	cmp	r6, #0
 800d660:	f040 8085 	bne.w	800d76e <_dtoa_r+0x4de>
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1d2      	bne.n	800d60e <_dtoa_r+0x37e>
 800d668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f000 808c 	beq.w	800d788 <_dtoa_r+0x4f8>
 800d670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d674:	4b99      	ldr	r3, [pc, #612]	; (800d8dc <_dtoa_r+0x64c>)
 800d676:	2200      	movs	r2, #0
 800d678:	4630      	mov	r0, r6
 800d67a:	4639      	mov	r1, r7
 800d67c:	f7f3 fa2e 	bl	8000adc <__aeabi_dcmplt>
 800d680:	2800      	cmp	r0, #0
 800d682:	f000 8081 	beq.w	800d788 <_dtoa_r+0x4f8>
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d07d      	beq.n	800d788 <_dtoa_r+0x4f8>
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	dd3c      	ble.n	800d70c <_dtoa_r+0x47c>
 800d692:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d696:	9307      	str	r3, [sp, #28]
 800d698:	2200      	movs	r2, #0
 800d69a:	4b91      	ldr	r3, [pc, #580]	; (800d8e0 <_dtoa_r+0x650>)
 800d69c:	4630      	mov	r0, r6
 800d69e:	4639      	mov	r1, r7
 800d6a0:	f7f2 ffaa 	bl	80005f8 <__aeabi_dmul>
 800d6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6a8:	3501      	adds	r5, #1
 800d6aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d6ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f7f2 ff36 	bl	8000524 <__aeabi_i2d>
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	f7f2 ff9c 	bl	80005f8 <__aeabi_dmul>
 800d6c0:	4b88      	ldr	r3, [pc, #544]	; (800d8e4 <_dtoa_r+0x654>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f7f2 fde2 	bl	800028c <__adddf3>
 800d6c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d6cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d15c      	bne.n	800d792 <_dtoa_r+0x502>
 800d6d8:	4b83      	ldr	r3, [pc, #524]	; (800d8e8 <_dtoa_r+0x658>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	4639      	mov	r1, r7
 800d6e0:	f7f2 fdd2 	bl	8000288 <__aeabi_dsub>
 800d6e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f3 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f040 8296 	bne.w	800dc22 <_dtoa_r+0x992>
 800d6f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d700:	4639      	mov	r1, r7
 800d702:	f7f3 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800d706:	2800      	cmp	r0, #0
 800d708:	f040 8288 	bne.w	800dc1c <_dtoa_r+0x98c>
 800d70c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d716:	2b00      	cmp	r3, #0
 800d718:	f2c0 8158 	blt.w	800d9cc <_dtoa_r+0x73c>
 800d71c:	f1ba 0f0e 	cmp.w	sl, #14
 800d720:	f300 8154 	bgt.w	800d9cc <_dtoa_r+0x73c>
 800d724:	4b6b      	ldr	r3, [pc, #428]	; (800d8d4 <_dtoa_r+0x644>)
 800d726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d72a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d730:	2b00      	cmp	r3, #0
 800d732:	f280 80e3 	bge.w	800d8fc <_dtoa_r+0x66c>
 800d736:	9b01      	ldr	r3, [sp, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f300 80df 	bgt.w	800d8fc <_dtoa_r+0x66c>
 800d73e:	f040 826d 	bne.w	800dc1c <_dtoa_r+0x98c>
 800d742:	4b69      	ldr	r3, [pc, #420]	; (800d8e8 <_dtoa_r+0x658>)
 800d744:	2200      	movs	r2, #0
 800d746:	4640      	mov	r0, r8
 800d748:	4649      	mov	r1, r9
 800d74a:	f7f2 ff55 	bl	80005f8 <__aeabi_dmul>
 800d74e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d752:	f7f3 f9d7 	bl	8000b04 <__aeabi_dcmpge>
 800d756:	9e01      	ldr	r6, [sp, #4]
 800d758:	4637      	mov	r7, r6
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f040 8243 	bne.w	800dbe6 <_dtoa_r+0x956>
 800d760:	9d00      	ldr	r5, [sp, #0]
 800d762:	2331      	movs	r3, #49	; 0x31
 800d764:	f805 3b01 	strb.w	r3, [r5], #1
 800d768:	f10a 0a01 	add.w	sl, sl, #1
 800d76c:	e23f      	b.n	800dbee <_dtoa_r+0x95e>
 800d76e:	07f2      	lsls	r2, r6, #31
 800d770:	d505      	bpl.n	800d77e <_dtoa_r+0x4ee>
 800d772:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d776:	f7f2 ff3f 	bl	80005f8 <__aeabi_dmul>
 800d77a:	3501      	adds	r5, #1
 800d77c:	2301      	movs	r3, #1
 800d77e:	1076      	asrs	r6, r6, #1
 800d780:	3708      	adds	r7, #8
 800d782:	e76c      	b.n	800d65e <_dtoa_r+0x3ce>
 800d784:	2502      	movs	r5, #2
 800d786:	e76f      	b.n	800d668 <_dtoa_r+0x3d8>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d78e:	930c      	str	r3, [sp, #48]	; 0x30
 800d790:	e78d      	b.n	800d6ae <_dtoa_r+0x41e>
 800d792:	9900      	ldr	r1, [sp, #0]
 800d794:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d798:	4b4e      	ldr	r3, [pc, #312]	; (800d8d4 <_dtoa_r+0x644>)
 800d79a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d79e:	4401      	add	r1, r0
 800d7a0:	9102      	str	r1, [sp, #8]
 800d7a2:	9908      	ldr	r1, [sp, #32]
 800d7a4:	eeb0 8a47 	vmov.f32	s16, s14
 800d7a8:	eef0 8a67 	vmov.f32	s17, s15
 800d7ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d7b4:	2900      	cmp	r1, #0
 800d7b6:	d045      	beq.n	800d844 <_dtoa_r+0x5b4>
 800d7b8:	494c      	ldr	r1, [pc, #304]	; (800d8ec <_dtoa_r+0x65c>)
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	f7f3 f846 	bl	800084c <__aeabi_ddiv>
 800d7c0:	ec53 2b18 	vmov	r2, r3, d8
 800d7c4:	f7f2 fd60 	bl	8000288 <__aeabi_dsub>
 800d7c8:	9d00      	ldr	r5, [sp, #0]
 800d7ca:	ec41 0b18 	vmov	d8, r0, r1
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f7f3 f9c1 	bl	8000b58 <__aeabi_d2iz>
 800d7d6:	900c      	str	r0, [sp, #48]	; 0x30
 800d7d8:	f7f2 fea4 	bl	8000524 <__aeabi_i2d>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	f7f2 fd50 	bl	8000288 <__aeabi_dsub>
 800d7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7ea:	3330      	adds	r3, #48	; 0x30
 800d7ec:	f805 3b01 	strb.w	r3, [r5], #1
 800d7f0:	ec53 2b18 	vmov	r2, r3, d8
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	460f      	mov	r7, r1
 800d7f8:	f7f3 f970 	bl	8000adc <__aeabi_dcmplt>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d165      	bne.n	800d8cc <_dtoa_r+0x63c>
 800d800:	4632      	mov	r2, r6
 800d802:	463b      	mov	r3, r7
 800d804:	4935      	ldr	r1, [pc, #212]	; (800d8dc <_dtoa_r+0x64c>)
 800d806:	2000      	movs	r0, #0
 800d808:	f7f2 fd3e 	bl	8000288 <__aeabi_dsub>
 800d80c:	ec53 2b18 	vmov	r2, r3, d8
 800d810:	f7f3 f964 	bl	8000adc <__aeabi_dcmplt>
 800d814:	2800      	cmp	r0, #0
 800d816:	f040 80b9 	bne.w	800d98c <_dtoa_r+0x6fc>
 800d81a:	9b02      	ldr	r3, [sp, #8]
 800d81c:	429d      	cmp	r5, r3
 800d81e:	f43f af75 	beq.w	800d70c <_dtoa_r+0x47c>
 800d822:	4b2f      	ldr	r3, [pc, #188]	; (800d8e0 <_dtoa_r+0x650>)
 800d824:	ec51 0b18 	vmov	r0, r1, d8
 800d828:	2200      	movs	r2, #0
 800d82a:	f7f2 fee5 	bl	80005f8 <__aeabi_dmul>
 800d82e:	4b2c      	ldr	r3, [pc, #176]	; (800d8e0 <_dtoa_r+0x650>)
 800d830:	ec41 0b18 	vmov	d8, r0, r1
 800d834:	2200      	movs	r2, #0
 800d836:	4630      	mov	r0, r6
 800d838:	4639      	mov	r1, r7
 800d83a:	f7f2 fedd 	bl	80005f8 <__aeabi_dmul>
 800d83e:	4606      	mov	r6, r0
 800d840:	460f      	mov	r7, r1
 800d842:	e7c4      	b.n	800d7ce <_dtoa_r+0x53e>
 800d844:	ec51 0b17 	vmov	r0, r1, d7
 800d848:	f7f2 fed6 	bl	80005f8 <__aeabi_dmul>
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	9d00      	ldr	r5, [sp, #0]
 800d850:	930c      	str	r3, [sp, #48]	; 0x30
 800d852:	ec41 0b18 	vmov	d8, r0, r1
 800d856:	4639      	mov	r1, r7
 800d858:	4630      	mov	r0, r6
 800d85a:	f7f3 f97d 	bl	8000b58 <__aeabi_d2iz>
 800d85e:	9011      	str	r0, [sp, #68]	; 0x44
 800d860:	f7f2 fe60 	bl	8000524 <__aeabi_i2d>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4630      	mov	r0, r6
 800d86a:	4639      	mov	r1, r7
 800d86c:	f7f2 fd0c 	bl	8000288 <__aeabi_dsub>
 800d870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d872:	3330      	adds	r3, #48	; 0x30
 800d874:	f805 3b01 	strb.w	r3, [r5], #1
 800d878:	9b02      	ldr	r3, [sp, #8]
 800d87a:	429d      	cmp	r5, r3
 800d87c:	4606      	mov	r6, r0
 800d87e:	460f      	mov	r7, r1
 800d880:	f04f 0200 	mov.w	r2, #0
 800d884:	d134      	bne.n	800d8f0 <_dtoa_r+0x660>
 800d886:	4b19      	ldr	r3, [pc, #100]	; (800d8ec <_dtoa_r+0x65c>)
 800d888:	ec51 0b18 	vmov	r0, r1, d8
 800d88c:	f7f2 fcfe 	bl	800028c <__adddf3>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4630      	mov	r0, r6
 800d896:	4639      	mov	r1, r7
 800d898:	f7f3 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d175      	bne.n	800d98c <_dtoa_r+0x6fc>
 800d8a0:	ec53 2b18 	vmov	r2, r3, d8
 800d8a4:	4911      	ldr	r1, [pc, #68]	; (800d8ec <_dtoa_r+0x65c>)
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f7f2 fcee 	bl	8000288 <__aeabi_dsub>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	4639      	mov	r1, r7
 800d8b4:	f7f3 f912 	bl	8000adc <__aeabi_dcmplt>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	f43f af27 	beq.w	800d70c <_dtoa_r+0x47c>
 800d8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8c0:	1e6b      	subs	r3, r5, #1
 800d8c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d8c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d8c8:	2b30      	cmp	r3, #48	; 0x30
 800d8ca:	d0f8      	beq.n	800d8be <_dtoa_r+0x62e>
 800d8cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d8d0:	e04a      	b.n	800d968 <_dtoa_r+0x6d8>
 800d8d2:	bf00      	nop
 800d8d4:	08010638 	.word	0x08010638
 800d8d8:	08010610 	.word	0x08010610
 800d8dc:	3ff00000 	.word	0x3ff00000
 800d8e0:	40240000 	.word	0x40240000
 800d8e4:	401c0000 	.word	0x401c0000
 800d8e8:	40140000 	.word	0x40140000
 800d8ec:	3fe00000 	.word	0x3fe00000
 800d8f0:	4baf      	ldr	r3, [pc, #700]	; (800dbb0 <_dtoa_r+0x920>)
 800d8f2:	f7f2 fe81 	bl	80005f8 <__aeabi_dmul>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460f      	mov	r7, r1
 800d8fa:	e7ac      	b.n	800d856 <_dtoa_r+0x5c6>
 800d8fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d900:	9d00      	ldr	r5, [sp, #0]
 800d902:	4642      	mov	r2, r8
 800d904:	464b      	mov	r3, r9
 800d906:	4630      	mov	r0, r6
 800d908:	4639      	mov	r1, r7
 800d90a:	f7f2 ff9f 	bl	800084c <__aeabi_ddiv>
 800d90e:	f7f3 f923 	bl	8000b58 <__aeabi_d2iz>
 800d912:	9002      	str	r0, [sp, #8]
 800d914:	f7f2 fe06 	bl	8000524 <__aeabi_i2d>
 800d918:	4642      	mov	r2, r8
 800d91a:	464b      	mov	r3, r9
 800d91c:	f7f2 fe6c 	bl	80005f8 <__aeabi_dmul>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4630      	mov	r0, r6
 800d926:	4639      	mov	r1, r7
 800d928:	f7f2 fcae 	bl	8000288 <__aeabi_dsub>
 800d92c:	9e02      	ldr	r6, [sp, #8]
 800d92e:	9f01      	ldr	r7, [sp, #4]
 800d930:	3630      	adds	r6, #48	; 0x30
 800d932:	f805 6b01 	strb.w	r6, [r5], #1
 800d936:	9e00      	ldr	r6, [sp, #0]
 800d938:	1bae      	subs	r6, r5, r6
 800d93a:	42b7      	cmp	r7, r6
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	d137      	bne.n	800d9b2 <_dtoa_r+0x722>
 800d942:	f7f2 fca3 	bl	800028c <__adddf3>
 800d946:	4642      	mov	r2, r8
 800d948:	464b      	mov	r3, r9
 800d94a:	4606      	mov	r6, r0
 800d94c:	460f      	mov	r7, r1
 800d94e:	f7f3 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 800d952:	b9c8      	cbnz	r0, 800d988 <_dtoa_r+0x6f8>
 800d954:	4642      	mov	r2, r8
 800d956:	464b      	mov	r3, r9
 800d958:	4630      	mov	r0, r6
 800d95a:	4639      	mov	r1, r7
 800d95c:	f7f3 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d960:	b110      	cbz	r0, 800d968 <_dtoa_r+0x6d8>
 800d962:	9b02      	ldr	r3, [sp, #8]
 800d964:	07d9      	lsls	r1, r3, #31
 800d966:	d40f      	bmi.n	800d988 <_dtoa_r+0x6f8>
 800d968:	4620      	mov	r0, r4
 800d96a:	4659      	mov	r1, fp
 800d96c:	f000 fe5c 	bl	800e628 <_Bfree>
 800d970:	2300      	movs	r3, #0
 800d972:	702b      	strb	r3, [r5, #0]
 800d974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d976:	f10a 0001 	add.w	r0, sl, #1
 800d97a:	6018      	str	r0, [r3, #0]
 800d97c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f43f acd8 	beq.w	800d334 <_dtoa_r+0xa4>
 800d984:	601d      	str	r5, [r3, #0]
 800d986:	e4d5      	b.n	800d334 <_dtoa_r+0xa4>
 800d988:	f8cd a01c 	str.w	sl, [sp, #28]
 800d98c:	462b      	mov	r3, r5
 800d98e:	461d      	mov	r5, r3
 800d990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d994:	2a39      	cmp	r2, #57	; 0x39
 800d996:	d108      	bne.n	800d9aa <_dtoa_r+0x71a>
 800d998:	9a00      	ldr	r2, [sp, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d1f7      	bne.n	800d98e <_dtoa_r+0x6fe>
 800d99e:	9a07      	ldr	r2, [sp, #28]
 800d9a0:	9900      	ldr	r1, [sp, #0]
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	9207      	str	r2, [sp, #28]
 800d9a6:	2230      	movs	r2, #48	; 0x30
 800d9a8:	700a      	strb	r2, [r1, #0]
 800d9aa:	781a      	ldrb	r2, [r3, #0]
 800d9ac:	3201      	adds	r2, #1
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e78c      	b.n	800d8cc <_dtoa_r+0x63c>
 800d9b2:	4b7f      	ldr	r3, [pc, #508]	; (800dbb0 <_dtoa_r+0x920>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f7f2 fe1f 	bl	80005f8 <__aeabi_dmul>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	f7f3 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d09b      	beq.n	800d902 <_dtoa_r+0x672>
 800d9ca:	e7cd      	b.n	800d968 <_dtoa_r+0x6d8>
 800d9cc:	9a08      	ldr	r2, [sp, #32]
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	f000 80c4 	beq.w	800db5c <_dtoa_r+0x8cc>
 800d9d4:	9a05      	ldr	r2, [sp, #20]
 800d9d6:	2a01      	cmp	r2, #1
 800d9d8:	f300 80a8 	bgt.w	800db2c <_dtoa_r+0x89c>
 800d9dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9de:	2a00      	cmp	r2, #0
 800d9e0:	f000 80a0 	beq.w	800db24 <_dtoa_r+0x894>
 800d9e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9e8:	9e06      	ldr	r6, [sp, #24]
 800d9ea:	4645      	mov	r5, r8
 800d9ec:	9a04      	ldr	r2, [sp, #16]
 800d9ee:	2101      	movs	r1, #1
 800d9f0:	441a      	add	r2, r3
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	4498      	add	r8, r3
 800d9f6:	9204      	str	r2, [sp, #16]
 800d9f8:	f000 ff1c 	bl	800e834 <__i2b>
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	2d00      	cmp	r5, #0
 800da00:	dd0b      	ble.n	800da1a <_dtoa_r+0x78a>
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	dd08      	ble.n	800da1a <_dtoa_r+0x78a>
 800da08:	42ab      	cmp	r3, r5
 800da0a:	9a04      	ldr	r2, [sp, #16]
 800da0c:	bfa8      	it	ge
 800da0e:	462b      	movge	r3, r5
 800da10:	eba8 0803 	sub.w	r8, r8, r3
 800da14:	1aed      	subs	r5, r5, r3
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	9b06      	ldr	r3, [sp, #24]
 800da1c:	b1fb      	cbz	r3, 800da5e <_dtoa_r+0x7ce>
 800da1e:	9b08      	ldr	r3, [sp, #32]
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 809f 	beq.w	800db64 <_dtoa_r+0x8d4>
 800da26:	2e00      	cmp	r6, #0
 800da28:	dd11      	ble.n	800da4e <_dtoa_r+0x7be>
 800da2a:	4639      	mov	r1, r7
 800da2c:	4632      	mov	r2, r6
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 ffbc 	bl	800e9ac <__pow5mult>
 800da34:	465a      	mov	r2, fp
 800da36:	4601      	mov	r1, r0
 800da38:	4607      	mov	r7, r0
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 ff10 	bl	800e860 <__multiply>
 800da40:	4659      	mov	r1, fp
 800da42:	9007      	str	r0, [sp, #28]
 800da44:	4620      	mov	r0, r4
 800da46:	f000 fdef 	bl	800e628 <_Bfree>
 800da4a:	9b07      	ldr	r3, [sp, #28]
 800da4c:	469b      	mov	fp, r3
 800da4e:	9b06      	ldr	r3, [sp, #24]
 800da50:	1b9a      	subs	r2, r3, r6
 800da52:	d004      	beq.n	800da5e <_dtoa_r+0x7ce>
 800da54:	4659      	mov	r1, fp
 800da56:	4620      	mov	r0, r4
 800da58:	f000 ffa8 	bl	800e9ac <__pow5mult>
 800da5c:	4683      	mov	fp, r0
 800da5e:	2101      	movs	r1, #1
 800da60:	4620      	mov	r0, r4
 800da62:	f000 fee7 	bl	800e834 <__i2b>
 800da66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da68:	2b00      	cmp	r3, #0
 800da6a:	4606      	mov	r6, r0
 800da6c:	dd7c      	ble.n	800db68 <_dtoa_r+0x8d8>
 800da6e:	461a      	mov	r2, r3
 800da70:	4601      	mov	r1, r0
 800da72:	4620      	mov	r0, r4
 800da74:	f000 ff9a 	bl	800e9ac <__pow5mult>
 800da78:	9b05      	ldr	r3, [sp, #20]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	4606      	mov	r6, r0
 800da7e:	dd76      	ble.n	800db6e <_dtoa_r+0x8de>
 800da80:	2300      	movs	r3, #0
 800da82:	9306      	str	r3, [sp, #24]
 800da84:	6933      	ldr	r3, [r6, #16]
 800da86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da8a:	6918      	ldr	r0, [r3, #16]
 800da8c:	f000 fe82 	bl	800e794 <__hi0bits>
 800da90:	f1c0 0020 	rsb	r0, r0, #32
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	4418      	add	r0, r3
 800da98:	f010 001f 	ands.w	r0, r0, #31
 800da9c:	f000 8086 	beq.w	800dbac <_dtoa_r+0x91c>
 800daa0:	f1c0 0320 	rsb	r3, r0, #32
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	dd7f      	ble.n	800dba8 <_dtoa_r+0x918>
 800daa8:	f1c0 001c 	rsb	r0, r0, #28
 800daac:	9b04      	ldr	r3, [sp, #16]
 800daae:	4403      	add	r3, r0
 800dab0:	4480      	add	r8, r0
 800dab2:	4405      	add	r5, r0
 800dab4:	9304      	str	r3, [sp, #16]
 800dab6:	f1b8 0f00 	cmp.w	r8, #0
 800daba:	dd05      	ble.n	800dac8 <_dtoa_r+0x838>
 800dabc:	4659      	mov	r1, fp
 800dabe:	4642      	mov	r2, r8
 800dac0:	4620      	mov	r0, r4
 800dac2:	f000 ffcd 	bl	800ea60 <__lshift>
 800dac6:	4683      	mov	fp, r0
 800dac8:	9b04      	ldr	r3, [sp, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd05      	ble.n	800dada <_dtoa_r+0x84a>
 800dace:	4631      	mov	r1, r6
 800dad0:	461a      	mov	r2, r3
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 ffc4 	bl	800ea60 <__lshift>
 800dad8:	4606      	mov	r6, r0
 800dada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d069      	beq.n	800dbb4 <_dtoa_r+0x924>
 800dae0:	4631      	mov	r1, r6
 800dae2:	4658      	mov	r0, fp
 800dae4:	f001 f828 	bl	800eb38 <__mcmp>
 800dae8:	2800      	cmp	r0, #0
 800daea:	da63      	bge.n	800dbb4 <_dtoa_r+0x924>
 800daec:	2300      	movs	r3, #0
 800daee:	4659      	mov	r1, fp
 800daf0:	220a      	movs	r2, #10
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fdba 	bl	800e66c <__multadd>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dafe:	4683      	mov	fp, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 818f 	beq.w	800de24 <_dtoa_r+0xb94>
 800db06:	4639      	mov	r1, r7
 800db08:	2300      	movs	r3, #0
 800db0a:	220a      	movs	r2, #10
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 fdad 	bl	800e66c <__multadd>
 800db12:	f1b9 0f00 	cmp.w	r9, #0
 800db16:	4607      	mov	r7, r0
 800db18:	f300 808e 	bgt.w	800dc38 <_dtoa_r+0x9a8>
 800db1c:	9b05      	ldr	r3, [sp, #20]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	dc50      	bgt.n	800dbc4 <_dtoa_r+0x934>
 800db22:	e089      	b.n	800dc38 <_dtoa_r+0x9a8>
 800db24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db2a:	e75d      	b.n	800d9e8 <_dtoa_r+0x758>
 800db2c:	9b01      	ldr	r3, [sp, #4]
 800db2e:	1e5e      	subs	r6, r3, #1
 800db30:	9b06      	ldr	r3, [sp, #24]
 800db32:	42b3      	cmp	r3, r6
 800db34:	bfbf      	itttt	lt
 800db36:	9b06      	ldrlt	r3, [sp, #24]
 800db38:	9606      	strlt	r6, [sp, #24]
 800db3a:	1af2      	sublt	r2, r6, r3
 800db3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800db3e:	bfb6      	itet	lt
 800db40:	189b      	addlt	r3, r3, r2
 800db42:	1b9e      	subge	r6, r3, r6
 800db44:	930d      	strlt	r3, [sp, #52]	; 0x34
 800db46:	9b01      	ldr	r3, [sp, #4]
 800db48:	bfb8      	it	lt
 800db4a:	2600      	movlt	r6, #0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	bfb5      	itete	lt
 800db50:	eba8 0503 	sublt.w	r5, r8, r3
 800db54:	9b01      	ldrge	r3, [sp, #4]
 800db56:	2300      	movlt	r3, #0
 800db58:	4645      	movge	r5, r8
 800db5a:	e747      	b.n	800d9ec <_dtoa_r+0x75c>
 800db5c:	9e06      	ldr	r6, [sp, #24]
 800db5e:	9f08      	ldr	r7, [sp, #32]
 800db60:	4645      	mov	r5, r8
 800db62:	e74c      	b.n	800d9fe <_dtoa_r+0x76e>
 800db64:	9a06      	ldr	r2, [sp, #24]
 800db66:	e775      	b.n	800da54 <_dtoa_r+0x7c4>
 800db68:	9b05      	ldr	r3, [sp, #20]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	dc18      	bgt.n	800dba0 <_dtoa_r+0x910>
 800db6e:	9b02      	ldr	r3, [sp, #8]
 800db70:	b9b3      	cbnz	r3, 800dba0 <_dtoa_r+0x910>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db78:	b9a3      	cbnz	r3, 800dba4 <_dtoa_r+0x914>
 800db7a:	9b03      	ldr	r3, [sp, #12]
 800db7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db80:	0d1b      	lsrs	r3, r3, #20
 800db82:	051b      	lsls	r3, r3, #20
 800db84:	b12b      	cbz	r3, 800db92 <_dtoa_r+0x902>
 800db86:	9b04      	ldr	r3, [sp, #16]
 800db88:	3301      	adds	r3, #1
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	f108 0801 	add.w	r8, r8, #1
 800db90:	2301      	movs	r3, #1
 800db92:	9306      	str	r3, [sp, #24]
 800db94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db96:	2b00      	cmp	r3, #0
 800db98:	f47f af74 	bne.w	800da84 <_dtoa_r+0x7f4>
 800db9c:	2001      	movs	r0, #1
 800db9e:	e779      	b.n	800da94 <_dtoa_r+0x804>
 800dba0:	2300      	movs	r3, #0
 800dba2:	e7f6      	b.n	800db92 <_dtoa_r+0x902>
 800dba4:	9b02      	ldr	r3, [sp, #8]
 800dba6:	e7f4      	b.n	800db92 <_dtoa_r+0x902>
 800dba8:	d085      	beq.n	800dab6 <_dtoa_r+0x826>
 800dbaa:	4618      	mov	r0, r3
 800dbac:	301c      	adds	r0, #28
 800dbae:	e77d      	b.n	800daac <_dtoa_r+0x81c>
 800dbb0:	40240000 	.word	0x40240000
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	dc38      	bgt.n	800dc2c <_dtoa_r+0x99c>
 800dbba:	9b05      	ldr	r3, [sp, #20]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	dd35      	ble.n	800dc2c <_dtoa_r+0x99c>
 800dbc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dbc4:	f1b9 0f00 	cmp.w	r9, #0
 800dbc8:	d10d      	bne.n	800dbe6 <_dtoa_r+0x956>
 800dbca:	4631      	mov	r1, r6
 800dbcc:	464b      	mov	r3, r9
 800dbce:	2205      	movs	r2, #5
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f000 fd4b 	bl	800e66c <__multadd>
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	4606      	mov	r6, r0
 800dbda:	4658      	mov	r0, fp
 800dbdc:	f000 ffac 	bl	800eb38 <__mcmp>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	f73f adbd 	bgt.w	800d760 <_dtoa_r+0x4d0>
 800dbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe8:	9d00      	ldr	r5, [sp, #0]
 800dbea:	ea6f 0a03 	mvn.w	sl, r3
 800dbee:	f04f 0800 	mov.w	r8, #0
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 fd17 	bl	800e628 <_Bfree>
 800dbfa:	2f00      	cmp	r7, #0
 800dbfc:	f43f aeb4 	beq.w	800d968 <_dtoa_r+0x6d8>
 800dc00:	f1b8 0f00 	cmp.w	r8, #0
 800dc04:	d005      	beq.n	800dc12 <_dtoa_r+0x982>
 800dc06:	45b8      	cmp	r8, r7
 800dc08:	d003      	beq.n	800dc12 <_dtoa_r+0x982>
 800dc0a:	4641      	mov	r1, r8
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 fd0b 	bl	800e628 <_Bfree>
 800dc12:	4639      	mov	r1, r7
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 fd07 	bl	800e628 <_Bfree>
 800dc1a:	e6a5      	b.n	800d968 <_dtoa_r+0x6d8>
 800dc1c:	2600      	movs	r6, #0
 800dc1e:	4637      	mov	r7, r6
 800dc20:	e7e1      	b.n	800dbe6 <_dtoa_r+0x956>
 800dc22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dc24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dc28:	4637      	mov	r7, r6
 800dc2a:	e599      	b.n	800d760 <_dtoa_r+0x4d0>
 800dc2c:	9b08      	ldr	r3, [sp, #32]
 800dc2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f000 80fd 	beq.w	800de32 <_dtoa_r+0xba2>
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	dd05      	ble.n	800dc48 <_dtoa_r+0x9b8>
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	462a      	mov	r2, r5
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 ff0d 	bl	800ea60 <__lshift>
 800dc46:	4607      	mov	r7, r0
 800dc48:	9b06      	ldr	r3, [sp, #24]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d05c      	beq.n	800dd08 <_dtoa_r+0xa78>
 800dc4e:	6879      	ldr	r1, [r7, #4]
 800dc50:	4620      	mov	r0, r4
 800dc52:	f000 fca9 	bl	800e5a8 <_Balloc>
 800dc56:	4605      	mov	r5, r0
 800dc58:	b928      	cbnz	r0, 800dc66 <_dtoa_r+0x9d6>
 800dc5a:	4b80      	ldr	r3, [pc, #512]	; (800de5c <_dtoa_r+0xbcc>)
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc62:	f7ff bb2e 	b.w	800d2c2 <_dtoa_r+0x32>
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	3202      	adds	r2, #2
 800dc6a:	0092      	lsls	r2, r2, #2
 800dc6c:	f107 010c 	add.w	r1, r7, #12
 800dc70:	300c      	adds	r0, #12
 800dc72:	f7fd fc47 	bl	800b504 <memcpy>
 800dc76:	2201      	movs	r2, #1
 800dc78:	4629      	mov	r1, r5
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 fef0 	bl	800ea60 <__lshift>
 800dc80:	9b00      	ldr	r3, [sp, #0]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9301      	str	r3, [sp, #4]
 800dc86:	9b00      	ldr	r3, [sp, #0]
 800dc88:	444b      	add	r3, r9
 800dc8a:	9307      	str	r3, [sp, #28]
 800dc8c:	9b02      	ldr	r3, [sp, #8]
 800dc8e:	f003 0301 	and.w	r3, r3, #1
 800dc92:	46b8      	mov	r8, r7
 800dc94:	9306      	str	r3, [sp, #24]
 800dc96:	4607      	mov	r7, r0
 800dc98:	9b01      	ldr	r3, [sp, #4]
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	4658      	mov	r0, fp
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	f7ff fa69 	bl	800d178 <quorem>
 800dca6:	4603      	mov	r3, r0
 800dca8:	3330      	adds	r3, #48	; 0x30
 800dcaa:	9004      	str	r0, [sp, #16]
 800dcac:	4641      	mov	r1, r8
 800dcae:	4658      	mov	r0, fp
 800dcb0:	9308      	str	r3, [sp, #32]
 800dcb2:	f000 ff41 	bl	800eb38 <__mcmp>
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4681      	mov	r9, r0
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f000 ff57 	bl	800eb70 <__mdiff>
 800dcc2:	68c2      	ldr	r2, [r0, #12]
 800dcc4:	9b08      	ldr	r3, [sp, #32]
 800dcc6:	4605      	mov	r5, r0
 800dcc8:	bb02      	cbnz	r2, 800dd0c <_dtoa_r+0xa7c>
 800dcca:	4601      	mov	r1, r0
 800dccc:	4658      	mov	r0, fp
 800dcce:	f000 ff33 	bl	800eb38 <__mcmp>
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4620      	mov	r0, r4
 800dcda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dcde:	f000 fca3 	bl	800e628 <_Bfree>
 800dce2:	9b05      	ldr	r3, [sp, #20]
 800dce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dce6:	9d01      	ldr	r5, [sp, #4]
 800dce8:	ea43 0102 	orr.w	r1, r3, r2
 800dcec:	9b06      	ldr	r3, [sp, #24]
 800dcee:	430b      	orrs	r3, r1
 800dcf0:	9b08      	ldr	r3, [sp, #32]
 800dcf2:	d10d      	bne.n	800dd10 <_dtoa_r+0xa80>
 800dcf4:	2b39      	cmp	r3, #57	; 0x39
 800dcf6:	d029      	beq.n	800dd4c <_dtoa_r+0xabc>
 800dcf8:	f1b9 0f00 	cmp.w	r9, #0
 800dcfc:	dd01      	ble.n	800dd02 <_dtoa_r+0xa72>
 800dcfe:	9b04      	ldr	r3, [sp, #16]
 800dd00:	3331      	adds	r3, #49	; 0x31
 800dd02:	9a02      	ldr	r2, [sp, #8]
 800dd04:	7013      	strb	r3, [r2, #0]
 800dd06:	e774      	b.n	800dbf2 <_dtoa_r+0x962>
 800dd08:	4638      	mov	r0, r7
 800dd0a:	e7b9      	b.n	800dc80 <_dtoa_r+0x9f0>
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	e7e2      	b.n	800dcd6 <_dtoa_r+0xa46>
 800dd10:	f1b9 0f00 	cmp.w	r9, #0
 800dd14:	db06      	blt.n	800dd24 <_dtoa_r+0xa94>
 800dd16:	9905      	ldr	r1, [sp, #20]
 800dd18:	ea41 0909 	orr.w	r9, r1, r9
 800dd1c:	9906      	ldr	r1, [sp, #24]
 800dd1e:	ea59 0101 	orrs.w	r1, r9, r1
 800dd22:	d120      	bne.n	800dd66 <_dtoa_r+0xad6>
 800dd24:	2a00      	cmp	r2, #0
 800dd26:	ddec      	ble.n	800dd02 <_dtoa_r+0xa72>
 800dd28:	4659      	mov	r1, fp
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	f000 fe96 	bl	800ea60 <__lshift>
 800dd34:	4631      	mov	r1, r6
 800dd36:	4683      	mov	fp, r0
 800dd38:	f000 fefe 	bl	800eb38 <__mcmp>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	9b01      	ldr	r3, [sp, #4]
 800dd40:	dc02      	bgt.n	800dd48 <_dtoa_r+0xab8>
 800dd42:	d1de      	bne.n	800dd02 <_dtoa_r+0xa72>
 800dd44:	07da      	lsls	r2, r3, #31
 800dd46:	d5dc      	bpl.n	800dd02 <_dtoa_r+0xa72>
 800dd48:	2b39      	cmp	r3, #57	; 0x39
 800dd4a:	d1d8      	bne.n	800dcfe <_dtoa_r+0xa6e>
 800dd4c:	9a02      	ldr	r2, [sp, #8]
 800dd4e:	2339      	movs	r3, #57	; 0x39
 800dd50:	7013      	strb	r3, [r2, #0]
 800dd52:	462b      	mov	r3, r5
 800dd54:	461d      	mov	r5, r3
 800dd56:	3b01      	subs	r3, #1
 800dd58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd5c:	2a39      	cmp	r2, #57	; 0x39
 800dd5e:	d050      	beq.n	800de02 <_dtoa_r+0xb72>
 800dd60:	3201      	adds	r2, #1
 800dd62:	701a      	strb	r2, [r3, #0]
 800dd64:	e745      	b.n	800dbf2 <_dtoa_r+0x962>
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	dd03      	ble.n	800dd72 <_dtoa_r+0xae2>
 800dd6a:	2b39      	cmp	r3, #57	; 0x39
 800dd6c:	d0ee      	beq.n	800dd4c <_dtoa_r+0xabc>
 800dd6e:	3301      	adds	r3, #1
 800dd70:	e7c7      	b.n	800dd02 <_dtoa_r+0xa72>
 800dd72:	9a01      	ldr	r2, [sp, #4]
 800dd74:	9907      	ldr	r1, [sp, #28]
 800dd76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd7a:	428a      	cmp	r2, r1
 800dd7c:	d02a      	beq.n	800ddd4 <_dtoa_r+0xb44>
 800dd7e:	4659      	mov	r1, fp
 800dd80:	2300      	movs	r3, #0
 800dd82:	220a      	movs	r2, #10
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 fc71 	bl	800e66c <__multadd>
 800dd8a:	45b8      	cmp	r8, r7
 800dd8c:	4683      	mov	fp, r0
 800dd8e:	f04f 0300 	mov.w	r3, #0
 800dd92:	f04f 020a 	mov.w	r2, #10
 800dd96:	4641      	mov	r1, r8
 800dd98:	4620      	mov	r0, r4
 800dd9a:	d107      	bne.n	800ddac <_dtoa_r+0xb1c>
 800dd9c:	f000 fc66 	bl	800e66c <__multadd>
 800dda0:	4680      	mov	r8, r0
 800dda2:	4607      	mov	r7, r0
 800dda4:	9b01      	ldr	r3, [sp, #4]
 800dda6:	3301      	adds	r3, #1
 800dda8:	9301      	str	r3, [sp, #4]
 800ddaa:	e775      	b.n	800dc98 <_dtoa_r+0xa08>
 800ddac:	f000 fc5e 	bl	800e66c <__multadd>
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	220a      	movs	r2, #10
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fc57 	bl	800e66c <__multadd>
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	e7f0      	b.n	800dda4 <_dtoa_r+0xb14>
 800ddc2:	f1b9 0f00 	cmp.w	r9, #0
 800ddc6:	9a00      	ldr	r2, [sp, #0]
 800ddc8:	bfcc      	ite	gt
 800ddca:	464d      	movgt	r5, r9
 800ddcc:	2501      	movle	r5, #1
 800ddce:	4415      	add	r5, r2
 800ddd0:	f04f 0800 	mov.w	r8, #0
 800ddd4:	4659      	mov	r1, fp
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4620      	mov	r0, r4
 800ddda:	9301      	str	r3, [sp, #4]
 800dddc:	f000 fe40 	bl	800ea60 <__lshift>
 800dde0:	4631      	mov	r1, r6
 800dde2:	4683      	mov	fp, r0
 800dde4:	f000 fea8 	bl	800eb38 <__mcmp>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	dcb2      	bgt.n	800dd52 <_dtoa_r+0xac2>
 800ddec:	d102      	bne.n	800ddf4 <_dtoa_r+0xb64>
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	07db      	lsls	r3, r3, #31
 800ddf2:	d4ae      	bmi.n	800dd52 <_dtoa_r+0xac2>
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	461d      	mov	r5, r3
 800ddf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddfc:	2a30      	cmp	r2, #48	; 0x30
 800ddfe:	d0fa      	beq.n	800ddf6 <_dtoa_r+0xb66>
 800de00:	e6f7      	b.n	800dbf2 <_dtoa_r+0x962>
 800de02:	9a00      	ldr	r2, [sp, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d1a5      	bne.n	800dd54 <_dtoa_r+0xac4>
 800de08:	f10a 0a01 	add.w	sl, sl, #1
 800de0c:	2331      	movs	r3, #49	; 0x31
 800de0e:	e779      	b.n	800dd04 <_dtoa_r+0xa74>
 800de10:	4b13      	ldr	r3, [pc, #76]	; (800de60 <_dtoa_r+0xbd0>)
 800de12:	f7ff baaf 	b.w	800d374 <_dtoa_r+0xe4>
 800de16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f47f aa86 	bne.w	800d32a <_dtoa_r+0x9a>
 800de1e:	4b11      	ldr	r3, [pc, #68]	; (800de64 <_dtoa_r+0xbd4>)
 800de20:	f7ff baa8 	b.w	800d374 <_dtoa_r+0xe4>
 800de24:	f1b9 0f00 	cmp.w	r9, #0
 800de28:	dc03      	bgt.n	800de32 <_dtoa_r+0xba2>
 800de2a:	9b05      	ldr	r3, [sp, #20]
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	f73f aec9 	bgt.w	800dbc4 <_dtoa_r+0x934>
 800de32:	9d00      	ldr	r5, [sp, #0]
 800de34:	4631      	mov	r1, r6
 800de36:	4658      	mov	r0, fp
 800de38:	f7ff f99e 	bl	800d178 <quorem>
 800de3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de40:	f805 3b01 	strb.w	r3, [r5], #1
 800de44:	9a00      	ldr	r2, [sp, #0]
 800de46:	1aaa      	subs	r2, r5, r2
 800de48:	4591      	cmp	r9, r2
 800de4a:	ddba      	ble.n	800ddc2 <_dtoa_r+0xb32>
 800de4c:	4659      	mov	r1, fp
 800de4e:	2300      	movs	r3, #0
 800de50:	220a      	movs	r2, #10
 800de52:	4620      	mov	r0, r4
 800de54:	f000 fc0a 	bl	800e66c <__multadd>
 800de58:	4683      	mov	fp, r0
 800de5a:	e7eb      	b.n	800de34 <_dtoa_r+0xba4>
 800de5c:	08010521 	.word	0x08010521
 800de60:	08010284 	.word	0x08010284
 800de64:	080104b5 	.word	0x080104b5

0800de68 <fiprintf>:
 800de68:	b40e      	push	{r1, r2, r3}
 800de6a:	b503      	push	{r0, r1, lr}
 800de6c:	4601      	mov	r1, r0
 800de6e:	ab03      	add	r3, sp, #12
 800de70:	4805      	ldr	r0, [pc, #20]	; (800de88 <fiprintf+0x20>)
 800de72:	f853 2b04 	ldr.w	r2, [r3], #4
 800de76:	6800      	ldr	r0, [r0, #0]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f001 fab5 	bl	800f3e8 <_vfiprintf_r>
 800de7e:	b002      	add	sp, #8
 800de80:	f85d eb04 	ldr.w	lr, [sp], #4
 800de84:	b003      	add	sp, #12
 800de86:	4770      	bx	lr
 800de88:	20000060 	.word	0x20000060

0800de8c <rshift>:
 800de8c:	6903      	ldr	r3, [r0, #16]
 800de8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800de92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800de9a:	f100 0414 	add.w	r4, r0, #20
 800de9e:	dd45      	ble.n	800df2c <rshift+0xa0>
 800dea0:	f011 011f 	ands.w	r1, r1, #31
 800dea4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dea8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800deac:	d10c      	bne.n	800dec8 <rshift+0x3c>
 800deae:	f100 0710 	add.w	r7, r0, #16
 800deb2:	4629      	mov	r1, r5
 800deb4:	42b1      	cmp	r1, r6
 800deb6:	d334      	bcc.n	800df22 <rshift+0x96>
 800deb8:	1a9b      	subs	r3, r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	1eea      	subs	r2, r5, #3
 800debe:	4296      	cmp	r6, r2
 800dec0:	bf38      	it	cc
 800dec2:	2300      	movcc	r3, #0
 800dec4:	4423      	add	r3, r4
 800dec6:	e015      	b.n	800def4 <rshift+0x68>
 800dec8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800decc:	f1c1 0820 	rsb	r8, r1, #32
 800ded0:	40cf      	lsrs	r7, r1
 800ded2:	f105 0e04 	add.w	lr, r5, #4
 800ded6:	46a1      	mov	r9, r4
 800ded8:	4576      	cmp	r6, lr
 800deda:	46f4      	mov	ip, lr
 800dedc:	d815      	bhi.n	800df0a <rshift+0x7e>
 800dede:	1a9b      	subs	r3, r3, r2
 800dee0:	009a      	lsls	r2, r3, #2
 800dee2:	3a04      	subs	r2, #4
 800dee4:	3501      	adds	r5, #1
 800dee6:	42ae      	cmp	r6, r5
 800dee8:	bf38      	it	cc
 800deea:	2200      	movcc	r2, #0
 800deec:	18a3      	adds	r3, r4, r2
 800deee:	50a7      	str	r7, [r4, r2]
 800def0:	b107      	cbz	r7, 800def4 <rshift+0x68>
 800def2:	3304      	adds	r3, #4
 800def4:	1b1a      	subs	r2, r3, r4
 800def6:	42a3      	cmp	r3, r4
 800def8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800defc:	bf08      	it	eq
 800defe:	2300      	moveq	r3, #0
 800df00:	6102      	str	r2, [r0, #16]
 800df02:	bf08      	it	eq
 800df04:	6143      	streq	r3, [r0, #20]
 800df06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0a:	f8dc c000 	ldr.w	ip, [ip]
 800df0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800df12:	ea4c 0707 	orr.w	r7, ip, r7
 800df16:	f849 7b04 	str.w	r7, [r9], #4
 800df1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800df1e:	40cf      	lsrs	r7, r1
 800df20:	e7da      	b.n	800ded8 <rshift+0x4c>
 800df22:	f851 cb04 	ldr.w	ip, [r1], #4
 800df26:	f847 cf04 	str.w	ip, [r7, #4]!
 800df2a:	e7c3      	b.n	800deb4 <rshift+0x28>
 800df2c:	4623      	mov	r3, r4
 800df2e:	e7e1      	b.n	800def4 <rshift+0x68>

0800df30 <__hexdig_fun>:
 800df30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800df34:	2b09      	cmp	r3, #9
 800df36:	d802      	bhi.n	800df3e <__hexdig_fun+0xe>
 800df38:	3820      	subs	r0, #32
 800df3a:	b2c0      	uxtb	r0, r0
 800df3c:	4770      	bx	lr
 800df3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800df42:	2b05      	cmp	r3, #5
 800df44:	d801      	bhi.n	800df4a <__hexdig_fun+0x1a>
 800df46:	3847      	subs	r0, #71	; 0x47
 800df48:	e7f7      	b.n	800df3a <__hexdig_fun+0xa>
 800df4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800df4e:	2b05      	cmp	r3, #5
 800df50:	d801      	bhi.n	800df56 <__hexdig_fun+0x26>
 800df52:	3827      	subs	r0, #39	; 0x27
 800df54:	e7f1      	b.n	800df3a <__hexdig_fun+0xa>
 800df56:	2000      	movs	r0, #0
 800df58:	4770      	bx	lr
	...

0800df5c <__gethex>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	ed2d 8b02 	vpush	{d8}
 800df64:	b089      	sub	sp, #36	; 0x24
 800df66:	ee08 0a10 	vmov	s16, r0
 800df6a:	9304      	str	r3, [sp, #16]
 800df6c:	4bbc      	ldr	r3, [pc, #752]	; (800e260 <__gethex+0x304>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	468b      	mov	fp, r1
 800df76:	4690      	mov	r8, r2
 800df78:	f7f2 f92a 	bl	80001d0 <strlen>
 800df7c:	9b01      	ldr	r3, [sp, #4]
 800df7e:	f8db 2000 	ldr.w	r2, [fp]
 800df82:	4403      	add	r3, r0
 800df84:	4682      	mov	sl, r0
 800df86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800df8a:	9305      	str	r3, [sp, #20]
 800df8c:	1c93      	adds	r3, r2, #2
 800df8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800df92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800df96:	32fe      	adds	r2, #254	; 0xfe
 800df98:	18d1      	adds	r1, r2, r3
 800df9a:	461f      	mov	r7, r3
 800df9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dfa0:	9100      	str	r1, [sp, #0]
 800dfa2:	2830      	cmp	r0, #48	; 0x30
 800dfa4:	d0f8      	beq.n	800df98 <__gethex+0x3c>
 800dfa6:	f7ff ffc3 	bl	800df30 <__hexdig_fun>
 800dfaa:	4604      	mov	r4, r0
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d13a      	bne.n	800e026 <__gethex+0xca>
 800dfb0:	9901      	ldr	r1, [sp, #4]
 800dfb2:	4652      	mov	r2, sl
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f001 fb5f 	bl	800f678 <strncmp>
 800dfba:	4605      	mov	r5, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d168      	bne.n	800e092 <__gethex+0x136>
 800dfc0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dfc4:	eb07 060a 	add.w	r6, r7, sl
 800dfc8:	f7ff ffb2 	bl	800df30 <__hexdig_fun>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d062      	beq.n	800e096 <__gethex+0x13a>
 800dfd0:	4633      	mov	r3, r6
 800dfd2:	7818      	ldrb	r0, [r3, #0]
 800dfd4:	2830      	cmp	r0, #48	; 0x30
 800dfd6:	461f      	mov	r7, r3
 800dfd8:	f103 0301 	add.w	r3, r3, #1
 800dfdc:	d0f9      	beq.n	800dfd2 <__gethex+0x76>
 800dfde:	f7ff ffa7 	bl	800df30 <__hexdig_fun>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	fab0 f480 	clz	r4, r0
 800dfe8:	0964      	lsrs	r4, r4, #5
 800dfea:	4635      	mov	r5, r6
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	463a      	mov	r2, r7
 800dff0:	4616      	mov	r6, r2
 800dff2:	3201      	adds	r2, #1
 800dff4:	7830      	ldrb	r0, [r6, #0]
 800dff6:	f7ff ff9b 	bl	800df30 <__hexdig_fun>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d1f8      	bne.n	800dff0 <__gethex+0x94>
 800dffe:	9901      	ldr	r1, [sp, #4]
 800e000:	4652      	mov	r2, sl
 800e002:	4630      	mov	r0, r6
 800e004:	f001 fb38 	bl	800f678 <strncmp>
 800e008:	b980      	cbnz	r0, 800e02c <__gethex+0xd0>
 800e00a:	b94d      	cbnz	r5, 800e020 <__gethex+0xc4>
 800e00c:	eb06 050a 	add.w	r5, r6, sl
 800e010:	462a      	mov	r2, r5
 800e012:	4616      	mov	r6, r2
 800e014:	3201      	adds	r2, #1
 800e016:	7830      	ldrb	r0, [r6, #0]
 800e018:	f7ff ff8a 	bl	800df30 <__hexdig_fun>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d1f8      	bne.n	800e012 <__gethex+0xb6>
 800e020:	1bad      	subs	r5, r5, r6
 800e022:	00ad      	lsls	r5, r5, #2
 800e024:	e004      	b.n	800e030 <__gethex+0xd4>
 800e026:	2400      	movs	r4, #0
 800e028:	4625      	mov	r5, r4
 800e02a:	e7e0      	b.n	800dfee <__gethex+0x92>
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	d1f7      	bne.n	800e020 <__gethex+0xc4>
 800e030:	7833      	ldrb	r3, [r6, #0]
 800e032:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e036:	2b50      	cmp	r3, #80	; 0x50
 800e038:	d13b      	bne.n	800e0b2 <__gethex+0x156>
 800e03a:	7873      	ldrb	r3, [r6, #1]
 800e03c:	2b2b      	cmp	r3, #43	; 0x2b
 800e03e:	d02c      	beq.n	800e09a <__gethex+0x13e>
 800e040:	2b2d      	cmp	r3, #45	; 0x2d
 800e042:	d02e      	beq.n	800e0a2 <__gethex+0x146>
 800e044:	1c71      	adds	r1, r6, #1
 800e046:	f04f 0900 	mov.w	r9, #0
 800e04a:	7808      	ldrb	r0, [r1, #0]
 800e04c:	f7ff ff70 	bl	800df30 <__hexdig_fun>
 800e050:	1e43      	subs	r3, r0, #1
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b18      	cmp	r3, #24
 800e056:	d82c      	bhi.n	800e0b2 <__gethex+0x156>
 800e058:	f1a0 0210 	sub.w	r2, r0, #16
 800e05c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e060:	f7ff ff66 	bl	800df30 <__hexdig_fun>
 800e064:	1e43      	subs	r3, r0, #1
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b18      	cmp	r3, #24
 800e06a:	d91d      	bls.n	800e0a8 <__gethex+0x14c>
 800e06c:	f1b9 0f00 	cmp.w	r9, #0
 800e070:	d000      	beq.n	800e074 <__gethex+0x118>
 800e072:	4252      	negs	r2, r2
 800e074:	4415      	add	r5, r2
 800e076:	f8cb 1000 	str.w	r1, [fp]
 800e07a:	b1e4      	cbz	r4, 800e0b6 <__gethex+0x15a>
 800e07c:	9b00      	ldr	r3, [sp, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	bf14      	ite	ne
 800e082:	2700      	movne	r7, #0
 800e084:	2706      	moveq	r7, #6
 800e086:	4638      	mov	r0, r7
 800e088:	b009      	add	sp, #36	; 0x24
 800e08a:	ecbd 8b02 	vpop	{d8}
 800e08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e092:	463e      	mov	r6, r7
 800e094:	4625      	mov	r5, r4
 800e096:	2401      	movs	r4, #1
 800e098:	e7ca      	b.n	800e030 <__gethex+0xd4>
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	1cb1      	adds	r1, r6, #2
 800e0a0:	e7d3      	b.n	800e04a <__gethex+0xee>
 800e0a2:	f04f 0901 	mov.w	r9, #1
 800e0a6:	e7fa      	b.n	800e09e <__gethex+0x142>
 800e0a8:	230a      	movs	r3, #10
 800e0aa:	fb03 0202 	mla	r2, r3, r2, r0
 800e0ae:	3a10      	subs	r2, #16
 800e0b0:	e7d4      	b.n	800e05c <__gethex+0x100>
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	e7df      	b.n	800e076 <__gethex+0x11a>
 800e0b6:	1bf3      	subs	r3, r6, r7
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	2b07      	cmp	r3, #7
 800e0be:	dc0b      	bgt.n	800e0d8 <__gethex+0x17c>
 800e0c0:	ee18 0a10 	vmov	r0, s16
 800e0c4:	f000 fa70 	bl	800e5a8 <_Balloc>
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	b940      	cbnz	r0, 800e0de <__gethex+0x182>
 800e0cc:	4b65      	ldr	r3, [pc, #404]	; (800e264 <__gethex+0x308>)
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	21de      	movs	r1, #222	; 0xde
 800e0d2:	4865      	ldr	r0, [pc, #404]	; (800e268 <__gethex+0x30c>)
 800e0d4:	f7ff f832 	bl	800d13c <__assert_func>
 800e0d8:	3101      	adds	r1, #1
 800e0da:	105b      	asrs	r3, r3, #1
 800e0dc:	e7ee      	b.n	800e0bc <__gethex+0x160>
 800e0de:	f100 0914 	add.w	r9, r0, #20
 800e0e2:	f04f 0b00 	mov.w	fp, #0
 800e0e6:	f1ca 0301 	rsb	r3, sl, #1
 800e0ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0ee:	f8cd b000 	str.w	fp, [sp]
 800e0f2:	9306      	str	r3, [sp, #24]
 800e0f4:	42b7      	cmp	r7, r6
 800e0f6:	d340      	bcc.n	800e17a <__gethex+0x21e>
 800e0f8:	9802      	ldr	r0, [sp, #8]
 800e0fa:	9b00      	ldr	r3, [sp, #0]
 800e0fc:	f840 3b04 	str.w	r3, [r0], #4
 800e100:	eba0 0009 	sub.w	r0, r0, r9
 800e104:	1080      	asrs	r0, r0, #2
 800e106:	0146      	lsls	r6, r0, #5
 800e108:	6120      	str	r0, [r4, #16]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fb42 	bl	800e794 <__hi0bits>
 800e110:	1a30      	subs	r0, r6, r0
 800e112:	f8d8 6000 	ldr.w	r6, [r8]
 800e116:	42b0      	cmp	r0, r6
 800e118:	dd63      	ble.n	800e1e2 <__gethex+0x286>
 800e11a:	1b87      	subs	r7, r0, r6
 800e11c:	4639      	mov	r1, r7
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 fedc 	bl	800eedc <__any_on>
 800e124:	4682      	mov	sl, r0
 800e126:	b1a8      	cbz	r0, 800e154 <__gethex+0x1f8>
 800e128:	1e7b      	subs	r3, r7, #1
 800e12a:	1159      	asrs	r1, r3, #5
 800e12c:	f003 021f 	and.w	r2, r3, #31
 800e130:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e134:	f04f 0a01 	mov.w	sl, #1
 800e138:	fa0a f202 	lsl.w	r2, sl, r2
 800e13c:	420a      	tst	r2, r1
 800e13e:	d009      	beq.n	800e154 <__gethex+0x1f8>
 800e140:	4553      	cmp	r3, sl
 800e142:	dd05      	ble.n	800e150 <__gethex+0x1f4>
 800e144:	1eb9      	subs	r1, r7, #2
 800e146:	4620      	mov	r0, r4
 800e148:	f000 fec8 	bl	800eedc <__any_on>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d145      	bne.n	800e1dc <__gethex+0x280>
 800e150:	f04f 0a02 	mov.w	sl, #2
 800e154:	4639      	mov	r1, r7
 800e156:	4620      	mov	r0, r4
 800e158:	f7ff fe98 	bl	800de8c <rshift>
 800e15c:	443d      	add	r5, r7
 800e15e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e162:	42ab      	cmp	r3, r5
 800e164:	da4c      	bge.n	800e200 <__gethex+0x2a4>
 800e166:	ee18 0a10 	vmov	r0, s16
 800e16a:	4621      	mov	r1, r4
 800e16c:	f000 fa5c 	bl	800e628 <_Bfree>
 800e170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e172:	2300      	movs	r3, #0
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	27a3      	movs	r7, #163	; 0xa3
 800e178:	e785      	b.n	800e086 <__gethex+0x12a>
 800e17a:	1e73      	subs	r3, r6, #1
 800e17c:	9a05      	ldr	r2, [sp, #20]
 800e17e:	9303      	str	r3, [sp, #12]
 800e180:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e184:	4293      	cmp	r3, r2
 800e186:	d019      	beq.n	800e1bc <__gethex+0x260>
 800e188:	f1bb 0f20 	cmp.w	fp, #32
 800e18c:	d107      	bne.n	800e19e <__gethex+0x242>
 800e18e:	9b02      	ldr	r3, [sp, #8]
 800e190:	9a00      	ldr	r2, [sp, #0]
 800e192:	f843 2b04 	str.w	r2, [r3], #4
 800e196:	9302      	str	r3, [sp, #8]
 800e198:	2300      	movs	r3, #0
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	469b      	mov	fp, r3
 800e19e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e1a2:	f7ff fec5 	bl	800df30 <__hexdig_fun>
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	f000 000f 	and.w	r0, r0, #15
 800e1ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800e1b0:	4303      	orrs	r3, r0
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	f10b 0b04 	add.w	fp, fp, #4
 800e1b8:	9b03      	ldr	r3, [sp, #12]
 800e1ba:	e00d      	b.n	800e1d8 <__gethex+0x27c>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	9a06      	ldr	r2, [sp, #24]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	42bb      	cmp	r3, r7
 800e1c4:	d3e0      	bcc.n	800e188 <__gethex+0x22c>
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	9901      	ldr	r1, [sp, #4]
 800e1ca:	9307      	str	r3, [sp, #28]
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	f001 fa53 	bl	800f678 <strncmp>
 800e1d2:	9b07      	ldr	r3, [sp, #28]
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d1d7      	bne.n	800e188 <__gethex+0x22c>
 800e1d8:	461e      	mov	r6, r3
 800e1da:	e78b      	b.n	800e0f4 <__gethex+0x198>
 800e1dc:	f04f 0a03 	mov.w	sl, #3
 800e1e0:	e7b8      	b.n	800e154 <__gethex+0x1f8>
 800e1e2:	da0a      	bge.n	800e1fa <__gethex+0x29e>
 800e1e4:	1a37      	subs	r7, r6, r0
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	ee18 0a10 	vmov	r0, s16
 800e1ec:	463a      	mov	r2, r7
 800e1ee:	f000 fc37 	bl	800ea60 <__lshift>
 800e1f2:	1bed      	subs	r5, r5, r7
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	f100 0914 	add.w	r9, r0, #20
 800e1fa:	f04f 0a00 	mov.w	sl, #0
 800e1fe:	e7ae      	b.n	800e15e <__gethex+0x202>
 800e200:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e204:	42a8      	cmp	r0, r5
 800e206:	dd72      	ble.n	800e2ee <__gethex+0x392>
 800e208:	1b45      	subs	r5, r0, r5
 800e20a:	42ae      	cmp	r6, r5
 800e20c:	dc36      	bgt.n	800e27c <__gethex+0x320>
 800e20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d02a      	beq.n	800e26c <__gethex+0x310>
 800e216:	2b03      	cmp	r3, #3
 800e218:	d02c      	beq.n	800e274 <__gethex+0x318>
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d115      	bne.n	800e24a <__gethex+0x2ee>
 800e21e:	42ae      	cmp	r6, r5
 800e220:	d113      	bne.n	800e24a <__gethex+0x2ee>
 800e222:	2e01      	cmp	r6, #1
 800e224:	d10b      	bne.n	800e23e <__gethex+0x2e2>
 800e226:	9a04      	ldr	r2, [sp, #16]
 800e228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	2301      	movs	r3, #1
 800e230:	6123      	str	r3, [r4, #16]
 800e232:	f8c9 3000 	str.w	r3, [r9]
 800e236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e238:	2762      	movs	r7, #98	; 0x62
 800e23a:	601c      	str	r4, [r3, #0]
 800e23c:	e723      	b.n	800e086 <__gethex+0x12a>
 800e23e:	1e71      	subs	r1, r6, #1
 800e240:	4620      	mov	r0, r4
 800e242:	f000 fe4b 	bl	800eedc <__any_on>
 800e246:	2800      	cmp	r0, #0
 800e248:	d1ed      	bne.n	800e226 <__gethex+0x2ca>
 800e24a:	ee18 0a10 	vmov	r0, s16
 800e24e:	4621      	mov	r1, r4
 800e250:	f000 f9ea 	bl	800e628 <_Bfree>
 800e254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e256:	2300      	movs	r3, #0
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	2750      	movs	r7, #80	; 0x50
 800e25c:	e713      	b.n	800e086 <__gethex+0x12a>
 800e25e:	bf00      	nop
 800e260:	0801059c 	.word	0x0801059c
 800e264:	08010521 	.word	0x08010521
 800e268:	08010532 	.word	0x08010532
 800e26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1eb      	bne.n	800e24a <__gethex+0x2ee>
 800e272:	e7d8      	b.n	800e226 <__gethex+0x2ca>
 800e274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1d5      	bne.n	800e226 <__gethex+0x2ca>
 800e27a:	e7e6      	b.n	800e24a <__gethex+0x2ee>
 800e27c:	1e6f      	subs	r7, r5, #1
 800e27e:	f1ba 0f00 	cmp.w	sl, #0
 800e282:	d131      	bne.n	800e2e8 <__gethex+0x38c>
 800e284:	b127      	cbz	r7, 800e290 <__gethex+0x334>
 800e286:	4639      	mov	r1, r7
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 fe27 	bl	800eedc <__any_on>
 800e28e:	4682      	mov	sl, r0
 800e290:	117b      	asrs	r3, r7, #5
 800e292:	2101      	movs	r1, #1
 800e294:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e298:	f007 071f 	and.w	r7, r7, #31
 800e29c:	fa01 f707 	lsl.w	r7, r1, r7
 800e2a0:	421f      	tst	r7, r3
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	bf18      	it	ne
 800e2a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800e2ac:	1b76      	subs	r6, r6, r5
 800e2ae:	f7ff fded 	bl	800de8c <rshift>
 800e2b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e2b6:	2702      	movs	r7, #2
 800e2b8:	f1ba 0f00 	cmp.w	sl, #0
 800e2bc:	d048      	beq.n	800e350 <__gethex+0x3f4>
 800e2be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d015      	beq.n	800e2f2 <__gethex+0x396>
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d017      	beq.n	800e2fa <__gethex+0x39e>
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d109      	bne.n	800e2e2 <__gethex+0x386>
 800e2ce:	f01a 0f02 	tst.w	sl, #2
 800e2d2:	d006      	beq.n	800e2e2 <__gethex+0x386>
 800e2d4:	f8d9 0000 	ldr.w	r0, [r9]
 800e2d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e2dc:	f01a 0f01 	tst.w	sl, #1
 800e2e0:	d10e      	bne.n	800e300 <__gethex+0x3a4>
 800e2e2:	f047 0710 	orr.w	r7, r7, #16
 800e2e6:	e033      	b.n	800e350 <__gethex+0x3f4>
 800e2e8:	f04f 0a01 	mov.w	sl, #1
 800e2ec:	e7d0      	b.n	800e290 <__gethex+0x334>
 800e2ee:	2701      	movs	r7, #1
 800e2f0:	e7e2      	b.n	800e2b8 <__gethex+0x35c>
 800e2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2f4:	f1c3 0301 	rsb	r3, r3, #1
 800e2f8:	9315      	str	r3, [sp, #84]	; 0x54
 800e2fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d0f0      	beq.n	800e2e2 <__gethex+0x386>
 800e300:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e304:	f104 0314 	add.w	r3, r4, #20
 800e308:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e30c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e310:	f04f 0c00 	mov.w	ip, #0
 800e314:	4618      	mov	r0, r3
 800e316:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800e31e:	d01c      	beq.n	800e35a <__gethex+0x3fe>
 800e320:	3201      	adds	r2, #1
 800e322:	6002      	str	r2, [r0, #0]
 800e324:	2f02      	cmp	r7, #2
 800e326:	f104 0314 	add.w	r3, r4, #20
 800e32a:	d13f      	bne.n	800e3ac <__gethex+0x450>
 800e32c:	f8d8 2000 	ldr.w	r2, [r8]
 800e330:	3a01      	subs	r2, #1
 800e332:	42b2      	cmp	r2, r6
 800e334:	d10a      	bne.n	800e34c <__gethex+0x3f0>
 800e336:	1171      	asrs	r1, r6, #5
 800e338:	2201      	movs	r2, #1
 800e33a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e33e:	f006 061f 	and.w	r6, r6, #31
 800e342:	fa02 f606 	lsl.w	r6, r2, r6
 800e346:	421e      	tst	r6, r3
 800e348:	bf18      	it	ne
 800e34a:	4617      	movne	r7, r2
 800e34c:	f047 0720 	orr.w	r7, r7, #32
 800e350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e352:	601c      	str	r4, [r3, #0]
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	601d      	str	r5, [r3, #0]
 800e358:	e695      	b.n	800e086 <__gethex+0x12a>
 800e35a:	4299      	cmp	r1, r3
 800e35c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e360:	d8d8      	bhi.n	800e314 <__gethex+0x3b8>
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	459b      	cmp	fp, r3
 800e366:	db19      	blt.n	800e39c <__gethex+0x440>
 800e368:	6861      	ldr	r1, [r4, #4]
 800e36a:	ee18 0a10 	vmov	r0, s16
 800e36e:	3101      	adds	r1, #1
 800e370:	f000 f91a 	bl	800e5a8 <_Balloc>
 800e374:	4681      	mov	r9, r0
 800e376:	b918      	cbnz	r0, 800e380 <__gethex+0x424>
 800e378:	4b1a      	ldr	r3, [pc, #104]	; (800e3e4 <__gethex+0x488>)
 800e37a:	4602      	mov	r2, r0
 800e37c:	2184      	movs	r1, #132	; 0x84
 800e37e:	e6a8      	b.n	800e0d2 <__gethex+0x176>
 800e380:	6922      	ldr	r2, [r4, #16]
 800e382:	3202      	adds	r2, #2
 800e384:	f104 010c 	add.w	r1, r4, #12
 800e388:	0092      	lsls	r2, r2, #2
 800e38a:	300c      	adds	r0, #12
 800e38c:	f7fd f8ba 	bl	800b504 <memcpy>
 800e390:	4621      	mov	r1, r4
 800e392:	ee18 0a10 	vmov	r0, s16
 800e396:	f000 f947 	bl	800e628 <_Bfree>
 800e39a:	464c      	mov	r4, r9
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3a4:	6122      	str	r2, [r4, #16]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	615a      	str	r2, [r3, #20]
 800e3aa:	e7bb      	b.n	800e324 <__gethex+0x3c8>
 800e3ac:	6922      	ldr	r2, [r4, #16]
 800e3ae:	455a      	cmp	r2, fp
 800e3b0:	dd0b      	ble.n	800e3ca <__gethex+0x46e>
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f7ff fd69 	bl	800de8c <rshift>
 800e3ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3be:	3501      	adds	r5, #1
 800e3c0:	42ab      	cmp	r3, r5
 800e3c2:	f6ff aed0 	blt.w	800e166 <__gethex+0x20a>
 800e3c6:	2701      	movs	r7, #1
 800e3c8:	e7c0      	b.n	800e34c <__gethex+0x3f0>
 800e3ca:	f016 061f 	ands.w	r6, r6, #31
 800e3ce:	d0fa      	beq.n	800e3c6 <__gethex+0x46a>
 800e3d0:	449a      	add	sl, r3
 800e3d2:	f1c6 0620 	rsb	r6, r6, #32
 800e3d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e3da:	f000 f9db 	bl	800e794 <__hi0bits>
 800e3de:	42b0      	cmp	r0, r6
 800e3e0:	dbe7      	blt.n	800e3b2 <__gethex+0x456>
 800e3e2:	e7f0      	b.n	800e3c6 <__gethex+0x46a>
 800e3e4:	08010521 	.word	0x08010521

0800e3e8 <L_shift>:
 800e3e8:	f1c2 0208 	rsb	r2, r2, #8
 800e3ec:	0092      	lsls	r2, r2, #2
 800e3ee:	b570      	push	{r4, r5, r6, lr}
 800e3f0:	f1c2 0620 	rsb	r6, r2, #32
 800e3f4:	6843      	ldr	r3, [r0, #4]
 800e3f6:	6804      	ldr	r4, [r0, #0]
 800e3f8:	fa03 f506 	lsl.w	r5, r3, r6
 800e3fc:	432c      	orrs	r4, r5
 800e3fe:	40d3      	lsrs	r3, r2
 800e400:	6004      	str	r4, [r0, #0]
 800e402:	f840 3f04 	str.w	r3, [r0, #4]!
 800e406:	4288      	cmp	r0, r1
 800e408:	d3f4      	bcc.n	800e3f4 <L_shift+0xc>
 800e40a:	bd70      	pop	{r4, r5, r6, pc}

0800e40c <__match>:
 800e40c:	b530      	push	{r4, r5, lr}
 800e40e:	6803      	ldr	r3, [r0, #0]
 800e410:	3301      	adds	r3, #1
 800e412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e416:	b914      	cbnz	r4, 800e41e <__match+0x12>
 800e418:	6003      	str	r3, [r0, #0]
 800e41a:	2001      	movs	r0, #1
 800e41c:	bd30      	pop	{r4, r5, pc}
 800e41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e422:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e426:	2d19      	cmp	r5, #25
 800e428:	bf98      	it	ls
 800e42a:	3220      	addls	r2, #32
 800e42c:	42a2      	cmp	r2, r4
 800e42e:	d0f0      	beq.n	800e412 <__match+0x6>
 800e430:	2000      	movs	r0, #0
 800e432:	e7f3      	b.n	800e41c <__match+0x10>

0800e434 <__hexnan>:
 800e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	680b      	ldr	r3, [r1, #0]
 800e43a:	6801      	ldr	r1, [r0, #0]
 800e43c:	115e      	asrs	r6, r3, #5
 800e43e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e442:	f013 031f 	ands.w	r3, r3, #31
 800e446:	b087      	sub	sp, #28
 800e448:	bf18      	it	ne
 800e44a:	3604      	addne	r6, #4
 800e44c:	2500      	movs	r5, #0
 800e44e:	1f37      	subs	r7, r6, #4
 800e450:	4682      	mov	sl, r0
 800e452:	4690      	mov	r8, r2
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	f846 5c04 	str.w	r5, [r6, #-4]
 800e45a:	46b9      	mov	r9, r7
 800e45c:	463c      	mov	r4, r7
 800e45e:	9502      	str	r5, [sp, #8]
 800e460:	46ab      	mov	fp, r5
 800e462:	784a      	ldrb	r2, [r1, #1]
 800e464:	1c4b      	adds	r3, r1, #1
 800e466:	9303      	str	r3, [sp, #12]
 800e468:	b342      	cbz	r2, 800e4bc <__hexnan+0x88>
 800e46a:	4610      	mov	r0, r2
 800e46c:	9105      	str	r1, [sp, #20]
 800e46e:	9204      	str	r2, [sp, #16]
 800e470:	f7ff fd5e 	bl	800df30 <__hexdig_fun>
 800e474:	2800      	cmp	r0, #0
 800e476:	d14f      	bne.n	800e518 <__hexnan+0xe4>
 800e478:	9a04      	ldr	r2, [sp, #16]
 800e47a:	9905      	ldr	r1, [sp, #20]
 800e47c:	2a20      	cmp	r2, #32
 800e47e:	d818      	bhi.n	800e4b2 <__hexnan+0x7e>
 800e480:	9b02      	ldr	r3, [sp, #8]
 800e482:	459b      	cmp	fp, r3
 800e484:	dd13      	ble.n	800e4ae <__hexnan+0x7a>
 800e486:	454c      	cmp	r4, r9
 800e488:	d206      	bcs.n	800e498 <__hexnan+0x64>
 800e48a:	2d07      	cmp	r5, #7
 800e48c:	dc04      	bgt.n	800e498 <__hexnan+0x64>
 800e48e:	462a      	mov	r2, r5
 800e490:	4649      	mov	r1, r9
 800e492:	4620      	mov	r0, r4
 800e494:	f7ff ffa8 	bl	800e3e8 <L_shift>
 800e498:	4544      	cmp	r4, r8
 800e49a:	d950      	bls.n	800e53e <__hexnan+0x10a>
 800e49c:	2300      	movs	r3, #0
 800e49e:	f1a4 0904 	sub.w	r9, r4, #4
 800e4a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4a6:	f8cd b008 	str.w	fp, [sp, #8]
 800e4aa:	464c      	mov	r4, r9
 800e4ac:	461d      	mov	r5, r3
 800e4ae:	9903      	ldr	r1, [sp, #12]
 800e4b0:	e7d7      	b.n	800e462 <__hexnan+0x2e>
 800e4b2:	2a29      	cmp	r2, #41	; 0x29
 800e4b4:	d156      	bne.n	800e564 <__hexnan+0x130>
 800e4b6:	3102      	adds	r1, #2
 800e4b8:	f8ca 1000 	str.w	r1, [sl]
 800e4bc:	f1bb 0f00 	cmp.w	fp, #0
 800e4c0:	d050      	beq.n	800e564 <__hexnan+0x130>
 800e4c2:	454c      	cmp	r4, r9
 800e4c4:	d206      	bcs.n	800e4d4 <__hexnan+0xa0>
 800e4c6:	2d07      	cmp	r5, #7
 800e4c8:	dc04      	bgt.n	800e4d4 <__hexnan+0xa0>
 800e4ca:	462a      	mov	r2, r5
 800e4cc:	4649      	mov	r1, r9
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f7ff ff8a 	bl	800e3e8 <L_shift>
 800e4d4:	4544      	cmp	r4, r8
 800e4d6:	d934      	bls.n	800e542 <__hexnan+0x10e>
 800e4d8:	f1a8 0204 	sub.w	r2, r8, #4
 800e4dc:	4623      	mov	r3, r4
 800e4de:	f853 1b04 	ldr.w	r1, [r3], #4
 800e4e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e4e6:	429f      	cmp	r7, r3
 800e4e8:	d2f9      	bcs.n	800e4de <__hexnan+0xaa>
 800e4ea:	1b3b      	subs	r3, r7, r4
 800e4ec:	f023 0303 	bic.w	r3, r3, #3
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	3401      	adds	r4, #1
 800e4f4:	3e03      	subs	r6, #3
 800e4f6:	42b4      	cmp	r4, r6
 800e4f8:	bf88      	it	hi
 800e4fa:	2304      	movhi	r3, #4
 800e4fc:	4443      	add	r3, r8
 800e4fe:	2200      	movs	r2, #0
 800e500:	f843 2b04 	str.w	r2, [r3], #4
 800e504:	429f      	cmp	r7, r3
 800e506:	d2fb      	bcs.n	800e500 <__hexnan+0xcc>
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	b91b      	cbnz	r3, 800e514 <__hexnan+0xe0>
 800e50c:	4547      	cmp	r7, r8
 800e50e:	d127      	bne.n	800e560 <__hexnan+0x12c>
 800e510:	2301      	movs	r3, #1
 800e512:	603b      	str	r3, [r7, #0]
 800e514:	2005      	movs	r0, #5
 800e516:	e026      	b.n	800e566 <__hexnan+0x132>
 800e518:	3501      	adds	r5, #1
 800e51a:	2d08      	cmp	r5, #8
 800e51c:	f10b 0b01 	add.w	fp, fp, #1
 800e520:	dd06      	ble.n	800e530 <__hexnan+0xfc>
 800e522:	4544      	cmp	r4, r8
 800e524:	d9c3      	bls.n	800e4ae <__hexnan+0x7a>
 800e526:	2300      	movs	r3, #0
 800e528:	f844 3c04 	str.w	r3, [r4, #-4]
 800e52c:	2501      	movs	r5, #1
 800e52e:	3c04      	subs	r4, #4
 800e530:	6822      	ldr	r2, [r4, #0]
 800e532:	f000 000f 	and.w	r0, r0, #15
 800e536:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e53a:	6022      	str	r2, [r4, #0]
 800e53c:	e7b7      	b.n	800e4ae <__hexnan+0x7a>
 800e53e:	2508      	movs	r5, #8
 800e540:	e7b5      	b.n	800e4ae <__hexnan+0x7a>
 800e542:	9b01      	ldr	r3, [sp, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d0df      	beq.n	800e508 <__hexnan+0xd4>
 800e548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e54c:	f1c3 0320 	rsb	r3, r3, #32
 800e550:	fa22 f303 	lsr.w	r3, r2, r3
 800e554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e558:	401a      	ands	r2, r3
 800e55a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e55e:	e7d3      	b.n	800e508 <__hexnan+0xd4>
 800e560:	3f04      	subs	r7, #4
 800e562:	e7d1      	b.n	800e508 <__hexnan+0xd4>
 800e564:	2004      	movs	r0, #4
 800e566:	b007      	add	sp, #28
 800e568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e56c <_localeconv_r>:
 800e56c:	4800      	ldr	r0, [pc, #0]	; (800e570 <_localeconv_r+0x4>)
 800e56e:	4770      	bx	lr
 800e570:	200001b8 	.word	0x200001b8

0800e574 <malloc>:
 800e574:	4b02      	ldr	r3, [pc, #8]	; (800e580 <malloc+0xc>)
 800e576:	4601      	mov	r1, r0
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	f000 bd2f 	b.w	800efdc <_malloc_r>
 800e57e:	bf00      	nop
 800e580:	20000060 	.word	0x20000060

0800e584 <__ascii_mbtowc>:
 800e584:	b082      	sub	sp, #8
 800e586:	b901      	cbnz	r1, 800e58a <__ascii_mbtowc+0x6>
 800e588:	a901      	add	r1, sp, #4
 800e58a:	b142      	cbz	r2, 800e59e <__ascii_mbtowc+0x1a>
 800e58c:	b14b      	cbz	r3, 800e5a2 <__ascii_mbtowc+0x1e>
 800e58e:	7813      	ldrb	r3, [r2, #0]
 800e590:	600b      	str	r3, [r1, #0]
 800e592:	7812      	ldrb	r2, [r2, #0]
 800e594:	1e10      	subs	r0, r2, #0
 800e596:	bf18      	it	ne
 800e598:	2001      	movne	r0, #1
 800e59a:	b002      	add	sp, #8
 800e59c:	4770      	bx	lr
 800e59e:	4610      	mov	r0, r2
 800e5a0:	e7fb      	b.n	800e59a <__ascii_mbtowc+0x16>
 800e5a2:	f06f 0001 	mvn.w	r0, #1
 800e5a6:	e7f8      	b.n	800e59a <__ascii_mbtowc+0x16>

0800e5a8 <_Balloc>:
 800e5a8:	b570      	push	{r4, r5, r6, lr}
 800e5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	b976      	cbnz	r6, 800e5d0 <_Balloc+0x28>
 800e5b2:	2010      	movs	r0, #16
 800e5b4:	f7ff ffde 	bl	800e574 <malloc>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	6260      	str	r0, [r4, #36]	; 0x24
 800e5bc:	b920      	cbnz	r0, 800e5c8 <_Balloc+0x20>
 800e5be:	4b18      	ldr	r3, [pc, #96]	; (800e620 <_Balloc+0x78>)
 800e5c0:	4818      	ldr	r0, [pc, #96]	; (800e624 <_Balloc+0x7c>)
 800e5c2:	2166      	movs	r1, #102	; 0x66
 800e5c4:	f7fe fdba 	bl	800d13c <__assert_func>
 800e5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5cc:	6006      	str	r6, [r0, #0]
 800e5ce:	60c6      	str	r6, [r0, #12]
 800e5d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e5d2:	68f3      	ldr	r3, [r6, #12]
 800e5d4:	b183      	cbz	r3, 800e5f8 <_Balloc+0x50>
 800e5d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5de:	b9b8      	cbnz	r0, 800e610 <_Balloc+0x68>
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	fa01 f605 	lsl.w	r6, r1, r5
 800e5e6:	1d72      	adds	r2, r6, #5
 800e5e8:	0092      	lsls	r2, r2, #2
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f000 fc97 	bl	800ef1e <_calloc_r>
 800e5f0:	b160      	cbz	r0, 800e60c <_Balloc+0x64>
 800e5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5f6:	e00e      	b.n	800e616 <_Balloc+0x6e>
 800e5f8:	2221      	movs	r2, #33	; 0x21
 800e5fa:	2104      	movs	r1, #4
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 fc8e 	bl	800ef1e <_calloc_r>
 800e602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e604:	60f0      	str	r0, [r6, #12]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1e4      	bne.n	800e5d6 <_Balloc+0x2e>
 800e60c:	2000      	movs	r0, #0
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	6802      	ldr	r2, [r0, #0]
 800e612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e616:	2300      	movs	r3, #0
 800e618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e61c:	e7f7      	b.n	800e60e <_Balloc+0x66>
 800e61e:	bf00      	nop
 800e620:	08010300 	.word	0x08010300
 800e624:	080105b0 	.word	0x080105b0

0800e628 <_Bfree>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e62c:	4605      	mov	r5, r0
 800e62e:	460c      	mov	r4, r1
 800e630:	b976      	cbnz	r6, 800e650 <_Bfree+0x28>
 800e632:	2010      	movs	r0, #16
 800e634:	f7ff ff9e 	bl	800e574 <malloc>
 800e638:	4602      	mov	r2, r0
 800e63a:	6268      	str	r0, [r5, #36]	; 0x24
 800e63c:	b920      	cbnz	r0, 800e648 <_Bfree+0x20>
 800e63e:	4b09      	ldr	r3, [pc, #36]	; (800e664 <_Bfree+0x3c>)
 800e640:	4809      	ldr	r0, [pc, #36]	; (800e668 <_Bfree+0x40>)
 800e642:	218a      	movs	r1, #138	; 0x8a
 800e644:	f7fe fd7a 	bl	800d13c <__assert_func>
 800e648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e64c:	6006      	str	r6, [r0, #0]
 800e64e:	60c6      	str	r6, [r0, #12]
 800e650:	b13c      	cbz	r4, 800e662 <_Bfree+0x3a>
 800e652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e654:	6862      	ldr	r2, [r4, #4]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e65c:	6021      	str	r1, [r4, #0]
 800e65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e662:	bd70      	pop	{r4, r5, r6, pc}
 800e664:	08010300 	.word	0x08010300
 800e668:	080105b0 	.word	0x080105b0

0800e66c <__multadd>:
 800e66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e670:	690e      	ldr	r6, [r1, #16]
 800e672:	4607      	mov	r7, r0
 800e674:	4698      	mov	r8, r3
 800e676:	460c      	mov	r4, r1
 800e678:	f101 0014 	add.w	r0, r1, #20
 800e67c:	2300      	movs	r3, #0
 800e67e:	6805      	ldr	r5, [r0, #0]
 800e680:	b2a9      	uxth	r1, r5
 800e682:	fb02 8101 	mla	r1, r2, r1, r8
 800e686:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e68a:	0c2d      	lsrs	r5, r5, #16
 800e68c:	fb02 c505 	mla	r5, r2, r5, ip
 800e690:	b289      	uxth	r1, r1
 800e692:	3301      	adds	r3, #1
 800e694:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e698:	429e      	cmp	r6, r3
 800e69a:	f840 1b04 	str.w	r1, [r0], #4
 800e69e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e6a2:	dcec      	bgt.n	800e67e <__multadd+0x12>
 800e6a4:	f1b8 0f00 	cmp.w	r8, #0
 800e6a8:	d022      	beq.n	800e6f0 <__multadd+0x84>
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	42b3      	cmp	r3, r6
 800e6ae:	dc19      	bgt.n	800e6e4 <__multadd+0x78>
 800e6b0:	6861      	ldr	r1, [r4, #4]
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	3101      	adds	r1, #1
 800e6b6:	f7ff ff77 	bl	800e5a8 <_Balloc>
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	b928      	cbnz	r0, 800e6ca <__multadd+0x5e>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	4b0d      	ldr	r3, [pc, #52]	; (800e6f8 <__multadd+0x8c>)
 800e6c2:	480e      	ldr	r0, [pc, #56]	; (800e6fc <__multadd+0x90>)
 800e6c4:	21b5      	movs	r1, #181	; 0xb5
 800e6c6:	f7fe fd39 	bl	800d13c <__assert_func>
 800e6ca:	6922      	ldr	r2, [r4, #16]
 800e6cc:	3202      	adds	r2, #2
 800e6ce:	f104 010c 	add.w	r1, r4, #12
 800e6d2:	0092      	lsls	r2, r2, #2
 800e6d4:	300c      	adds	r0, #12
 800e6d6:	f7fc ff15 	bl	800b504 <memcpy>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f7ff ffa3 	bl	800e628 <_Bfree>
 800e6e2:	462c      	mov	r4, r5
 800e6e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e6e8:	3601      	adds	r6, #1
 800e6ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800e6ee:	6126      	str	r6, [r4, #16]
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f6:	bf00      	nop
 800e6f8:	08010521 	.word	0x08010521
 800e6fc:	080105b0 	.word	0x080105b0

0800e700 <__s2b>:
 800e700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	4615      	mov	r5, r2
 800e708:	461f      	mov	r7, r3
 800e70a:	2209      	movs	r2, #9
 800e70c:	3308      	adds	r3, #8
 800e70e:	4606      	mov	r6, r0
 800e710:	fb93 f3f2 	sdiv	r3, r3, r2
 800e714:	2100      	movs	r1, #0
 800e716:	2201      	movs	r2, #1
 800e718:	429a      	cmp	r2, r3
 800e71a:	db09      	blt.n	800e730 <__s2b+0x30>
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7ff ff43 	bl	800e5a8 <_Balloc>
 800e722:	b940      	cbnz	r0, 800e736 <__s2b+0x36>
 800e724:	4602      	mov	r2, r0
 800e726:	4b19      	ldr	r3, [pc, #100]	; (800e78c <__s2b+0x8c>)
 800e728:	4819      	ldr	r0, [pc, #100]	; (800e790 <__s2b+0x90>)
 800e72a:	21ce      	movs	r1, #206	; 0xce
 800e72c:	f7fe fd06 	bl	800d13c <__assert_func>
 800e730:	0052      	lsls	r2, r2, #1
 800e732:	3101      	adds	r1, #1
 800e734:	e7f0      	b.n	800e718 <__s2b+0x18>
 800e736:	9b08      	ldr	r3, [sp, #32]
 800e738:	6143      	str	r3, [r0, #20]
 800e73a:	2d09      	cmp	r5, #9
 800e73c:	f04f 0301 	mov.w	r3, #1
 800e740:	6103      	str	r3, [r0, #16]
 800e742:	dd16      	ble.n	800e772 <__s2b+0x72>
 800e744:	f104 0909 	add.w	r9, r4, #9
 800e748:	46c8      	mov	r8, r9
 800e74a:	442c      	add	r4, r5
 800e74c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e750:	4601      	mov	r1, r0
 800e752:	3b30      	subs	r3, #48	; 0x30
 800e754:	220a      	movs	r2, #10
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff ff88 	bl	800e66c <__multadd>
 800e75c:	45a0      	cmp	r8, r4
 800e75e:	d1f5      	bne.n	800e74c <__s2b+0x4c>
 800e760:	f1a5 0408 	sub.w	r4, r5, #8
 800e764:	444c      	add	r4, r9
 800e766:	1b2d      	subs	r5, r5, r4
 800e768:	1963      	adds	r3, r4, r5
 800e76a:	42bb      	cmp	r3, r7
 800e76c:	db04      	blt.n	800e778 <__s2b+0x78>
 800e76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e772:	340a      	adds	r4, #10
 800e774:	2509      	movs	r5, #9
 800e776:	e7f6      	b.n	800e766 <__s2b+0x66>
 800e778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e77c:	4601      	mov	r1, r0
 800e77e:	3b30      	subs	r3, #48	; 0x30
 800e780:	220a      	movs	r2, #10
 800e782:	4630      	mov	r0, r6
 800e784:	f7ff ff72 	bl	800e66c <__multadd>
 800e788:	e7ee      	b.n	800e768 <__s2b+0x68>
 800e78a:	bf00      	nop
 800e78c:	08010521 	.word	0x08010521
 800e790:	080105b0 	.word	0x080105b0

0800e794 <__hi0bits>:
 800e794:	0c03      	lsrs	r3, r0, #16
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	b9d3      	cbnz	r3, 800e7d0 <__hi0bits+0x3c>
 800e79a:	0400      	lsls	r0, r0, #16
 800e79c:	2310      	movs	r3, #16
 800e79e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e7a2:	bf04      	itt	eq
 800e7a4:	0200      	lsleq	r0, r0, #8
 800e7a6:	3308      	addeq	r3, #8
 800e7a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e7ac:	bf04      	itt	eq
 800e7ae:	0100      	lsleq	r0, r0, #4
 800e7b0:	3304      	addeq	r3, #4
 800e7b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e7b6:	bf04      	itt	eq
 800e7b8:	0080      	lsleq	r0, r0, #2
 800e7ba:	3302      	addeq	r3, #2
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	db05      	blt.n	800e7cc <__hi0bits+0x38>
 800e7c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e7c4:	f103 0301 	add.w	r3, r3, #1
 800e7c8:	bf08      	it	eq
 800e7ca:	2320      	moveq	r3, #32
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	4770      	bx	lr
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	e7e4      	b.n	800e79e <__hi0bits+0xa>

0800e7d4 <__lo0bits>:
 800e7d4:	6803      	ldr	r3, [r0, #0]
 800e7d6:	f013 0207 	ands.w	r2, r3, #7
 800e7da:	4601      	mov	r1, r0
 800e7dc:	d00b      	beq.n	800e7f6 <__lo0bits+0x22>
 800e7de:	07da      	lsls	r2, r3, #31
 800e7e0:	d424      	bmi.n	800e82c <__lo0bits+0x58>
 800e7e2:	0798      	lsls	r0, r3, #30
 800e7e4:	bf49      	itett	mi
 800e7e6:	085b      	lsrmi	r3, r3, #1
 800e7e8:	089b      	lsrpl	r3, r3, #2
 800e7ea:	2001      	movmi	r0, #1
 800e7ec:	600b      	strmi	r3, [r1, #0]
 800e7ee:	bf5c      	itt	pl
 800e7f0:	600b      	strpl	r3, [r1, #0]
 800e7f2:	2002      	movpl	r0, #2
 800e7f4:	4770      	bx	lr
 800e7f6:	b298      	uxth	r0, r3
 800e7f8:	b9b0      	cbnz	r0, 800e828 <__lo0bits+0x54>
 800e7fa:	0c1b      	lsrs	r3, r3, #16
 800e7fc:	2010      	movs	r0, #16
 800e7fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e802:	bf04      	itt	eq
 800e804:	0a1b      	lsreq	r3, r3, #8
 800e806:	3008      	addeq	r0, #8
 800e808:	071a      	lsls	r2, r3, #28
 800e80a:	bf04      	itt	eq
 800e80c:	091b      	lsreq	r3, r3, #4
 800e80e:	3004      	addeq	r0, #4
 800e810:	079a      	lsls	r2, r3, #30
 800e812:	bf04      	itt	eq
 800e814:	089b      	lsreq	r3, r3, #2
 800e816:	3002      	addeq	r0, #2
 800e818:	07da      	lsls	r2, r3, #31
 800e81a:	d403      	bmi.n	800e824 <__lo0bits+0x50>
 800e81c:	085b      	lsrs	r3, r3, #1
 800e81e:	f100 0001 	add.w	r0, r0, #1
 800e822:	d005      	beq.n	800e830 <__lo0bits+0x5c>
 800e824:	600b      	str	r3, [r1, #0]
 800e826:	4770      	bx	lr
 800e828:	4610      	mov	r0, r2
 800e82a:	e7e8      	b.n	800e7fe <__lo0bits+0x2a>
 800e82c:	2000      	movs	r0, #0
 800e82e:	4770      	bx	lr
 800e830:	2020      	movs	r0, #32
 800e832:	4770      	bx	lr

0800e834 <__i2b>:
 800e834:	b510      	push	{r4, lr}
 800e836:	460c      	mov	r4, r1
 800e838:	2101      	movs	r1, #1
 800e83a:	f7ff feb5 	bl	800e5a8 <_Balloc>
 800e83e:	4602      	mov	r2, r0
 800e840:	b928      	cbnz	r0, 800e84e <__i2b+0x1a>
 800e842:	4b05      	ldr	r3, [pc, #20]	; (800e858 <__i2b+0x24>)
 800e844:	4805      	ldr	r0, [pc, #20]	; (800e85c <__i2b+0x28>)
 800e846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e84a:	f7fe fc77 	bl	800d13c <__assert_func>
 800e84e:	2301      	movs	r3, #1
 800e850:	6144      	str	r4, [r0, #20]
 800e852:	6103      	str	r3, [r0, #16]
 800e854:	bd10      	pop	{r4, pc}
 800e856:	bf00      	nop
 800e858:	08010521 	.word	0x08010521
 800e85c:	080105b0 	.word	0x080105b0

0800e860 <__multiply>:
 800e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	4614      	mov	r4, r2
 800e866:	690a      	ldr	r2, [r1, #16]
 800e868:	6923      	ldr	r3, [r4, #16]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	bfb8      	it	lt
 800e86e:	460b      	movlt	r3, r1
 800e870:	460d      	mov	r5, r1
 800e872:	bfbc      	itt	lt
 800e874:	4625      	movlt	r5, r4
 800e876:	461c      	movlt	r4, r3
 800e878:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e87c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e880:	68ab      	ldr	r3, [r5, #8]
 800e882:	6869      	ldr	r1, [r5, #4]
 800e884:	eb0a 0709 	add.w	r7, sl, r9
 800e888:	42bb      	cmp	r3, r7
 800e88a:	b085      	sub	sp, #20
 800e88c:	bfb8      	it	lt
 800e88e:	3101      	addlt	r1, #1
 800e890:	f7ff fe8a 	bl	800e5a8 <_Balloc>
 800e894:	b930      	cbnz	r0, 800e8a4 <__multiply+0x44>
 800e896:	4602      	mov	r2, r0
 800e898:	4b42      	ldr	r3, [pc, #264]	; (800e9a4 <__multiply+0x144>)
 800e89a:	4843      	ldr	r0, [pc, #268]	; (800e9a8 <__multiply+0x148>)
 800e89c:	f240 115d 	movw	r1, #349	; 0x15d
 800e8a0:	f7fe fc4c 	bl	800d13c <__assert_func>
 800e8a4:	f100 0614 	add.w	r6, r0, #20
 800e8a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e8ac:	4633      	mov	r3, r6
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4543      	cmp	r3, r8
 800e8b2:	d31e      	bcc.n	800e8f2 <__multiply+0x92>
 800e8b4:	f105 0c14 	add.w	ip, r5, #20
 800e8b8:	f104 0314 	add.w	r3, r4, #20
 800e8bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e8c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e8c4:	9202      	str	r2, [sp, #8]
 800e8c6:	ebac 0205 	sub.w	r2, ip, r5
 800e8ca:	3a15      	subs	r2, #21
 800e8cc:	f022 0203 	bic.w	r2, r2, #3
 800e8d0:	3204      	adds	r2, #4
 800e8d2:	f105 0115 	add.w	r1, r5, #21
 800e8d6:	458c      	cmp	ip, r1
 800e8d8:	bf38      	it	cc
 800e8da:	2204      	movcc	r2, #4
 800e8dc:	9201      	str	r2, [sp, #4]
 800e8de:	9a02      	ldr	r2, [sp, #8]
 800e8e0:	9303      	str	r3, [sp, #12]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d808      	bhi.n	800e8f8 <__multiply+0x98>
 800e8e6:	2f00      	cmp	r7, #0
 800e8e8:	dc55      	bgt.n	800e996 <__multiply+0x136>
 800e8ea:	6107      	str	r7, [r0, #16]
 800e8ec:	b005      	add	sp, #20
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	f843 2b04 	str.w	r2, [r3], #4
 800e8f6:	e7db      	b.n	800e8b0 <__multiply+0x50>
 800e8f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8fc:	f1ba 0f00 	cmp.w	sl, #0
 800e900:	d020      	beq.n	800e944 <__multiply+0xe4>
 800e902:	f105 0e14 	add.w	lr, r5, #20
 800e906:	46b1      	mov	r9, r6
 800e908:	2200      	movs	r2, #0
 800e90a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e90e:	f8d9 b000 	ldr.w	fp, [r9]
 800e912:	b2a1      	uxth	r1, r4
 800e914:	fa1f fb8b 	uxth.w	fp, fp
 800e918:	fb0a b101 	mla	r1, sl, r1, fp
 800e91c:	4411      	add	r1, r2
 800e91e:	f8d9 2000 	ldr.w	r2, [r9]
 800e922:	0c24      	lsrs	r4, r4, #16
 800e924:	0c12      	lsrs	r2, r2, #16
 800e926:	fb0a 2404 	mla	r4, sl, r4, r2
 800e92a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e92e:	b289      	uxth	r1, r1
 800e930:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e934:	45f4      	cmp	ip, lr
 800e936:	f849 1b04 	str.w	r1, [r9], #4
 800e93a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e93e:	d8e4      	bhi.n	800e90a <__multiply+0xaa>
 800e940:	9901      	ldr	r1, [sp, #4]
 800e942:	5072      	str	r2, [r6, r1]
 800e944:	9a03      	ldr	r2, [sp, #12]
 800e946:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e94a:	3304      	adds	r3, #4
 800e94c:	f1b9 0f00 	cmp.w	r9, #0
 800e950:	d01f      	beq.n	800e992 <__multiply+0x132>
 800e952:	6834      	ldr	r4, [r6, #0]
 800e954:	f105 0114 	add.w	r1, r5, #20
 800e958:	46b6      	mov	lr, r6
 800e95a:	f04f 0a00 	mov.w	sl, #0
 800e95e:	880a      	ldrh	r2, [r1, #0]
 800e960:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e964:	fb09 b202 	mla	r2, r9, r2, fp
 800e968:	4492      	add	sl, r2
 800e96a:	b2a4      	uxth	r4, r4
 800e96c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e970:	f84e 4b04 	str.w	r4, [lr], #4
 800e974:	f851 4b04 	ldr.w	r4, [r1], #4
 800e978:	f8be 2000 	ldrh.w	r2, [lr]
 800e97c:	0c24      	lsrs	r4, r4, #16
 800e97e:	fb09 2404 	mla	r4, r9, r4, r2
 800e982:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e986:	458c      	cmp	ip, r1
 800e988:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e98c:	d8e7      	bhi.n	800e95e <__multiply+0xfe>
 800e98e:	9a01      	ldr	r2, [sp, #4]
 800e990:	50b4      	str	r4, [r6, r2]
 800e992:	3604      	adds	r6, #4
 800e994:	e7a3      	b.n	800e8de <__multiply+0x7e>
 800e996:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1a5      	bne.n	800e8ea <__multiply+0x8a>
 800e99e:	3f01      	subs	r7, #1
 800e9a0:	e7a1      	b.n	800e8e6 <__multiply+0x86>
 800e9a2:	bf00      	nop
 800e9a4:	08010521 	.word	0x08010521
 800e9a8:	080105b0 	.word	0x080105b0

0800e9ac <__pow5mult>:
 800e9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9b0:	4615      	mov	r5, r2
 800e9b2:	f012 0203 	ands.w	r2, r2, #3
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	d007      	beq.n	800e9cc <__pow5mult+0x20>
 800e9bc:	4c25      	ldr	r4, [pc, #148]	; (800ea54 <__pow5mult+0xa8>)
 800e9be:	3a01      	subs	r2, #1
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9c6:	f7ff fe51 	bl	800e66c <__multadd>
 800e9ca:	4607      	mov	r7, r0
 800e9cc:	10ad      	asrs	r5, r5, #2
 800e9ce:	d03d      	beq.n	800ea4c <__pow5mult+0xa0>
 800e9d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e9d2:	b97c      	cbnz	r4, 800e9f4 <__pow5mult+0x48>
 800e9d4:	2010      	movs	r0, #16
 800e9d6:	f7ff fdcd 	bl	800e574 <malloc>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800e9de:	b928      	cbnz	r0, 800e9ec <__pow5mult+0x40>
 800e9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ea58 <__pow5mult+0xac>)
 800e9e2:	481e      	ldr	r0, [pc, #120]	; (800ea5c <__pow5mult+0xb0>)
 800e9e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e9e8:	f7fe fba8 	bl	800d13c <__assert_func>
 800e9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9f0:	6004      	str	r4, [r0, #0]
 800e9f2:	60c4      	str	r4, [r0, #12]
 800e9f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9fc:	b94c      	cbnz	r4, 800ea12 <__pow5mult+0x66>
 800e9fe:	f240 2171 	movw	r1, #625	; 0x271
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7ff ff16 	bl	800e834 <__i2b>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea0e:	4604      	mov	r4, r0
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	f04f 0900 	mov.w	r9, #0
 800ea16:	07eb      	lsls	r3, r5, #31
 800ea18:	d50a      	bpl.n	800ea30 <__pow5mult+0x84>
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f7ff ff1e 	bl	800e860 <__multiply>
 800ea24:	4639      	mov	r1, r7
 800ea26:	4680      	mov	r8, r0
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7ff fdfd 	bl	800e628 <_Bfree>
 800ea2e:	4647      	mov	r7, r8
 800ea30:	106d      	asrs	r5, r5, #1
 800ea32:	d00b      	beq.n	800ea4c <__pow5mult+0xa0>
 800ea34:	6820      	ldr	r0, [r4, #0]
 800ea36:	b938      	cbnz	r0, 800ea48 <__pow5mult+0x9c>
 800ea38:	4622      	mov	r2, r4
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff ff0f 	bl	800e860 <__multiply>
 800ea42:	6020      	str	r0, [r4, #0]
 800ea44:	f8c0 9000 	str.w	r9, [r0]
 800ea48:	4604      	mov	r4, r0
 800ea4a:	e7e4      	b.n	800ea16 <__pow5mult+0x6a>
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea52:	bf00      	nop
 800ea54:	08010700 	.word	0x08010700
 800ea58:	08010300 	.word	0x08010300
 800ea5c:	080105b0 	.word	0x080105b0

0800ea60 <__lshift>:
 800ea60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea64:	460c      	mov	r4, r1
 800ea66:	6849      	ldr	r1, [r1, #4]
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea6e:	68a3      	ldr	r3, [r4, #8]
 800ea70:	4607      	mov	r7, r0
 800ea72:	4691      	mov	r9, r2
 800ea74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea78:	f108 0601 	add.w	r6, r8, #1
 800ea7c:	42b3      	cmp	r3, r6
 800ea7e:	db0b      	blt.n	800ea98 <__lshift+0x38>
 800ea80:	4638      	mov	r0, r7
 800ea82:	f7ff fd91 	bl	800e5a8 <_Balloc>
 800ea86:	4605      	mov	r5, r0
 800ea88:	b948      	cbnz	r0, 800ea9e <__lshift+0x3e>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	4b28      	ldr	r3, [pc, #160]	; (800eb30 <__lshift+0xd0>)
 800ea8e:	4829      	ldr	r0, [pc, #164]	; (800eb34 <__lshift+0xd4>)
 800ea90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea94:	f7fe fb52 	bl	800d13c <__assert_func>
 800ea98:	3101      	adds	r1, #1
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	e7ee      	b.n	800ea7c <__lshift+0x1c>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f100 0114 	add.w	r1, r0, #20
 800eaa4:	f100 0210 	add.w	r2, r0, #16
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	4553      	cmp	r3, sl
 800eaac:	db33      	blt.n	800eb16 <__lshift+0xb6>
 800eaae:	6920      	ldr	r0, [r4, #16]
 800eab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eab4:	f104 0314 	add.w	r3, r4, #20
 800eab8:	f019 091f 	ands.w	r9, r9, #31
 800eabc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eac4:	d02b      	beq.n	800eb1e <__lshift+0xbe>
 800eac6:	f1c9 0e20 	rsb	lr, r9, #32
 800eaca:	468a      	mov	sl, r1
 800eacc:	2200      	movs	r2, #0
 800eace:	6818      	ldr	r0, [r3, #0]
 800ead0:	fa00 f009 	lsl.w	r0, r0, r9
 800ead4:	4302      	orrs	r2, r0
 800ead6:	f84a 2b04 	str.w	r2, [sl], #4
 800eada:	f853 2b04 	ldr.w	r2, [r3], #4
 800eade:	459c      	cmp	ip, r3
 800eae0:	fa22 f20e 	lsr.w	r2, r2, lr
 800eae4:	d8f3      	bhi.n	800eace <__lshift+0x6e>
 800eae6:	ebac 0304 	sub.w	r3, ip, r4
 800eaea:	3b15      	subs	r3, #21
 800eaec:	f023 0303 	bic.w	r3, r3, #3
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	f104 0015 	add.w	r0, r4, #21
 800eaf6:	4584      	cmp	ip, r0
 800eaf8:	bf38      	it	cc
 800eafa:	2304      	movcc	r3, #4
 800eafc:	50ca      	str	r2, [r1, r3]
 800eafe:	b10a      	cbz	r2, 800eb04 <__lshift+0xa4>
 800eb00:	f108 0602 	add.w	r6, r8, #2
 800eb04:	3e01      	subs	r6, #1
 800eb06:	4638      	mov	r0, r7
 800eb08:	612e      	str	r6, [r5, #16]
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	f7ff fd8c 	bl	800e628 <_Bfree>
 800eb10:	4628      	mov	r0, r5
 800eb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb16:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	e7c5      	b.n	800eaaa <__lshift+0x4a>
 800eb1e:	3904      	subs	r1, #4
 800eb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb24:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb28:	459c      	cmp	ip, r3
 800eb2a:	d8f9      	bhi.n	800eb20 <__lshift+0xc0>
 800eb2c:	e7ea      	b.n	800eb04 <__lshift+0xa4>
 800eb2e:	bf00      	nop
 800eb30:	08010521 	.word	0x08010521
 800eb34:	080105b0 	.word	0x080105b0

0800eb38 <__mcmp>:
 800eb38:	b530      	push	{r4, r5, lr}
 800eb3a:	6902      	ldr	r2, [r0, #16]
 800eb3c:	690c      	ldr	r4, [r1, #16]
 800eb3e:	1b12      	subs	r2, r2, r4
 800eb40:	d10e      	bne.n	800eb60 <__mcmp+0x28>
 800eb42:	f100 0314 	add.w	r3, r0, #20
 800eb46:	3114      	adds	r1, #20
 800eb48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb58:	42a5      	cmp	r5, r4
 800eb5a:	d003      	beq.n	800eb64 <__mcmp+0x2c>
 800eb5c:	d305      	bcc.n	800eb6a <__mcmp+0x32>
 800eb5e:	2201      	movs	r2, #1
 800eb60:	4610      	mov	r0, r2
 800eb62:	bd30      	pop	{r4, r5, pc}
 800eb64:	4283      	cmp	r3, r0
 800eb66:	d3f3      	bcc.n	800eb50 <__mcmp+0x18>
 800eb68:	e7fa      	b.n	800eb60 <__mcmp+0x28>
 800eb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb6e:	e7f7      	b.n	800eb60 <__mcmp+0x28>

0800eb70 <__mdiff>:
 800eb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	460c      	mov	r4, r1
 800eb76:	4606      	mov	r6, r0
 800eb78:	4611      	mov	r1, r2
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	4617      	mov	r7, r2
 800eb7e:	f7ff ffdb 	bl	800eb38 <__mcmp>
 800eb82:	1e05      	subs	r5, r0, #0
 800eb84:	d110      	bne.n	800eba8 <__mdiff+0x38>
 800eb86:	4629      	mov	r1, r5
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7ff fd0d 	bl	800e5a8 <_Balloc>
 800eb8e:	b930      	cbnz	r0, 800eb9e <__mdiff+0x2e>
 800eb90:	4b39      	ldr	r3, [pc, #228]	; (800ec78 <__mdiff+0x108>)
 800eb92:	4602      	mov	r2, r0
 800eb94:	f240 2132 	movw	r1, #562	; 0x232
 800eb98:	4838      	ldr	r0, [pc, #224]	; (800ec7c <__mdiff+0x10c>)
 800eb9a:	f7fe facf 	bl	800d13c <__assert_func>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba8:	bfa4      	itt	ge
 800ebaa:	463b      	movge	r3, r7
 800ebac:	4627      	movge	r7, r4
 800ebae:	4630      	mov	r0, r6
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	bfa6      	itte	ge
 800ebb4:	461c      	movge	r4, r3
 800ebb6:	2500      	movge	r5, #0
 800ebb8:	2501      	movlt	r5, #1
 800ebba:	f7ff fcf5 	bl	800e5a8 <_Balloc>
 800ebbe:	b920      	cbnz	r0, 800ebca <__mdiff+0x5a>
 800ebc0:	4b2d      	ldr	r3, [pc, #180]	; (800ec78 <__mdiff+0x108>)
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ebc8:	e7e6      	b.n	800eb98 <__mdiff+0x28>
 800ebca:	693e      	ldr	r6, [r7, #16]
 800ebcc:	60c5      	str	r5, [r0, #12]
 800ebce:	6925      	ldr	r5, [r4, #16]
 800ebd0:	f107 0114 	add.w	r1, r7, #20
 800ebd4:	f104 0914 	add.w	r9, r4, #20
 800ebd8:	f100 0e14 	add.w	lr, r0, #20
 800ebdc:	f107 0210 	add.w	r2, r7, #16
 800ebe0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ebe4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ebe8:	46f2      	mov	sl, lr
 800ebea:	2700      	movs	r7, #0
 800ebec:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebf4:	fa1f f883 	uxth.w	r8, r3
 800ebf8:	fa17 f78b 	uxtah	r7, r7, fp
 800ebfc:	0c1b      	lsrs	r3, r3, #16
 800ebfe:	eba7 0808 	sub.w	r8, r7, r8
 800ec02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ec06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec0a:	fa1f f888 	uxth.w	r8, r8
 800ec0e:	141f      	asrs	r7, r3, #16
 800ec10:	454d      	cmp	r5, r9
 800ec12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec16:	f84a 3b04 	str.w	r3, [sl], #4
 800ec1a:	d8e7      	bhi.n	800ebec <__mdiff+0x7c>
 800ec1c:	1b2b      	subs	r3, r5, r4
 800ec1e:	3b15      	subs	r3, #21
 800ec20:	f023 0303 	bic.w	r3, r3, #3
 800ec24:	3304      	adds	r3, #4
 800ec26:	3415      	adds	r4, #21
 800ec28:	42a5      	cmp	r5, r4
 800ec2a:	bf38      	it	cc
 800ec2c:	2304      	movcc	r3, #4
 800ec2e:	4419      	add	r1, r3
 800ec30:	4473      	add	r3, lr
 800ec32:	469e      	mov	lr, r3
 800ec34:	460d      	mov	r5, r1
 800ec36:	4565      	cmp	r5, ip
 800ec38:	d30e      	bcc.n	800ec58 <__mdiff+0xe8>
 800ec3a:	f10c 0203 	add.w	r2, ip, #3
 800ec3e:	1a52      	subs	r2, r2, r1
 800ec40:	f022 0203 	bic.w	r2, r2, #3
 800ec44:	3903      	subs	r1, #3
 800ec46:	458c      	cmp	ip, r1
 800ec48:	bf38      	it	cc
 800ec4a:	2200      	movcc	r2, #0
 800ec4c:	441a      	add	r2, r3
 800ec4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec52:	b17b      	cbz	r3, 800ec74 <__mdiff+0x104>
 800ec54:	6106      	str	r6, [r0, #16]
 800ec56:	e7a5      	b.n	800eba4 <__mdiff+0x34>
 800ec58:	f855 8b04 	ldr.w	r8, [r5], #4
 800ec5c:	fa17 f488 	uxtah	r4, r7, r8
 800ec60:	1422      	asrs	r2, r4, #16
 800ec62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ec66:	b2a4      	uxth	r4, r4
 800ec68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ec6c:	f84e 4b04 	str.w	r4, [lr], #4
 800ec70:	1417      	asrs	r7, r2, #16
 800ec72:	e7e0      	b.n	800ec36 <__mdiff+0xc6>
 800ec74:	3e01      	subs	r6, #1
 800ec76:	e7ea      	b.n	800ec4e <__mdiff+0xde>
 800ec78:	08010521 	.word	0x08010521
 800ec7c:	080105b0 	.word	0x080105b0

0800ec80 <__ulp>:
 800ec80:	b082      	sub	sp, #8
 800ec82:	ed8d 0b00 	vstr	d0, [sp]
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	4912      	ldr	r1, [pc, #72]	; (800ecd4 <__ulp+0x54>)
 800ec8a:	4019      	ands	r1, r3
 800ec8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ec90:	2900      	cmp	r1, #0
 800ec92:	dd05      	ble.n	800eca0 <__ulp+0x20>
 800ec94:	2200      	movs	r2, #0
 800ec96:	460b      	mov	r3, r1
 800ec98:	ec43 2b10 	vmov	d0, r2, r3
 800ec9c:	b002      	add	sp, #8
 800ec9e:	4770      	bx	lr
 800eca0:	4249      	negs	r1, r1
 800eca2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eca6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ecaa:	f04f 0200 	mov.w	r2, #0
 800ecae:	f04f 0300 	mov.w	r3, #0
 800ecb2:	da04      	bge.n	800ecbe <__ulp+0x3e>
 800ecb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ecb8:	fa41 f300 	asr.w	r3, r1, r0
 800ecbc:	e7ec      	b.n	800ec98 <__ulp+0x18>
 800ecbe:	f1a0 0114 	sub.w	r1, r0, #20
 800ecc2:	291e      	cmp	r1, #30
 800ecc4:	bfda      	itte	le
 800ecc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ecca:	fa20 f101 	lsrle.w	r1, r0, r1
 800ecce:	2101      	movgt	r1, #1
 800ecd0:	460a      	mov	r2, r1
 800ecd2:	e7e1      	b.n	800ec98 <__ulp+0x18>
 800ecd4:	7ff00000 	.word	0x7ff00000

0800ecd8 <__b2d>:
 800ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecda:	6905      	ldr	r5, [r0, #16]
 800ecdc:	f100 0714 	add.w	r7, r0, #20
 800ece0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ece4:	1f2e      	subs	r6, r5, #4
 800ece6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ecea:	4620      	mov	r0, r4
 800ecec:	f7ff fd52 	bl	800e794 <__hi0bits>
 800ecf0:	f1c0 0320 	rsb	r3, r0, #32
 800ecf4:	280a      	cmp	r0, #10
 800ecf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ed74 <__b2d+0x9c>
 800ecfa:	600b      	str	r3, [r1, #0]
 800ecfc:	dc14      	bgt.n	800ed28 <__b2d+0x50>
 800ecfe:	f1c0 0e0b 	rsb	lr, r0, #11
 800ed02:	fa24 f10e 	lsr.w	r1, r4, lr
 800ed06:	42b7      	cmp	r7, r6
 800ed08:	ea41 030c 	orr.w	r3, r1, ip
 800ed0c:	bf34      	ite	cc
 800ed0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ed12:	2100      	movcs	r1, #0
 800ed14:	3015      	adds	r0, #21
 800ed16:	fa04 f000 	lsl.w	r0, r4, r0
 800ed1a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ed1e:	ea40 0201 	orr.w	r2, r0, r1
 800ed22:	ec43 2b10 	vmov	d0, r2, r3
 800ed26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed28:	42b7      	cmp	r7, r6
 800ed2a:	bf3a      	itte	cc
 800ed2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ed30:	f1a5 0608 	subcc.w	r6, r5, #8
 800ed34:	2100      	movcs	r1, #0
 800ed36:	380b      	subs	r0, #11
 800ed38:	d017      	beq.n	800ed6a <__b2d+0x92>
 800ed3a:	f1c0 0c20 	rsb	ip, r0, #32
 800ed3e:	fa04 f500 	lsl.w	r5, r4, r0
 800ed42:	42be      	cmp	r6, r7
 800ed44:	fa21 f40c 	lsr.w	r4, r1, ip
 800ed48:	ea45 0504 	orr.w	r5, r5, r4
 800ed4c:	bf8c      	ite	hi
 800ed4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ed52:	2400      	movls	r4, #0
 800ed54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ed58:	fa01 f000 	lsl.w	r0, r1, r0
 800ed5c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ed60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ed64:	ea40 0204 	orr.w	r2, r0, r4
 800ed68:	e7db      	b.n	800ed22 <__b2d+0x4a>
 800ed6a:	ea44 030c 	orr.w	r3, r4, ip
 800ed6e:	460a      	mov	r2, r1
 800ed70:	e7d7      	b.n	800ed22 <__b2d+0x4a>
 800ed72:	bf00      	nop
 800ed74:	3ff00000 	.word	0x3ff00000

0800ed78 <__d2b>:
 800ed78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	4689      	mov	r9, r1
 800ed7e:	2101      	movs	r1, #1
 800ed80:	ec57 6b10 	vmov	r6, r7, d0
 800ed84:	4690      	mov	r8, r2
 800ed86:	f7ff fc0f 	bl	800e5a8 <_Balloc>
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	b930      	cbnz	r0, 800ed9c <__d2b+0x24>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	4b25      	ldr	r3, [pc, #148]	; (800ee28 <__d2b+0xb0>)
 800ed92:	4826      	ldr	r0, [pc, #152]	; (800ee2c <__d2b+0xb4>)
 800ed94:	f240 310a 	movw	r1, #778	; 0x30a
 800ed98:	f7fe f9d0 	bl	800d13c <__assert_func>
 800ed9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eda4:	bb35      	cbnz	r5, 800edf4 <__d2b+0x7c>
 800eda6:	2e00      	cmp	r6, #0
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	d028      	beq.n	800edfe <__d2b+0x86>
 800edac:	4668      	mov	r0, sp
 800edae:	9600      	str	r6, [sp, #0]
 800edb0:	f7ff fd10 	bl	800e7d4 <__lo0bits>
 800edb4:	9900      	ldr	r1, [sp, #0]
 800edb6:	b300      	cbz	r0, 800edfa <__d2b+0x82>
 800edb8:	9a01      	ldr	r2, [sp, #4]
 800edba:	f1c0 0320 	rsb	r3, r0, #32
 800edbe:	fa02 f303 	lsl.w	r3, r2, r3
 800edc2:	430b      	orrs	r3, r1
 800edc4:	40c2      	lsrs	r2, r0
 800edc6:	6163      	str	r3, [r4, #20]
 800edc8:	9201      	str	r2, [sp, #4]
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	61a3      	str	r3, [r4, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	bf14      	ite	ne
 800edd2:	2202      	movne	r2, #2
 800edd4:	2201      	moveq	r2, #1
 800edd6:	6122      	str	r2, [r4, #16]
 800edd8:	b1d5      	cbz	r5, 800ee10 <__d2b+0x98>
 800edda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800edde:	4405      	add	r5, r0
 800ede0:	f8c9 5000 	str.w	r5, [r9]
 800ede4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ede8:	f8c8 0000 	str.w	r0, [r8]
 800edec:	4620      	mov	r0, r4
 800edee:	b003      	add	sp, #12
 800edf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edf8:	e7d5      	b.n	800eda6 <__d2b+0x2e>
 800edfa:	6161      	str	r1, [r4, #20]
 800edfc:	e7e5      	b.n	800edca <__d2b+0x52>
 800edfe:	a801      	add	r0, sp, #4
 800ee00:	f7ff fce8 	bl	800e7d4 <__lo0bits>
 800ee04:	9b01      	ldr	r3, [sp, #4]
 800ee06:	6163      	str	r3, [r4, #20]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	6122      	str	r2, [r4, #16]
 800ee0c:	3020      	adds	r0, #32
 800ee0e:	e7e3      	b.n	800edd8 <__d2b+0x60>
 800ee10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee18:	f8c9 0000 	str.w	r0, [r9]
 800ee1c:	6918      	ldr	r0, [r3, #16]
 800ee1e:	f7ff fcb9 	bl	800e794 <__hi0bits>
 800ee22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee26:	e7df      	b.n	800ede8 <__d2b+0x70>
 800ee28:	08010521 	.word	0x08010521
 800ee2c:	080105b0 	.word	0x080105b0

0800ee30 <__ratio>:
 800ee30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	4688      	mov	r8, r1
 800ee36:	4669      	mov	r1, sp
 800ee38:	4681      	mov	r9, r0
 800ee3a:	f7ff ff4d 	bl	800ecd8 <__b2d>
 800ee3e:	a901      	add	r1, sp, #4
 800ee40:	4640      	mov	r0, r8
 800ee42:	ec55 4b10 	vmov	r4, r5, d0
 800ee46:	f7ff ff47 	bl	800ecd8 <__b2d>
 800ee4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ee52:	eba3 0c02 	sub.w	ip, r3, r2
 800ee56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ee60:	ec51 0b10 	vmov	r0, r1, d0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfd6      	itet	le
 800ee68:	460a      	movle	r2, r1
 800ee6a:	462a      	movgt	r2, r5
 800ee6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee70:	468b      	mov	fp, r1
 800ee72:	462f      	mov	r7, r5
 800ee74:	bfd4      	ite	le
 800ee76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ee7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ee7e:	4620      	mov	r0, r4
 800ee80:	ee10 2a10 	vmov	r2, s0
 800ee84:	465b      	mov	r3, fp
 800ee86:	4639      	mov	r1, r7
 800ee88:	f7f1 fce0 	bl	800084c <__aeabi_ddiv>
 800ee8c:	ec41 0b10 	vmov	d0, r0, r1
 800ee90:	b003      	add	sp, #12
 800ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee96 <__copybits>:
 800ee96:	3901      	subs	r1, #1
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	1149      	asrs	r1, r1, #5
 800ee9c:	6914      	ldr	r4, [r2, #16]
 800ee9e:	3101      	adds	r1, #1
 800eea0:	f102 0314 	add.w	r3, r2, #20
 800eea4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eea8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eeac:	1f05      	subs	r5, r0, #4
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	d30c      	bcc.n	800eecc <__copybits+0x36>
 800eeb2:	1aa3      	subs	r3, r4, r2
 800eeb4:	3b11      	subs	r3, #17
 800eeb6:	f023 0303 	bic.w	r3, r3, #3
 800eeba:	3211      	adds	r2, #17
 800eebc:	42a2      	cmp	r2, r4
 800eebe:	bf88      	it	hi
 800eec0:	2300      	movhi	r3, #0
 800eec2:	4418      	add	r0, r3
 800eec4:	2300      	movs	r3, #0
 800eec6:	4288      	cmp	r0, r1
 800eec8:	d305      	bcc.n	800eed6 <__copybits+0x40>
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	f853 6b04 	ldr.w	r6, [r3], #4
 800eed0:	f845 6f04 	str.w	r6, [r5, #4]!
 800eed4:	e7eb      	b.n	800eeae <__copybits+0x18>
 800eed6:	f840 3b04 	str.w	r3, [r0], #4
 800eeda:	e7f4      	b.n	800eec6 <__copybits+0x30>

0800eedc <__any_on>:
 800eedc:	f100 0214 	add.w	r2, r0, #20
 800eee0:	6900      	ldr	r0, [r0, #16]
 800eee2:	114b      	asrs	r3, r1, #5
 800eee4:	4298      	cmp	r0, r3
 800eee6:	b510      	push	{r4, lr}
 800eee8:	db11      	blt.n	800ef0e <__any_on+0x32>
 800eeea:	dd0a      	ble.n	800ef02 <__any_on+0x26>
 800eeec:	f011 011f 	ands.w	r1, r1, #31
 800eef0:	d007      	beq.n	800ef02 <__any_on+0x26>
 800eef2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eef6:	fa24 f001 	lsr.w	r0, r4, r1
 800eefa:	fa00 f101 	lsl.w	r1, r0, r1
 800eefe:	428c      	cmp	r4, r1
 800ef00:	d10b      	bne.n	800ef1a <__any_on+0x3e>
 800ef02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d803      	bhi.n	800ef12 <__any_on+0x36>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	4603      	mov	r3, r0
 800ef10:	e7f7      	b.n	800ef02 <__any_on+0x26>
 800ef12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef16:	2900      	cmp	r1, #0
 800ef18:	d0f5      	beq.n	800ef06 <__any_on+0x2a>
 800ef1a:	2001      	movs	r0, #1
 800ef1c:	e7f6      	b.n	800ef0c <__any_on+0x30>

0800ef1e <_calloc_r>:
 800ef1e:	b513      	push	{r0, r1, r4, lr}
 800ef20:	434a      	muls	r2, r1
 800ef22:	4611      	mov	r1, r2
 800ef24:	9201      	str	r2, [sp, #4]
 800ef26:	f000 f859 	bl	800efdc <_malloc_r>
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	b118      	cbz	r0, 800ef36 <_calloc_r+0x18>
 800ef2e:	9a01      	ldr	r2, [sp, #4]
 800ef30:	2100      	movs	r1, #0
 800ef32:	f7fc faf5 	bl	800b520 <memset>
 800ef36:	4620      	mov	r0, r4
 800ef38:	b002      	add	sp, #8
 800ef3a:	bd10      	pop	{r4, pc}

0800ef3c <_free_r>:
 800ef3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef3e:	2900      	cmp	r1, #0
 800ef40:	d048      	beq.n	800efd4 <_free_r+0x98>
 800ef42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef46:	9001      	str	r0, [sp, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ef4e:	bfb8      	it	lt
 800ef50:	18e4      	addlt	r4, r4, r3
 800ef52:	f000 fea9 	bl	800fca8 <__malloc_lock>
 800ef56:	4a20      	ldr	r2, [pc, #128]	; (800efd8 <_free_r+0x9c>)
 800ef58:	9801      	ldr	r0, [sp, #4]
 800ef5a:	6813      	ldr	r3, [r2, #0]
 800ef5c:	4615      	mov	r5, r2
 800ef5e:	b933      	cbnz	r3, 800ef6e <_free_r+0x32>
 800ef60:	6063      	str	r3, [r4, #4]
 800ef62:	6014      	str	r4, [r2, #0]
 800ef64:	b003      	add	sp, #12
 800ef66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef6a:	f000 bea3 	b.w	800fcb4 <__malloc_unlock>
 800ef6e:	42a3      	cmp	r3, r4
 800ef70:	d90b      	bls.n	800ef8a <_free_r+0x4e>
 800ef72:	6821      	ldr	r1, [r4, #0]
 800ef74:	1862      	adds	r2, r4, r1
 800ef76:	4293      	cmp	r3, r2
 800ef78:	bf04      	itt	eq
 800ef7a:	681a      	ldreq	r2, [r3, #0]
 800ef7c:	685b      	ldreq	r3, [r3, #4]
 800ef7e:	6063      	str	r3, [r4, #4]
 800ef80:	bf04      	itt	eq
 800ef82:	1852      	addeq	r2, r2, r1
 800ef84:	6022      	streq	r2, [r4, #0]
 800ef86:	602c      	str	r4, [r5, #0]
 800ef88:	e7ec      	b.n	800ef64 <_free_r+0x28>
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	b10b      	cbz	r3, 800ef94 <_free_r+0x58>
 800ef90:	42a3      	cmp	r3, r4
 800ef92:	d9fa      	bls.n	800ef8a <_free_r+0x4e>
 800ef94:	6811      	ldr	r1, [r2, #0]
 800ef96:	1855      	adds	r5, r2, r1
 800ef98:	42a5      	cmp	r5, r4
 800ef9a:	d10b      	bne.n	800efb4 <_free_r+0x78>
 800ef9c:	6824      	ldr	r4, [r4, #0]
 800ef9e:	4421      	add	r1, r4
 800efa0:	1854      	adds	r4, r2, r1
 800efa2:	42a3      	cmp	r3, r4
 800efa4:	6011      	str	r1, [r2, #0]
 800efa6:	d1dd      	bne.n	800ef64 <_free_r+0x28>
 800efa8:	681c      	ldr	r4, [r3, #0]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	6053      	str	r3, [r2, #4]
 800efae:	4421      	add	r1, r4
 800efb0:	6011      	str	r1, [r2, #0]
 800efb2:	e7d7      	b.n	800ef64 <_free_r+0x28>
 800efb4:	d902      	bls.n	800efbc <_free_r+0x80>
 800efb6:	230c      	movs	r3, #12
 800efb8:	6003      	str	r3, [r0, #0]
 800efba:	e7d3      	b.n	800ef64 <_free_r+0x28>
 800efbc:	6825      	ldr	r5, [r4, #0]
 800efbe:	1961      	adds	r1, r4, r5
 800efc0:	428b      	cmp	r3, r1
 800efc2:	bf04      	itt	eq
 800efc4:	6819      	ldreq	r1, [r3, #0]
 800efc6:	685b      	ldreq	r3, [r3, #4]
 800efc8:	6063      	str	r3, [r4, #4]
 800efca:	bf04      	itt	eq
 800efcc:	1949      	addeq	r1, r1, r5
 800efce:	6021      	streq	r1, [r4, #0]
 800efd0:	6054      	str	r4, [r2, #4]
 800efd2:	e7c7      	b.n	800ef64 <_free_r+0x28>
 800efd4:	b003      	add	sp, #12
 800efd6:	bd30      	pop	{r4, r5, pc}
 800efd8:	20000f84 	.word	0x20000f84

0800efdc <_malloc_r>:
 800efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efde:	1ccd      	adds	r5, r1, #3
 800efe0:	f025 0503 	bic.w	r5, r5, #3
 800efe4:	3508      	adds	r5, #8
 800efe6:	2d0c      	cmp	r5, #12
 800efe8:	bf38      	it	cc
 800efea:	250c      	movcc	r5, #12
 800efec:	2d00      	cmp	r5, #0
 800efee:	4606      	mov	r6, r0
 800eff0:	db01      	blt.n	800eff6 <_malloc_r+0x1a>
 800eff2:	42a9      	cmp	r1, r5
 800eff4:	d903      	bls.n	800effe <_malloc_r+0x22>
 800eff6:	230c      	movs	r3, #12
 800eff8:	6033      	str	r3, [r6, #0]
 800effa:	2000      	movs	r0, #0
 800effc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800effe:	f000 fe53 	bl	800fca8 <__malloc_lock>
 800f002:	4921      	ldr	r1, [pc, #132]	; (800f088 <_malloc_r+0xac>)
 800f004:	680a      	ldr	r2, [r1, #0]
 800f006:	4614      	mov	r4, r2
 800f008:	b99c      	cbnz	r4, 800f032 <_malloc_r+0x56>
 800f00a:	4f20      	ldr	r7, [pc, #128]	; (800f08c <_malloc_r+0xb0>)
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	b923      	cbnz	r3, 800f01a <_malloc_r+0x3e>
 800f010:	4621      	mov	r1, r4
 800f012:	4630      	mov	r0, r6
 800f014:	f000 fb20 	bl	800f658 <_sbrk_r>
 800f018:	6038      	str	r0, [r7, #0]
 800f01a:	4629      	mov	r1, r5
 800f01c:	4630      	mov	r0, r6
 800f01e:	f000 fb1b 	bl	800f658 <_sbrk_r>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	d123      	bne.n	800f06e <_malloc_r+0x92>
 800f026:	230c      	movs	r3, #12
 800f028:	6033      	str	r3, [r6, #0]
 800f02a:	4630      	mov	r0, r6
 800f02c:	f000 fe42 	bl	800fcb4 <__malloc_unlock>
 800f030:	e7e3      	b.n	800effa <_malloc_r+0x1e>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	1b5b      	subs	r3, r3, r5
 800f036:	d417      	bmi.n	800f068 <_malloc_r+0x8c>
 800f038:	2b0b      	cmp	r3, #11
 800f03a:	d903      	bls.n	800f044 <_malloc_r+0x68>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	441c      	add	r4, r3
 800f040:	6025      	str	r5, [r4, #0]
 800f042:	e004      	b.n	800f04e <_malloc_r+0x72>
 800f044:	6863      	ldr	r3, [r4, #4]
 800f046:	42a2      	cmp	r2, r4
 800f048:	bf0c      	ite	eq
 800f04a:	600b      	streq	r3, [r1, #0]
 800f04c:	6053      	strne	r3, [r2, #4]
 800f04e:	4630      	mov	r0, r6
 800f050:	f000 fe30 	bl	800fcb4 <__malloc_unlock>
 800f054:	f104 000b 	add.w	r0, r4, #11
 800f058:	1d23      	adds	r3, r4, #4
 800f05a:	f020 0007 	bic.w	r0, r0, #7
 800f05e:	1ac2      	subs	r2, r0, r3
 800f060:	d0cc      	beq.n	800effc <_malloc_r+0x20>
 800f062:	1a1b      	subs	r3, r3, r0
 800f064:	50a3      	str	r3, [r4, r2]
 800f066:	e7c9      	b.n	800effc <_malloc_r+0x20>
 800f068:	4622      	mov	r2, r4
 800f06a:	6864      	ldr	r4, [r4, #4]
 800f06c:	e7cc      	b.n	800f008 <_malloc_r+0x2c>
 800f06e:	1cc4      	adds	r4, r0, #3
 800f070:	f024 0403 	bic.w	r4, r4, #3
 800f074:	42a0      	cmp	r0, r4
 800f076:	d0e3      	beq.n	800f040 <_malloc_r+0x64>
 800f078:	1a21      	subs	r1, r4, r0
 800f07a:	4630      	mov	r0, r6
 800f07c:	f000 faec 	bl	800f658 <_sbrk_r>
 800f080:	3001      	adds	r0, #1
 800f082:	d1dd      	bne.n	800f040 <_malloc_r+0x64>
 800f084:	e7cf      	b.n	800f026 <_malloc_r+0x4a>
 800f086:	bf00      	nop
 800f088:	20000f84 	.word	0x20000f84
 800f08c:	20000f88 	.word	0x20000f88

0800f090 <_realloc_r>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	4607      	mov	r7, r0
 800f094:	4614      	mov	r4, r2
 800f096:	460e      	mov	r6, r1
 800f098:	b921      	cbnz	r1, 800f0a4 <_realloc_r+0x14>
 800f09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f09e:	4611      	mov	r1, r2
 800f0a0:	f7ff bf9c 	b.w	800efdc <_malloc_r>
 800f0a4:	b922      	cbnz	r2, 800f0b0 <_realloc_r+0x20>
 800f0a6:	f7ff ff49 	bl	800ef3c <_free_r>
 800f0aa:	4625      	mov	r5, r4
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b0:	f000 fe06 	bl	800fcc0 <_malloc_usable_size_r>
 800f0b4:	42a0      	cmp	r0, r4
 800f0b6:	d20f      	bcs.n	800f0d8 <_realloc_r+0x48>
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	f7ff ff8e 	bl	800efdc <_malloc_r>
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	d0f2      	beq.n	800f0ac <_realloc_r+0x1c>
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	f7fc fa1b 	bl	800b504 <memcpy>
 800f0ce:	4631      	mov	r1, r6
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f7ff ff33 	bl	800ef3c <_free_r>
 800f0d6:	e7e9      	b.n	800f0ac <_realloc_r+0x1c>
 800f0d8:	4635      	mov	r5, r6
 800f0da:	e7e7      	b.n	800f0ac <_realloc_r+0x1c>

0800f0dc <__ssputs_r>:
 800f0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e0:	688e      	ldr	r6, [r1, #8]
 800f0e2:	429e      	cmp	r6, r3
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	4690      	mov	r8, r2
 800f0ea:	461f      	mov	r7, r3
 800f0ec:	d838      	bhi.n	800f160 <__ssputs_r+0x84>
 800f0ee:	898a      	ldrh	r2, [r1, #12]
 800f0f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0f4:	d032      	beq.n	800f15c <__ssputs_r+0x80>
 800f0f6:	6825      	ldr	r5, [r4, #0]
 800f0f8:	6909      	ldr	r1, [r1, #16]
 800f0fa:	eba5 0901 	sub.w	r9, r5, r1
 800f0fe:	6965      	ldr	r5, [r4, #20]
 800f100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f108:	3301      	adds	r3, #1
 800f10a:	444b      	add	r3, r9
 800f10c:	106d      	asrs	r5, r5, #1
 800f10e:	429d      	cmp	r5, r3
 800f110:	bf38      	it	cc
 800f112:	461d      	movcc	r5, r3
 800f114:	0553      	lsls	r3, r2, #21
 800f116:	d531      	bpl.n	800f17c <__ssputs_r+0xa0>
 800f118:	4629      	mov	r1, r5
 800f11a:	f7ff ff5f 	bl	800efdc <_malloc_r>
 800f11e:	4606      	mov	r6, r0
 800f120:	b950      	cbnz	r0, 800f138 <__ssputs_r+0x5c>
 800f122:	230c      	movs	r3, #12
 800f124:	f8ca 3000 	str.w	r3, [sl]
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f12e:	81a3      	strh	r3, [r4, #12]
 800f130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f138:	6921      	ldr	r1, [r4, #16]
 800f13a:	464a      	mov	r2, r9
 800f13c:	f7fc f9e2 	bl	800b504 <memcpy>
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14a:	81a3      	strh	r3, [r4, #12]
 800f14c:	6126      	str	r6, [r4, #16]
 800f14e:	6165      	str	r5, [r4, #20]
 800f150:	444e      	add	r6, r9
 800f152:	eba5 0509 	sub.w	r5, r5, r9
 800f156:	6026      	str	r6, [r4, #0]
 800f158:	60a5      	str	r5, [r4, #8]
 800f15a:	463e      	mov	r6, r7
 800f15c:	42be      	cmp	r6, r7
 800f15e:	d900      	bls.n	800f162 <__ssputs_r+0x86>
 800f160:	463e      	mov	r6, r7
 800f162:	4632      	mov	r2, r6
 800f164:	6820      	ldr	r0, [r4, #0]
 800f166:	4641      	mov	r1, r8
 800f168:	f000 fd84 	bl	800fc74 <memmove>
 800f16c:	68a3      	ldr	r3, [r4, #8]
 800f16e:	6822      	ldr	r2, [r4, #0]
 800f170:	1b9b      	subs	r3, r3, r6
 800f172:	4432      	add	r2, r6
 800f174:	60a3      	str	r3, [r4, #8]
 800f176:	6022      	str	r2, [r4, #0]
 800f178:	2000      	movs	r0, #0
 800f17a:	e7db      	b.n	800f134 <__ssputs_r+0x58>
 800f17c:	462a      	mov	r2, r5
 800f17e:	f7ff ff87 	bl	800f090 <_realloc_r>
 800f182:	4606      	mov	r6, r0
 800f184:	2800      	cmp	r0, #0
 800f186:	d1e1      	bne.n	800f14c <__ssputs_r+0x70>
 800f188:	6921      	ldr	r1, [r4, #16]
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7ff fed6 	bl	800ef3c <_free_r>
 800f190:	e7c7      	b.n	800f122 <__ssputs_r+0x46>
	...

0800f194 <_svfiprintf_r>:
 800f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f198:	4698      	mov	r8, r3
 800f19a:	898b      	ldrh	r3, [r1, #12]
 800f19c:	061b      	lsls	r3, r3, #24
 800f19e:	b09d      	sub	sp, #116	; 0x74
 800f1a0:	4607      	mov	r7, r0
 800f1a2:	460d      	mov	r5, r1
 800f1a4:	4614      	mov	r4, r2
 800f1a6:	d50e      	bpl.n	800f1c6 <_svfiprintf_r+0x32>
 800f1a8:	690b      	ldr	r3, [r1, #16]
 800f1aa:	b963      	cbnz	r3, 800f1c6 <_svfiprintf_r+0x32>
 800f1ac:	2140      	movs	r1, #64	; 0x40
 800f1ae:	f7ff ff15 	bl	800efdc <_malloc_r>
 800f1b2:	6028      	str	r0, [r5, #0]
 800f1b4:	6128      	str	r0, [r5, #16]
 800f1b6:	b920      	cbnz	r0, 800f1c2 <_svfiprintf_r+0x2e>
 800f1b8:	230c      	movs	r3, #12
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1c0:	e0d1      	b.n	800f366 <_svfiprintf_r+0x1d2>
 800f1c2:	2340      	movs	r3, #64	; 0x40
 800f1c4:	616b      	str	r3, [r5, #20]
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ca:	2320      	movs	r3, #32
 800f1cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1d4:	2330      	movs	r3, #48	; 0x30
 800f1d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f380 <_svfiprintf_r+0x1ec>
 800f1da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1de:	f04f 0901 	mov.w	r9, #1
 800f1e2:	4623      	mov	r3, r4
 800f1e4:	469a      	mov	sl, r3
 800f1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1ea:	b10a      	cbz	r2, 800f1f0 <_svfiprintf_r+0x5c>
 800f1ec:	2a25      	cmp	r2, #37	; 0x25
 800f1ee:	d1f9      	bne.n	800f1e4 <_svfiprintf_r+0x50>
 800f1f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f1f4:	d00b      	beq.n	800f20e <_svfiprintf_r+0x7a>
 800f1f6:	465b      	mov	r3, fp
 800f1f8:	4622      	mov	r2, r4
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	4638      	mov	r0, r7
 800f1fe:	f7ff ff6d 	bl	800f0dc <__ssputs_r>
 800f202:	3001      	adds	r0, #1
 800f204:	f000 80aa 	beq.w	800f35c <_svfiprintf_r+0x1c8>
 800f208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f20a:	445a      	add	r2, fp
 800f20c:	9209      	str	r2, [sp, #36]	; 0x24
 800f20e:	f89a 3000 	ldrb.w	r3, [sl]
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 80a2 	beq.w	800f35c <_svfiprintf_r+0x1c8>
 800f218:	2300      	movs	r3, #0
 800f21a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f21e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f222:	f10a 0a01 	add.w	sl, sl, #1
 800f226:	9304      	str	r3, [sp, #16]
 800f228:	9307      	str	r3, [sp, #28]
 800f22a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f22e:	931a      	str	r3, [sp, #104]	; 0x68
 800f230:	4654      	mov	r4, sl
 800f232:	2205      	movs	r2, #5
 800f234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f238:	4851      	ldr	r0, [pc, #324]	; (800f380 <_svfiprintf_r+0x1ec>)
 800f23a:	f7f0 ffd1 	bl	80001e0 <memchr>
 800f23e:	9a04      	ldr	r2, [sp, #16]
 800f240:	b9d8      	cbnz	r0, 800f27a <_svfiprintf_r+0xe6>
 800f242:	06d0      	lsls	r0, r2, #27
 800f244:	bf44      	itt	mi
 800f246:	2320      	movmi	r3, #32
 800f248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24c:	0711      	lsls	r1, r2, #28
 800f24e:	bf44      	itt	mi
 800f250:	232b      	movmi	r3, #43	; 0x2b
 800f252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f256:	f89a 3000 	ldrb.w	r3, [sl]
 800f25a:	2b2a      	cmp	r3, #42	; 0x2a
 800f25c:	d015      	beq.n	800f28a <_svfiprintf_r+0xf6>
 800f25e:	9a07      	ldr	r2, [sp, #28]
 800f260:	4654      	mov	r4, sl
 800f262:	2000      	movs	r0, #0
 800f264:	f04f 0c0a 	mov.w	ip, #10
 800f268:	4621      	mov	r1, r4
 800f26a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f26e:	3b30      	subs	r3, #48	; 0x30
 800f270:	2b09      	cmp	r3, #9
 800f272:	d94e      	bls.n	800f312 <_svfiprintf_r+0x17e>
 800f274:	b1b0      	cbz	r0, 800f2a4 <_svfiprintf_r+0x110>
 800f276:	9207      	str	r2, [sp, #28]
 800f278:	e014      	b.n	800f2a4 <_svfiprintf_r+0x110>
 800f27a:	eba0 0308 	sub.w	r3, r0, r8
 800f27e:	fa09 f303 	lsl.w	r3, r9, r3
 800f282:	4313      	orrs	r3, r2
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	46a2      	mov	sl, r4
 800f288:	e7d2      	b.n	800f230 <_svfiprintf_r+0x9c>
 800f28a:	9b03      	ldr	r3, [sp, #12]
 800f28c:	1d19      	adds	r1, r3, #4
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	9103      	str	r1, [sp, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	bfbb      	ittet	lt
 800f296:	425b      	neglt	r3, r3
 800f298:	f042 0202 	orrlt.w	r2, r2, #2
 800f29c:	9307      	strge	r3, [sp, #28]
 800f29e:	9307      	strlt	r3, [sp, #28]
 800f2a0:	bfb8      	it	lt
 800f2a2:	9204      	strlt	r2, [sp, #16]
 800f2a4:	7823      	ldrb	r3, [r4, #0]
 800f2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a8:	d10c      	bne.n	800f2c4 <_svfiprintf_r+0x130>
 800f2aa:	7863      	ldrb	r3, [r4, #1]
 800f2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ae:	d135      	bne.n	800f31c <_svfiprintf_r+0x188>
 800f2b0:	9b03      	ldr	r3, [sp, #12]
 800f2b2:	1d1a      	adds	r2, r3, #4
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	9203      	str	r2, [sp, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bfb8      	it	lt
 800f2bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f2c0:	3402      	adds	r4, #2
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f390 <_svfiprintf_r+0x1fc>
 800f2c8:	7821      	ldrb	r1, [r4, #0]
 800f2ca:	2203      	movs	r2, #3
 800f2cc:	4650      	mov	r0, sl
 800f2ce:	f7f0 ff87 	bl	80001e0 <memchr>
 800f2d2:	b140      	cbz	r0, 800f2e6 <_svfiprintf_r+0x152>
 800f2d4:	2340      	movs	r3, #64	; 0x40
 800f2d6:	eba0 000a 	sub.w	r0, r0, sl
 800f2da:	fa03 f000 	lsl.w	r0, r3, r0
 800f2de:	9b04      	ldr	r3, [sp, #16]
 800f2e0:	4303      	orrs	r3, r0
 800f2e2:	3401      	adds	r4, #1
 800f2e4:	9304      	str	r3, [sp, #16]
 800f2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ea:	4826      	ldr	r0, [pc, #152]	; (800f384 <_svfiprintf_r+0x1f0>)
 800f2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2f0:	2206      	movs	r2, #6
 800f2f2:	f7f0 ff75 	bl	80001e0 <memchr>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d038      	beq.n	800f36c <_svfiprintf_r+0x1d8>
 800f2fa:	4b23      	ldr	r3, [pc, #140]	; (800f388 <_svfiprintf_r+0x1f4>)
 800f2fc:	bb1b      	cbnz	r3, 800f346 <_svfiprintf_r+0x1b2>
 800f2fe:	9b03      	ldr	r3, [sp, #12]
 800f300:	3307      	adds	r3, #7
 800f302:	f023 0307 	bic.w	r3, r3, #7
 800f306:	3308      	adds	r3, #8
 800f308:	9303      	str	r3, [sp, #12]
 800f30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30c:	4433      	add	r3, r6
 800f30e:	9309      	str	r3, [sp, #36]	; 0x24
 800f310:	e767      	b.n	800f1e2 <_svfiprintf_r+0x4e>
 800f312:	fb0c 3202 	mla	r2, ip, r2, r3
 800f316:	460c      	mov	r4, r1
 800f318:	2001      	movs	r0, #1
 800f31a:	e7a5      	b.n	800f268 <_svfiprintf_r+0xd4>
 800f31c:	2300      	movs	r3, #0
 800f31e:	3401      	adds	r4, #1
 800f320:	9305      	str	r3, [sp, #20]
 800f322:	4619      	mov	r1, r3
 800f324:	f04f 0c0a 	mov.w	ip, #10
 800f328:	4620      	mov	r0, r4
 800f32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f32e:	3a30      	subs	r2, #48	; 0x30
 800f330:	2a09      	cmp	r2, #9
 800f332:	d903      	bls.n	800f33c <_svfiprintf_r+0x1a8>
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0c5      	beq.n	800f2c4 <_svfiprintf_r+0x130>
 800f338:	9105      	str	r1, [sp, #20]
 800f33a:	e7c3      	b.n	800f2c4 <_svfiprintf_r+0x130>
 800f33c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f340:	4604      	mov	r4, r0
 800f342:	2301      	movs	r3, #1
 800f344:	e7f0      	b.n	800f328 <_svfiprintf_r+0x194>
 800f346:	ab03      	add	r3, sp, #12
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	462a      	mov	r2, r5
 800f34c:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <_svfiprintf_r+0x1f8>)
 800f34e:	a904      	add	r1, sp, #16
 800f350:	4638      	mov	r0, r7
 800f352:	f7fc f98d 	bl	800b670 <_printf_float>
 800f356:	1c42      	adds	r2, r0, #1
 800f358:	4606      	mov	r6, r0
 800f35a:	d1d6      	bne.n	800f30a <_svfiprintf_r+0x176>
 800f35c:	89ab      	ldrh	r3, [r5, #12]
 800f35e:	065b      	lsls	r3, r3, #25
 800f360:	f53f af2c 	bmi.w	800f1bc <_svfiprintf_r+0x28>
 800f364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f366:	b01d      	add	sp, #116	; 0x74
 800f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36c:	ab03      	add	r3, sp, #12
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	462a      	mov	r2, r5
 800f372:	4b06      	ldr	r3, [pc, #24]	; (800f38c <_svfiprintf_r+0x1f8>)
 800f374:	a904      	add	r1, sp, #16
 800f376:	4638      	mov	r0, r7
 800f378:	f7fc fc1e 	bl	800bbb8 <_printf_i>
 800f37c:	e7eb      	b.n	800f356 <_svfiprintf_r+0x1c2>
 800f37e:	bf00      	nop
 800f380:	0801070c 	.word	0x0801070c
 800f384:	08010716 	.word	0x08010716
 800f388:	0800b671 	.word	0x0800b671
 800f38c:	0800f0dd 	.word	0x0800f0dd
 800f390:	08010712 	.word	0x08010712

0800f394 <__sfputc_r>:
 800f394:	6893      	ldr	r3, [r2, #8]
 800f396:	3b01      	subs	r3, #1
 800f398:	2b00      	cmp	r3, #0
 800f39a:	b410      	push	{r4}
 800f39c:	6093      	str	r3, [r2, #8]
 800f39e:	da08      	bge.n	800f3b2 <__sfputc_r+0x1e>
 800f3a0:	6994      	ldr	r4, [r2, #24]
 800f3a2:	42a3      	cmp	r3, r4
 800f3a4:	db01      	blt.n	800f3aa <__sfputc_r+0x16>
 800f3a6:	290a      	cmp	r1, #10
 800f3a8:	d103      	bne.n	800f3b2 <__sfputc_r+0x1e>
 800f3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ae:	f000 b975 	b.w	800f69c <__swbuf_r>
 800f3b2:	6813      	ldr	r3, [r2, #0]
 800f3b4:	1c58      	adds	r0, r3, #1
 800f3b6:	6010      	str	r0, [r2, #0]
 800f3b8:	7019      	strb	r1, [r3, #0]
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <__sfputs_r>:
 800f3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	460f      	mov	r7, r1
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	18d5      	adds	r5, r2, r3
 800f3cc:	42ac      	cmp	r4, r5
 800f3ce:	d101      	bne.n	800f3d4 <__sfputs_r+0x12>
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e007      	b.n	800f3e4 <__sfputs_r+0x22>
 800f3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d8:	463a      	mov	r2, r7
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f7ff ffda 	bl	800f394 <__sfputc_r>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d1f3      	bne.n	800f3cc <__sfputs_r+0xa>
 800f3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3e8 <_vfiprintf_r>:
 800f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ec:	460d      	mov	r5, r1
 800f3ee:	b09d      	sub	sp, #116	; 0x74
 800f3f0:	4614      	mov	r4, r2
 800f3f2:	4698      	mov	r8, r3
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	b118      	cbz	r0, 800f400 <_vfiprintf_r+0x18>
 800f3f8:	6983      	ldr	r3, [r0, #24]
 800f3fa:	b90b      	cbnz	r3, 800f400 <_vfiprintf_r+0x18>
 800f3fc:	f000 fb36 	bl	800fa6c <__sinit>
 800f400:	4b89      	ldr	r3, [pc, #548]	; (800f628 <_vfiprintf_r+0x240>)
 800f402:	429d      	cmp	r5, r3
 800f404:	d11b      	bne.n	800f43e <_vfiprintf_r+0x56>
 800f406:	6875      	ldr	r5, [r6, #4]
 800f408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f40a:	07d9      	lsls	r1, r3, #31
 800f40c:	d405      	bmi.n	800f41a <_vfiprintf_r+0x32>
 800f40e:	89ab      	ldrh	r3, [r5, #12]
 800f410:	059a      	lsls	r2, r3, #22
 800f412:	d402      	bmi.n	800f41a <_vfiprintf_r+0x32>
 800f414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f416:	f000 fbc7 	bl	800fba8 <__retarget_lock_acquire_recursive>
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	071b      	lsls	r3, r3, #28
 800f41e:	d501      	bpl.n	800f424 <_vfiprintf_r+0x3c>
 800f420:	692b      	ldr	r3, [r5, #16]
 800f422:	b9eb      	cbnz	r3, 800f460 <_vfiprintf_r+0x78>
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f000 f998 	bl	800f75c <__swsetup_r>
 800f42c:	b1c0      	cbz	r0, 800f460 <_vfiprintf_r+0x78>
 800f42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f430:	07dc      	lsls	r4, r3, #31
 800f432:	d50e      	bpl.n	800f452 <_vfiprintf_r+0x6a>
 800f434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f438:	b01d      	add	sp, #116	; 0x74
 800f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43e:	4b7b      	ldr	r3, [pc, #492]	; (800f62c <_vfiprintf_r+0x244>)
 800f440:	429d      	cmp	r5, r3
 800f442:	d101      	bne.n	800f448 <_vfiprintf_r+0x60>
 800f444:	68b5      	ldr	r5, [r6, #8]
 800f446:	e7df      	b.n	800f408 <_vfiprintf_r+0x20>
 800f448:	4b79      	ldr	r3, [pc, #484]	; (800f630 <_vfiprintf_r+0x248>)
 800f44a:	429d      	cmp	r5, r3
 800f44c:	bf08      	it	eq
 800f44e:	68f5      	ldreq	r5, [r6, #12]
 800f450:	e7da      	b.n	800f408 <_vfiprintf_r+0x20>
 800f452:	89ab      	ldrh	r3, [r5, #12]
 800f454:	0598      	lsls	r0, r3, #22
 800f456:	d4ed      	bmi.n	800f434 <_vfiprintf_r+0x4c>
 800f458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f45a:	f000 fba6 	bl	800fbaa <__retarget_lock_release_recursive>
 800f45e:	e7e9      	b.n	800f434 <_vfiprintf_r+0x4c>
 800f460:	2300      	movs	r3, #0
 800f462:	9309      	str	r3, [sp, #36]	; 0x24
 800f464:	2320      	movs	r3, #32
 800f466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f46a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f46e:	2330      	movs	r3, #48	; 0x30
 800f470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f634 <_vfiprintf_r+0x24c>
 800f474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f478:	f04f 0901 	mov.w	r9, #1
 800f47c:	4623      	mov	r3, r4
 800f47e:	469a      	mov	sl, r3
 800f480:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f484:	b10a      	cbz	r2, 800f48a <_vfiprintf_r+0xa2>
 800f486:	2a25      	cmp	r2, #37	; 0x25
 800f488:	d1f9      	bne.n	800f47e <_vfiprintf_r+0x96>
 800f48a:	ebba 0b04 	subs.w	fp, sl, r4
 800f48e:	d00b      	beq.n	800f4a8 <_vfiprintf_r+0xc0>
 800f490:	465b      	mov	r3, fp
 800f492:	4622      	mov	r2, r4
 800f494:	4629      	mov	r1, r5
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff ff93 	bl	800f3c2 <__sfputs_r>
 800f49c:	3001      	adds	r0, #1
 800f49e:	f000 80aa 	beq.w	800f5f6 <_vfiprintf_r+0x20e>
 800f4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4a4:	445a      	add	r2, fp
 800f4a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f000 80a2 	beq.w	800f5f6 <_vfiprintf_r+0x20e>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4bc:	f10a 0a01 	add.w	sl, sl, #1
 800f4c0:	9304      	str	r3, [sp, #16]
 800f4c2:	9307      	str	r3, [sp, #28]
 800f4c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4c8:	931a      	str	r3, [sp, #104]	; 0x68
 800f4ca:	4654      	mov	r4, sl
 800f4cc:	2205      	movs	r2, #5
 800f4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d2:	4858      	ldr	r0, [pc, #352]	; (800f634 <_vfiprintf_r+0x24c>)
 800f4d4:	f7f0 fe84 	bl	80001e0 <memchr>
 800f4d8:	9a04      	ldr	r2, [sp, #16]
 800f4da:	b9d8      	cbnz	r0, 800f514 <_vfiprintf_r+0x12c>
 800f4dc:	06d1      	lsls	r1, r2, #27
 800f4de:	bf44      	itt	mi
 800f4e0:	2320      	movmi	r3, #32
 800f4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4e6:	0713      	lsls	r3, r2, #28
 800f4e8:	bf44      	itt	mi
 800f4ea:	232b      	movmi	r3, #43	; 0x2b
 800f4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4f6:	d015      	beq.n	800f524 <_vfiprintf_r+0x13c>
 800f4f8:	9a07      	ldr	r2, [sp, #28]
 800f4fa:	4654      	mov	r4, sl
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	f04f 0c0a 	mov.w	ip, #10
 800f502:	4621      	mov	r1, r4
 800f504:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f508:	3b30      	subs	r3, #48	; 0x30
 800f50a:	2b09      	cmp	r3, #9
 800f50c:	d94e      	bls.n	800f5ac <_vfiprintf_r+0x1c4>
 800f50e:	b1b0      	cbz	r0, 800f53e <_vfiprintf_r+0x156>
 800f510:	9207      	str	r2, [sp, #28]
 800f512:	e014      	b.n	800f53e <_vfiprintf_r+0x156>
 800f514:	eba0 0308 	sub.w	r3, r0, r8
 800f518:	fa09 f303 	lsl.w	r3, r9, r3
 800f51c:	4313      	orrs	r3, r2
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	46a2      	mov	sl, r4
 800f522:	e7d2      	b.n	800f4ca <_vfiprintf_r+0xe2>
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	1d19      	adds	r1, r3, #4
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	9103      	str	r1, [sp, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	bfbb      	ittet	lt
 800f530:	425b      	neglt	r3, r3
 800f532:	f042 0202 	orrlt.w	r2, r2, #2
 800f536:	9307      	strge	r3, [sp, #28]
 800f538:	9307      	strlt	r3, [sp, #28]
 800f53a:	bfb8      	it	lt
 800f53c:	9204      	strlt	r2, [sp, #16]
 800f53e:	7823      	ldrb	r3, [r4, #0]
 800f540:	2b2e      	cmp	r3, #46	; 0x2e
 800f542:	d10c      	bne.n	800f55e <_vfiprintf_r+0x176>
 800f544:	7863      	ldrb	r3, [r4, #1]
 800f546:	2b2a      	cmp	r3, #42	; 0x2a
 800f548:	d135      	bne.n	800f5b6 <_vfiprintf_r+0x1ce>
 800f54a:	9b03      	ldr	r3, [sp, #12]
 800f54c:	1d1a      	adds	r2, r3, #4
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	9203      	str	r2, [sp, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	bfb8      	it	lt
 800f556:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f55a:	3402      	adds	r4, #2
 800f55c:	9305      	str	r3, [sp, #20]
 800f55e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f644 <_vfiprintf_r+0x25c>
 800f562:	7821      	ldrb	r1, [r4, #0]
 800f564:	2203      	movs	r2, #3
 800f566:	4650      	mov	r0, sl
 800f568:	f7f0 fe3a 	bl	80001e0 <memchr>
 800f56c:	b140      	cbz	r0, 800f580 <_vfiprintf_r+0x198>
 800f56e:	2340      	movs	r3, #64	; 0x40
 800f570:	eba0 000a 	sub.w	r0, r0, sl
 800f574:	fa03 f000 	lsl.w	r0, r3, r0
 800f578:	9b04      	ldr	r3, [sp, #16]
 800f57a:	4303      	orrs	r3, r0
 800f57c:	3401      	adds	r4, #1
 800f57e:	9304      	str	r3, [sp, #16]
 800f580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f584:	482c      	ldr	r0, [pc, #176]	; (800f638 <_vfiprintf_r+0x250>)
 800f586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f58a:	2206      	movs	r2, #6
 800f58c:	f7f0 fe28 	bl	80001e0 <memchr>
 800f590:	2800      	cmp	r0, #0
 800f592:	d03f      	beq.n	800f614 <_vfiprintf_r+0x22c>
 800f594:	4b29      	ldr	r3, [pc, #164]	; (800f63c <_vfiprintf_r+0x254>)
 800f596:	bb1b      	cbnz	r3, 800f5e0 <_vfiprintf_r+0x1f8>
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	3307      	adds	r3, #7
 800f59c:	f023 0307 	bic.w	r3, r3, #7
 800f5a0:	3308      	adds	r3, #8
 800f5a2:	9303      	str	r3, [sp, #12]
 800f5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a6:	443b      	add	r3, r7
 800f5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5aa:	e767      	b.n	800f47c <_vfiprintf_r+0x94>
 800f5ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5b0:	460c      	mov	r4, r1
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	e7a5      	b.n	800f502 <_vfiprintf_r+0x11a>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	3401      	adds	r4, #1
 800f5ba:	9305      	str	r3, [sp, #20]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	f04f 0c0a 	mov.w	ip, #10
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c8:	3a30      	subs	r2, #48	; 0x30
 800f5ca:	2a09      	cmp	r2, #9
 800f5cc:	d903      	bls.n	800f5d6 <_vfiprintf_r+0x1ee>
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d0c5      	beq.n	800f55e <_vfiprintf_r+0x176>
 800f5d2:	9105      	str	r1, [sp, #20]
 800f5d4:	e7c3      	b.n	800f55e <_vfiprintf_r+0x176>
 800f5d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5da:	4604      	mov	r4, r0
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e7f0      	b.n	800f5c2 <_vfiprintf_r+0x1da>
 800f5e0:	ab03      	add	r3, sp, #12
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	4b16      	ldr	r3, [pc, #88]	; (800f640 <_vfiprintf_r+0x258>)
 800f5e8:	a904      	add	r1, sp, #16
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7fc f840 	bl	800b670 <_printf_float>
 800f5f0:	4607      	mov	r7, r0
 800f5f2:	1c78      	adds	r0, r7, #1
 800f5f4:	d1d6      	bne.n	800f5a4 <_vfiprintf_r+0x1bc>
 800f5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5f8:	07d9      	lsls	r1, r3, #31
 800f5fa:	d405      	bmi.n	800f608 <_vfiprintf_r+0x220>
 800f5fc:	89ab      	ldrh	r3, [r5, #12]
 800f5fe:	059a      	lsls	r2, r3, #22
 800f600:	d402      	bmi.n	800f608 <_vfiprintf_r+0x220>
 800f602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f604:	f000 fad1 	bl	800fbaa <__retarget_lock_release_recursive>
 800f608:	89ab      	ldrh	r3, [r5, #12]
 800f60a:	065b      	lsls	r3, r3, #25
 800f60c:	f53f af12 	bmi.w	800f434 <_vfiprintf_r+0x4c>
 800f610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f612:	e711      	b.n	800f438 <_vfiprintf_r+0x50>
 800f614:	ab03      	add	r3, sp, #12
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	462a      	mov	r2, r5
 800f61a:	4b09      	ldr	r3, [pc, #36]	; (800f640 <_vfiprintf_r+0x258>)
 800f61c:	a904      	add	r1, sp, #16
 800f61e:	4630      	mov	r0, r6
 800f620:	f7fc faca 	bl	800bbb8 <_printf_i>
 800f624:	e7e4      	b.n	800f5f0 <_vfiprintf_r+0x208>
 800f626:	bf00      	nop
 800f628:	08010740 	.word	0x08010740
 800f62c:	08010760 	.word	0x08010760
 800f630:	08010720 	.word	0x08010720
 800f634:	0801070c 	.word	0x0801070c
 800f638:	08010716 	.word	0x08010716
 800f63c:	0800b671 	.word	0x0800b671
 800f640:	0800f3c3 	.word	0x0800f3c3
 800f644:	08010712 	.word	0x08010712

0800f648 <nan>:
 800f648:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f650 <nan+0x8>
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	00000000 	.word	0x00000000
 800f654:	7ff80000 	.word	0x7ff80000

0800f658 <_sbrk_r>:
 800f658:	b538      	push	{r3, r4, r5, lr}
 800f65a:	4d06      	ldr	r5, [pc, #24]	; (800f674 <_sbrk_r+0x1c>)
 800f65c:	2300      	movs	r3, #0
 800f65e:	4604      	mov	r4, r0
 800f660:	4608      	mov	r0, r1
 800f662:	602b      	str	r3, [r5, #0]
 800f664:	f7f8 f846 	bl	80076f4 <_sbrk>
 800f668:	1c43      	adds	r3, r0, #1
 800f66a:	d102      	bne.n	800f672 <_sbrk_r+0x1a>
 800f66c:	682b      	ldr	r3, [r5, #0]
 800f66e:	b103      	cbz	r3, 800f672 <_sbrk_r+0x1a>
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	bd38      	pop	{r3, r4, r5, pc}
 800f674:	200011b0 	.word	0x200011b0

0800f678 <strncmp>:
 800f678:	b510      	push	{r4, lr}
 800f67a:	b16a      	cbz	r2, 800f698 <strncmp+0x20>
 800f67c:	3901      	subs	r1, #1
 800f67e:	1884      	adds	r4, r0, r2
 800f680:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f684:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f688:	4293      	cmp	r3, r2
 800f68a:	d103      	bne.n	800f694 <strncmp+0x1c>
 800f68c:	42a0      	cmp	r0, r4
 800f68e:	d001      	beq.n	800f694 <strncmp+0x1c>
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1f5      	bne.n	800f680 <strncmp+0x8>
 800f694:	1a98      	subs	r0, r3, r2
 800f696:	bd10      	pop	{r4, pc}
 800f698:	4610      	mov	r0, r2
 800f69a:	e7fc      	b.n	800f696 <strncmp+0x1e>

0800f69c <__swbuf_r>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	460e      	mov	r6, r1
 800f6a0:	4614      	mov	r4, r2
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	b118      	cbz	r0, 800f6ae <__swbuf_r+0x12>
 800f6a6:	6983      	ldr	r3, [r0, #24]
 800f6a8:	b90b      	cbnz	r3, 800f6ae <__swbuf_r+0x12>
 800f6aa:	f000 f9df 	bl	800fa6c <__sinit>
 800f6ae:	4b21      	ldr	r3, [pc, #132]	; (800f734 <__swbuf_r+0x98>)
 800f6b0:	429c      	cmp	r4, r3
 800f6b2:	d12b      	bne.n	800f70c <__swbuf_r+0x70>
 800f6b4:	686c      	ldr	r4, [r5, #4]
 800f6b6:	69a3      	ldr	r3, [r4, #24]
 800f6b8:	60a3      	str	r3, [r4, #8]
 800f6ba:	89a3      	ldrh	r3, [r4, #12]
 800f6bc:	071a      	lsls	r2, r3, #28
 800f6be:	d52f      	bpl.n	800f720 <__swbuf_r+0x84>
 800f6c0:	6923      	ldr	r3, [r4, #16]
 800f6c2:	b36b      	cbz	r3, 800f720 <__swbuf_r+0x84>
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	6820      	ldr	r0, [r4, #0]
 800f6c8:	1ac0      	subs	r0, r0, r3
 800f6ca:	6963      	ldr	r3, [r4, #20]
 800f6cc:	b2f6      	uxtb	r6, r6
 800f6ce:	4283      	cmp	r3, r0
 800f6d0:	4637      	mov	r7, r6
 800f6d2:	dc04      	bgt.n	800f6de <__swbuf_r+0x42>
 800f6d4:	4621      	mov	r1, r4
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f000 f934 	bl	800f944 <_fflush_r>
 800f6dc:	bb30      	cbnz	r0, 800f72c <__swbuf_r+0x90>
 800f6de:	68a3      	ldr	r3, [r4, #8]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	60a3      	str	r3, [r4, #8]
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	1c5a      	adds	r2, r3, #1
 800f6e8:	6022      	str	r2, [r4, #0]
 800f6ea:	701e      	strb	r6, [r3, #0]
 800f6ec:	6963      	ldr	r3, [r4, #20]
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	4283      	cmp	r3, r0
 800f6f2:	d004      	beq.n	800f6fe <__swbuf_r+0x62>
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	07db      	lsls	r3, r3, #31
 800f6f8:	d506      	bpl.n	800f708 <__swbuf_r+0x6c>
 800f6fa:	2e0a      	cmp	r6, #10
 800f6fc:	d104      	bne.n	800f708 <__swbuf_r+0x6c>
 800f6fe:	4621      	mov	r1, r4
 800f700:	4628      	mov	r0, r5
 800f702:	f000 f91f 	bl	800f944 <_fflush_r>
 800f706:	b988      	cbnz	r0, 800f72c <__swbuf_r+0x90>
 800f708:	4638      	mov	r0, r7
 800f70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f70c:	4b0a      	ldr	r3, [pc, #40]	; (800f738 <__swbuf_r+0x9c>)
 800f70e:	429c      	cmp	r4, r3
 800f710:	d101      	bne.n	800f716 <__swbuf_r+0x7a>
 800f712:	68ac      	ldr	r4, [r5, #8]
 800f714:	e7cf      	b.n	800f6b6 <__swbuf_r+0x1a>
 800f716:	4b09      	ldr	r3, [pc, #36]	; (800f73c <__swbuf_r+0xa0>)
 800f718:	429c      	cmp	r4, r3
 800f71a:	bf08      	it	eq
 800f71c:	68ec      	ldreq	r4, [r5, #12]
 800f71e:	e7ca      	b.n	800f6b6 <__swbuf_r+0x1a>
 800f720:	4621      	mov	r1, r4
 800f722:	4628      	mov	r0, r5
 800f724:	f000 f81a 	bl	800f75c <__swsetup_r>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d0cb      	beq.n	800f6c4 <__swbuf_r+0x28>
 800f72c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f730:	e7ea      	b.n	800f708 <__swbuf_r+0x6c>
 800f732:	bf00      	nop
 800f734:	08010740 	.word	0x08010740
 800f738:	08010760 	.word	0x08010760
 800f73c:	08010720 	.word	0x08010720

0800f740 <__ascii_wctomb>:
 800f740:	b149      	cbz	r1, 800f756 <__ascii_wctomb+0x16>
 800f742:	2aff      	cmp	r2, #255	; 0xff
 800f744:	bf85      	ittet	hi
 800f746:	238a      	movhi	r3, #138	; 0x8a
 800f748:	6003      	strhi	r3, [r0, #0]
 800f74a:	700a      	strbls	r2, [r1, #0]
 800f74c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f750:	bf98      	it	ls
 800f752:	2001      	movls	r0, #1
 800f754:	4770      	bx	lr
 800f756:	4608      	mov	r0, r1
 800f758:	4770      	bx	lr
	...

0800f75c <__swsetup_r>:
 800f75c:	4b32      	ldr	r3, [pc, #200]	; (800f828 <__swsetup_r+0xcc>)
 800f75e:	b570      	push	{r4, r5, r6, lr}
 800f760:	681d      	ldr	r5, [r3, #0]
 800f762:	4606      	mov	r6, r0
 800f764:	460c      	mov	r4, r1
 800f766:	b125      	cbz	r5, 800f772 <__swsetup_r+0x16>
 800f768:	69ab      	ldr	r3, [r5, #24]
 800f76a:	b913      	cbnz	r3, 800f772 <__swsetup_r+0x16>
 800f76c:	4628      	mov	r0, r5
 800f76e:	f000 f97d 	bl	800fa6c <__sinit>
 800f772:	4b2e      	ldr	r3, [pc, #184]	; (800f82c <__swsetup_r+0xd0>)
 800f774:	429c      	cmp	r4, r3
 800f776:	d10f      	bne.n	800f798 <__swsetup_r+0x3c>
 800f778:	686c      	ldr	r4, [r5, #4]
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f780:	0719      	lsls	r1, r3, #28
 800f782:	d42c      	bmi.n	800f7de <__swsetup_r+0x82>
 800f784:	06dd      	lsls	r5, r3, #27
 800f786:	d411      	bmi.n	800f7ac <__swsetup_r+0x50>
 800f788:	2309      	movs	r3, #9
 800f78a:	6033      	str	r3, [r6, #0]
 800f78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f790:	81a3      	strh	r3, [r4, #12]
 800f792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f796:	e03e      	b.n	800f816 <__swsetup_r+0xba>
 800f798:	4b25      	ldr	r3, [pc, #148]	; (800f830 <__swsetup_r+0xd4>)
 800f79a:	429c      	cmp	r4, r3
 800f79c:	d101      	bne.n	800f7a2 <__swsetup_r+0x46>
 800f79e:	68ac      	ldr	r4, [r5, #8]
 800f7a0:	e7eb      	b.n	800f77a <__swsetup_r+0x1e>
 800f7a2:	4b24      	ldr	r3, [pc, #144]	; (800f834 <__swsetup_r+0xd8>)
 800f7a4:	429c      	cmp	r4, r3
 800f7a6:	bf08      	it	eq
 800f7a8:	68ec      	ldreq	r4, [r5, #12]
 800f7aa:	e7e6      	b.n	800f77a <__swsetup_r+0x1e>
 800f7ac:	0758      	lsls	r0, r3, #29
 800f7ae:	d512      	bpl.n	800f7d6 <__swsetup_r+0x7a>
 800f7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7b2:	b141      	cbz	r1, 800f7c6 <__swsetup_r+0x6a>
 800f7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7b8:	4299      	cmp	r1, r3
 800f7ba:	d002      	beq.n	800f7c2 <__swsetup_r+0x66>
 800f7bc:	4630      	mov	r0, r6
 800f7be:	f7ff fbbd 	bl	800ef3c <_free_r>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7cc:	81a3      	strh	r3, [r4, #12]
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	6063      	str	r3, [r4, #4]
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	f043 0308 	orr.w	r3, r3, #8
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	6923      	ldr	r3, [r4, #16]
 800f7e0:	b94b      	cbnz	r3, 800f7f6 <__swsetup_r+0x9a>
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7ec:	d003      	beq.n	800f7f6 <__swsetup_r+0x9a>
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f000 f9ff 	bl	800fbf4 <__smakebuf_r>
 800f7f6:	89a0      	ldrh	r0, [r4, #12]
 800f7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7fc:	f010 0301 	ands.w	r3, r0, #1
 800f800:	d00a      	beq.n	800f818 <__swsetup_r+0xbc>
 800f802:	2300      	movs	r3, #0
 800f804:	60a3      	str	r3, [r4, #8]
 800f806:	6963      	ldr	r3, [r4, #20]
 800f808:	425b      	negs	r3, r3
 800f80a:	61a3      	str	r3, [r4, #24]
 800f80c:	6923      	ldr	r3, [r4, #16]
 800f80e:	b943      	cbnz	r3, 800f822 <__swsetup_r+0xc6>
 800f810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f814:	d1ba      	bne.n	800f78c <__swsetup_r+0x30>
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	0781      	lsls	r1, r0, #30
 800f81a:	bf58      	it	pl
 800f81c:	6963      	ldrpl	r3, [r4, #20]
 800f81e:	60a3      	str	r3, [r4, #8]
 800f820:	e7f4      	b.n	800f80c <__swsetup_r+0xb0>
 800f822:	2000      	movs	r0, #0
 800f824:	e7f7      	b.n	800f816 <__swsetup_r+0xba>
 800f826:	bf00      	nop
 800f828:	20000060 	.word	0x20000060
 800f82c:	08010740 	.word	0x08010740
 800f830:	08010760 	.word	0x08010760
 800f834:	08010720 	.word	0x08010720

0800f838 <__sflush_r>:
 800f838:	898a      	ldrh	r2, [r1, #12]
 800f83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	4605      	mov	r5, r0
 800f840:	0710      	lsls	r0, r2, #28
 800f842:	460c      	mov	r4, r1
 800f844:	d458      	bmi.n	800f8f8 <__sflush_r+0xc0>
 800f846:	684b      	ldr	r3, [r1, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	dc05      	bgt.n	800f858 <__sflush_r+0x20>
 800f84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f84e:	2b00      	cmp	r3, #0
 800f850:	dc02      	bgt.n	800f858 <__sflush_r+0x20>
 800f852:	2000      	movs	r0, #0
 800f854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f85a:	2e00      	cmp	r6, #0
 800f85c:	d0f9      	beq.n	800f852 <__sflush_r+0x1a>
 800f85e:	2300      	movs	r3, #0
 800f860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f864:	682f      	ldr	r7, [r5, #0]
 800f866:	602b      	str	r3, [r5, #0]
 800f868:	d032      	beq.n	800f8d0 <__sflush_r+0x98>
 800f86a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f86c:	89a3      	ldrh	r3, [r4, #12]
 800f86e:	075a      	lsls	r2, r3, #29
 800f870:	d505      	bpl.n	800f87e <__sflush_r+0x46>
 800f872:	6863      	ldr	r3, [r4, #4]
 800f874:	1ac0      	subs	r0, r0, r3
 800f876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f878:	b10b      	cbz	r3, 800f87e <__sflush_r+0x46>
 800f87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f87c:	1ac0      	subs	r0, r0, r3
 800f87e:	2300      	movs	r3, #0
 800f880:	4602      	mov	r2, r0
 800f882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f884:	6a21      	ldr	r1, [r4, #32]
 800f886:	4628      	mov	r0, r5
 800f888:	47b0      	blx	r6
 800f88a:	1c43      	adds	r3, r0, #1
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	d106      	bne.n	800f89e <__sflush_r+0x66>
 800f890:	6829      	ldr	r1, [r5, #0]
 800f892:	291d      	cmp	r1, #29
 800f894:	d82c      	bhi.n	800f8f0 <__sflush_r+0xb8>
 800f896:	4a2a      	ldr	r2, [pc, #168]	; (800f940 <__sflush_r+0x108>)
 800f898:	40ca      	lsrs	r2, r1
 800f89a:	07d6      	lsls	r6, r2, #31
 800f89c:	d528      	bpl.n	800f8f0 <__sflush_r+0xb8>
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6062      	str	r2, [r4, #4]
 800f8a2:	04d9      	lsls	r1, r3, #19
 800f8a4:	6922      	ldr	r2, [r4, #16]
 800f8a6:	6022      	str	r2, [r4, #0]
 800f8a8:	d504      	bpl.n	800f8b4 <__sflush_r+0x7c>
 800f8aa:	1c42      	adds	r2, r0, #1
 800f8ac:	d101      	bne.n	800f8b2 <__sflush_r+0x7a>
 800f8ae:	682b      	ldr	r3, [r5, #0]
 800f8b0:	b903      	cbnz	r3, 800f8b4 <__sflush_r+0x7c>
 800f8b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8b6:	602f      	str	r7, [r5, #0]
 800f8b8:	2900      	cmp	r1, #0
 800f8ba:	d0ca      	beq.n	800f852 <__sflush_r+0x1a>
 800f8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d002      	beq.n	800f8ca <__sflush_r+0x92>
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7ff fb39 	bl	800ef3c <_free_r>
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f8ce:	e7c1      	b.n	800f854 <__sflush_r+0x1c>
 800f8d0:	6a21      	ldr	r1, [r4, #32]
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	47b0      	blx	r6
 800f8d8:	1c41      	adds	r1, r0, #1
 800f8da:	d1c7      	bne.n	800f86c <__sflush_r+0x34>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d0c4      	beq.n	800f86c <__sflush_r+0x34>
 800f8e2:	2b1d      	cmp	r3, #29
 800f8e4:	d001      	beq.n	800f8ea <__sflush_r+0xb2>
 800f8e6:	2b16      	cmp	r3, #22
 800f8e8:	d101      	bne.n	800f8ee <__sflush_r+0xb6>
 800f8ea:	602f      	str	r7, [r5, #0]
 800f8ec:	e7b1      	b.n	800f852 <__sflush_r+0x1a>
 800f8ee:	89a3      	ldrh	r3, [r4, #12]
 800f8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f4:	81a3      	strh	r3, [r4, #12]
 800f8f6:	e7ad      	b.n	800f854 <__sflush_r+0x1c>
 800f8f8:	690f      	ldr	r7, [r1, #16]
 800f8fa:	2f00      	cmp	r7, #0
 800f8fc:	d0a9      	beq.n	800f852 <__sflush_r+0x1a>
 800f8fe:	0793      	lsls	r3, r2, #30
 800f900:	680e      	ldr	r6, [r1, #0]
 800f902:	bf08      	it	eq
 800f904:	694b      	ldreq	r3, [r1, #20]
 800f906:	600f      	str	r7, [r1, #0]
 800f908:	bf18      	it	ne
 800f90a:	2300      	movne	r3, #0
 800f90c:	eba6 0807 	sub.w	r8, r6, r7
 800f910:	608b      	str	r3, [r1, #8]
 800f912:	f1b8 0f00 	cmp.w	r8, #0
 800f916:	dd9c      	ble.n	800f852 <__sflush_r+0x1a>
 800f918:	6a21      	ldr	r1, [r4, #32]
 800f91a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f91c:	4643      	mov	r3, r8
 800f91e:	463a      	mov	r2, r7
 800f920:	4628      	mov	r0, r5
 800f922:	47b0      	blx	r6
 800f924:	2800      	cmp	r0, #0
 800f926:	dc06      	bgt.n	800f936 <__sflush_r+0xfe>
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f92e:	81a3      	strh	r3, [r4, #12]
 800f930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f934:	e78e      	b.n	800f854 <__sflush_r+0x1c>
 800f936:	4407      	add	r7, r0
 800f938:	eba8 0800 	sub.w	r8, r8, r0
 800f93c:	e7e9      	b.n	800f912 <__sflush_r+0xda>
 800f93e:	bf00      	nop
 800f940:	20400001 	.word	0x20400001

0800f944 <_fflush_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	690b      	ldr	r3, [r1, #16]
 800f948:	4605      	mov	r5, r0
 800f94a:	460c      	mov	r4, r1
 800f94c:	b913      	cbnz	r3, 800f954 <_fflush_r+0x10>
 800f94e:	2500      	movs	r5, #0
 800f950:	4628      	mov	r0, r5
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	b118      	cbz	r0, 800f95e <_fflush_r+0x1a>
 800f956:	6983      	ldr	r3, [r0, #24]
 800f958:	b90b      	cbnz	r3, 800f95e <_fflush_r+0x1a>
 800f95a:	f000 f887 	bl	800fa6c <__sinit>
 800f95e:	4b14      	ldr	r3, [pc, #80]	; (800f9b0 <_fflush_r+0x6c>)
 800f960:	429c      	cmp	r4, r3
 800f962:	d11b      	bne.n	800f99c <_fflush_r+0x58>
 800f964:	686c      	ldr	r4, [r5, #4]
 800f966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0ef      	beq.n	800f94e <_fflush_r+0xa>
 800f96e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f970:	07d0      	lsls	r0, r2, #31
 800f972:	d404      	bmi.n	800f97e <_fflush_r+0x3a>
 800f974:	0599      	lsls	r1, r3, #22
 800f976:	d402      	bmi.n	800f97e <_fflush_r+0x3a>
 800f978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f97a:	f000 f915 	bl	800fba8 <__retarget_lock_acquire_recursive>
 800f97e:	4628      	mov	r0, r5
 800f980:	4621      	mov	r1, r4
 800f982:	f7ff ff59 	bl	800f838 <__sflush_r>
 800f986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f988:	07da      	lsls	r2, r3, #31
 800f98a:	4605      	mov	r5, r0
 800f98c:	d4e0      	bmi.n	800f950 <_fflush_r+0xc>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	059b      	lsls	r3, r3, #22
 800f992:	d4dd      	bmi.n	800f950 <_fflush_r+0xc>
 800f994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f996:	f000 f908 	bl	800fbaa <__retarget_lock_release_recursive>
 800f99a:	e7d9      	b.n	800f950 <_fflush_r+0xc>
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <_fflush_r+0x70>)
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d101      	bne.n	800f9a6 <_fflush_r+0x62>
 800f9a2:	68ac      	ldr	r4, [r5, #8]
 800f9a4:	e7df      	b.n	800f966 <_fflush_r+0x22>
 800f9a6:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <_fflush_r+0x74>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	bf08      	it	eq
 800f9ac:	68ec      	ldreq	r4, [r5, #12]
 800f9ae:	e7da      	b.n	800f966 <_fflush_r+0x22>
 800f9b0:	08010740 	.word	0x08010740
 800f9b4:	08010760 	.word	0x08010760
 800f9b8:	08010720 	.word	0x08010720

0800f9bc <std>:
 800f9bc:	2300      	movs	r3, #0
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9ca:	6083      	str	r3, [r0, #8]
 800f9cc:	8181      	strh	r1, [r0, #12]
 800f9ce:	6643      	str	r3, [r0, #100]	; 0x64
 800f9d0:	81c2      	strh	r2, [r0, #14]
 800f9d2:	6183      	str	r3, [r0, #24]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	2208      	movs	r2, #8
 800f9d8:	305c      	adds	r0, #92	; 0x5c
 800f9da:	f7fb fda1 	bl	800b520 <memset>
 800f9de:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <std+0x38>)
 800f9e0:	6263      	str	r3, [r4, #36]	; 0x24
 800f9e2:	4b05      	ldr	r3, [pc, #20]	; (800f9f8 <std+0x3c>)
 800f9e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9e6:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <std+0x40>)
 800f9e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <std+0x44>)
 800f9ec:	6224      	str	r4, [r4, #32]
 800f9ee:	6323      	str	r3, [r4, #48]	; 0x30
 800f9f0:	bd10      	pop	{r4, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0800fcd1 	.word	0x0800fcd1
 800f9f8:	0800fcf3 	.word	0x0800fcf3
 800f9fc:	0800fd2b 	.word	0x0800fd2b
 800fa00:	0800fd4f 	.word	0x0800fd4f

0800fa04 <_cleanup_r>:
 800fa04:	4901      	ldr	r1, [pc, #4]	; (800fa0c <_cleanup_r+0x8>)
 800fa06:	f000 b8af 	b.w	800fb68 <_fwalk_reent>
 800fa0a:	bf00      	nop
 800fa0c:	0800f945 	.word	0x0800f945

0800fa10 <__sfmoreglue>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	1e4a      	subs	r2, r1, #1
 800fa14:	2568      	movs	r5, #104	; 0x68
 800fa16:	4355      	muls	r5, r2
 800fa18:	460e      	mov	r6, r1
 800fa1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa1e:	f7ff fadd 	bl	800efdc <_malloc_r>
 800fa22:	4604      	mov	r4, r0
 800fa24:	b140      	cbz	r0, 800fa38 <__sfmoreglue+0x28>
 800fa26:	2100      	movs	r1, #0
 800fa28:	e9c0 1600 	strd	r1, r6, [r0]
 800fa2c:	300c      	adds	r0, #12
 800fa2e:	60a0      	str	r0, [r4, #8]
 800fa30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa34:	f7fb fd74 	bl	800b520 <memset>
 800fa38:	4620      	mov	r0, r4
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}

0800fa3c <__sfp_lock_acquire>:
 800fa3c:	4801      	ldr	r0, [pc, #4]	; (800fa44 <__sfp_lock_acquire+0x8>)
 800fa3e:	f000 b8b3 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 800fa42:	bf00      	nop
 800fa44:	200011bc 	.word	0x200011bc

0800fa48 <__sfp_lock_release>:
 800fa48:	4801      	ldr	r0, [pc, #4]	; (800fa50 <__sfp_lock_release+0x8>)
 800fa4a:	f000 b8ae 	b.w	800fbaa <__retarget_lock_release_recursive>
 800fa4e:	bf00      	nop
 800fa50:	200011bc 	.word	0x200011bc

0800fa54 <__sinit_lock_acquire>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__sinit_lock_acquire+0x8>)
 800fa56:	f000 b8a7 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	200011b7 	.word	0x200011b7

0800fa60 <__sinit_lock_release>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__sinit_lock_release+0x8>)
 800fa62:	f000 b8a2 	b.w	800fbaa <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	200011b7 	.word	0x200011b7

0800fa6c <__sinit>:
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	4604      	mov	r4, r0
 800fa70:	f7ff fff0 	bl	800fa54 <__sinit_lock_acquire>
 800fa74:	69a3      	ldr	r3, [r4, #24]
 800fa76:	b11b      	cbz	r3, 800fa80 <__sinit+0x14>
 800fa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa7c:	f7ff bff0 	b.w	800fa60 <__sinit_lock_release>
 800fa80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa84:	6523      	str	r3, [r4, #80]	; 0x50
 800fa86:	4b13      	ldr	r3, [pc, #76]	; (800fad4 <__sinit+0x68>)
 800fa88:	4a13      	ldr	r2, [pc, #76]	; (800fad8 <__sinit+0x6c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	bf04      	itt	eq
 800fa92:	2301      	moveq	r3, #1
 800fa94:	61a3      	streq	r3, [r4, #24]
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 f820 	bl	800fadc <__sfp>
 800fa9c:	6060      	str	r0, [r4, #4]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f81c 	bl	800fadc <__sfp>
 800faa4:	60a0      	str	r0, [r4, #8]
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 f818 	bl	800fadc <__sfp>
 800faac:	2200      	movs	r2, #0
 800faae:	60e0      	str	r0, [r4, #12]
 800fab0:	2104      	movs	r1, #4
 800fab2:	6860      	ldr	r0, [r4, #4]
 800fab4:	f7ff ff82 	bl	800f9bc <std>
 800fab8:	68a0      	ldr	r0, [r4, #8]
 800faba:	2201      	movs	r2, #1
 800fabc:	2109      	movs	r1, #9
 800fabe:	f7ff ff7d 	bl	800f9bc <std>
 800fac2:	68e0      	ldr	r0, [r4, #12]
 800fac4:	2202      	movs	r2, #2
 800fac6:	2112      	movs	r1, #18
 800fac8:	f7ff ff78 	bl	800f9bc <std>
 800facc:	2301      	movs	r3, #1
 800face:	61a3      	str	r3, [r4, #24]
 800fad0:	e7d2      	b.n	800fa78 <__sinit+0xc>
 800fad2:	bf00      	nop
 800fad4:	08010270 	.word	0x08010270
 800fad8:	0800fa05 	.word	0x0800fa05

0800fadc <__sfp>:
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	4607      	mov	r7, r0
 800fae0:	f7ff ffac 	bl	800fa3c <__sfp_lock_acquire>
 800fae4:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <__sfp+0x84>)
 800fae6:	681e      	ldr	r6, [r3, #0]
 800fae8:	69b3      	ldr	r3, [r6, #24]
 800faea:	b913      	cbnz	r3, 800faf2 <__sfp+0x16>
 800faec:	4630      	mov	r0, r6
 800faee:	f7ff ffbd 	bl	800fa6c <__sinit>
 800faf2:	3648      	adds	r6, #72	; 0x48
 800faf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800faf8:	3b01      	subs	r3, #1
 800fafa:	d503      	bpl.n	800fb04 <__sfp+0x28>
 800fafc:	6833      	ldr	r3, [r6, #0]
 800fafe:	b30b      	cbz	r3, 800fb44 <__sfp+0x68>
 800fb00:	6836      	ldr	r6, [r6, #0]
 800fb02:	e7f7      	b.n	800faf4 <__sfp+0x18>
 800fb04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb08:	b9d5      	cbnz	r5, 800fb40 <__sfp+0x64>
 800fb0a:	4b16      	ldr	r3, [pc, #88]	; (800fb64 <__sfp+0x88>)
 800fb0c:	60e3      	str	r3, [r4, #12]
 800fb0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb12:	6665      	str	r5, [r4, #100]	; 0x64
 800fb14:	f000 f847 	bl	800fba6 <__retarget_lock_init_recursive>
 800fb18:	f7ff ff96 	bl	800fa48 <__sfp_lock_release>
 800fb1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb24:	6025      	str	r5, [r4, #0]
 800fb26:	61a5      	str	r5, [r4, #24]
 800fb28:	2208      	movs	r2, #8
 800fb2a:	4629      	mov	r1, r5
 800fb2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb30:	f7fb fcf6 	bl	800b520 <memset>
 800fb34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb40:	3468      	adds	r4, #104	; 0x68
 800fb42:	e7d9      	b.n	800faf8 <__sfp+0x1c>
 800fb44:	2104      	movs	r1, #4
 800fb46:	4638      	mov	r0, r7
 800fb48:	f7ff ff62 	bl	800fa10 <__sfmoreglue>
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	6030      	str	r0, [r6, #0]
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d1d5      	bne.n	800fb00 <__sfp+0x24>
 800fb54:	f7ff ff78 	bl	800fa48 <__sfp_lock_release>
 800fb58:	230c      	movs	r3, #12
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	e7ee      	b.n	800fb3c <__sfp+0x60>
 800fb5e:	bf00      	nop
 800fb60:	08010270 	.word	0x08010270
 800fb64:	ffff0001 	.word	0xffff0001

0800fb68 <_fwalk_reent>:
 800fb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	4688      	mov	r8, r1
 800fb70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb74:	2700      	movs	r7, #0
 800fb76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb7a:	f1b9 0901 	subs.w	r9, r9, #1
 800fb7e:	d505      	bpl.n	800fb8c <_fwalk_reent+0x24>
 800fb80:	6824      	ldr	r4, [r4, #0]
 800fb82:	2c00      	cmp	r4, #0
 800fb84:	d1f7      	bne.n	800fb76 <_fwalk_reent+0xe>
 800fb86:	4638      	mov	r0, r7
 800fb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8c:	89ab      	ldrh	r3, [r5, #12]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d907      	bls.n	800fba2 <_fwalk_reent+0x3a>
 800fb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb96:	3301      	adds	r3, #1
 800fb98:	d003      	beq.n	800fba2 <_fwalk_reent+0x3a>
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	47c0      	blx	r8
 800fba0:	4307      	orrs	r7, r0
 800fba2:	3568      	adds	r5, #104	; 0x68
 800fba4:	e7e9      	b.n	800fb7a <_fwalk_reent+0x12>

0800fba6 <__retarget_lock_init_recursive>:
 800fba6:	4770      	bx	lr

0800fba8 <__retarget_lock_acquire_recursive>:
 800fba8:	4770      	bx	lr

0800fbaa <__retarget_lock_release_recursive>:
 800fbaa:	4770      	bx	lr

0800fbac <__swhatbuf_r>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	460e      	mov	r6, r1
 800fbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbb4:	2900      	cmp	r1, #0
 800fbb6:	b096      	sub	sp, #88	; 0x58
 800fbb8:	4614      	mov	r4, r2
 800fbba:	461d      	mov	r5, r3
 800fbbc:	da07      	bge.n	800fbce <__swhatbuf_r+0x22>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	602b      	str	r3, [r5, #0]
 800fbc2:	89b3      	ldrh	r3, [r6, #12]
 800fbc4:	061a      	lsls	r2, r3, #24
 800fbc6:	d410      	bmi.n	800fbea <__swhatbuf_r+0x3e>
 800fbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbcc:	e00e      	b.n	800fbec <__swhatbuf_r+0x40>
 800fbce:	466a      	mov	r2, sp
 800fbd0:	f000 f8e4 	bl	800fd9c <_fstat_r>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	dbf2      	blt.n	800fbbe <__swhatbuf_r+0x12>
 800fbd8:	9a01      	ldr	r2, [sp, #4]
 800fbda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbe2:	425a      	negs	r2, r3
 800fbe4:	415a      	adcs	r2, r3
 800fbe6:	602a      	str	r2, [r5, #0]
 800fbe8:	e7ee      	b.n	800fbc8 <__swhatbuf_r+0x1c>
 800fbea:	2340      	movs	r3, #64	; 0x40
 800fbec:	2000      	movs	r0, #0
 800fbee:	6023      	str	r3, [r4, #0]
 800fbf0:	b016      	add	sp, #88	; 0x58
 800fbf2:	bd70      	pop	{r4, r5, r6, pc}

0800fbf4 <__smakebuf_r>:
 800fbf4:	898b      	ldrh	r3, [r1, #12]
 800fbf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbf8:	079d      	lsls	r5, r3, #30
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	d507      	bpl.n	800fc10 <__smakebuf_r+0x1c>
 800fc00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	6123      	str	r3, [r4, #16]
 800fc08:	2301      	movs	r3, #1
 800fc0a:	6163      	str	r3, [r4, #20]
 800fc0c:	b002      	add	sp, #8
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}
 800fc10:	ab01      	add	r3, sp, #4
 800fc12:	466a      	mov	r2, sp
 800fc14:	f7ff ffca 	bl	800fbac <__swhatbuf_r>
 800fc18:	9900      	ldr	r1, [sp, #0]
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	f7ff f9dd 	bl	800efdc <_malloc_r>
 800fc22:	b948      	cbnz	r0, 800fc38 <__smakebuf_r+0x44>
 800fc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc28:	059a      	lsls	r2, r3, #22
 800fc2a:	d4ef      	bmi.n	800fc0c <__smakebuf_r+0x18>
 800fc2c:	f023 0303 	bic.w	r3, r3, #3
 800fc30:	f043 0302 	orr.w	r3, r3, #2
 800fc34:	81a3      	strh	r3, [r4, #12]
 800fc36:	e7e3      	b.n	800fc00 <__smakebuf_r+0xc>
 800fc38:	4b0d      	ldr	r3, [pc, #52]	; (800fc70 <__smakebuf_r+0x7c>)
 800fc3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	6020      	str	r0, [r4, #0]
 800fc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc44:	81a3      	strh	r3, [r4, #12]
 800fc46:	9b00      	ldr	r3, [sp, #0]
 800fc48:	6163      	str	r3, [r4, #20]
 800fc4a:	9b01      	ldr	r3, [sp, #4]
 800fc4c:	6120      	str	r0, [r4, #16]
 800fc4e:	b15b      	cbz	r3, 800fc68 <__smakebuf_r+0x74>
 800fc50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc54:	4630      	mov	r0, r6
 800fc56:	f000 f8b3 	bl	800fdc0 <_isatty_r>
 800fc5a:	b128      	cbz	r0, 800fc68 <__smakebuf_r+0x74>
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	f023 0303 	bic.w	r3, r3, #3
 800fc62:	f043 0301 	orr.w	r3, r3, #1
 800fc66:	81a3      	strh	r3, [r4, #12]
 800fc68:	89a0      	ldrh	r0, [r4, #12]
 800fc6a:	4305      	orrs	r5, r0
 800fc6c:	81a5      	strh	r5, [r4, #12]
 800fc6e:	e7cd      	b.n	800fc0c <__smakebuf_r+0x18>
 800fc70:	0800fa05 	.word	0x0800fa05

0800fc74 <memmove>:
 800fc74:	4288      	cmp	r0, r1
 800fc76:	b510      	push	{r4, lr}
 800fc78:	eb01 0402 	add.w	r4, r1, r2
 800fc7c:	d902      	bls.n	800fc84 <memmove+0x10>
 800fc7e:	4284      	cmp	r4, r0
 800fc80:	4623      	mov	r3, r4
 800fc82:	d807      	bhi.n	800fc94 <memmove+0x20>
 800fc84:	1e43      	subs	r3, r0, #1
 800fc86:	42a1      	cmp	r1, r4
 800fc88:	d008      	beq.n	800fc9c <memmove+0x28>
 800fc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc92:	e7f8      	b.n	800fc86 <memmove+0x12>
 800fc94:	4402      	add	r2, r0
 800fc96:	4601      	mov	r1, r0
 800fc98:	428a      	cmp	r2, r1
 800fc9a:	d100      	bne.n	800fc9e <memmove+0x2a>
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fca6:	e7f7      	b.n	800fc98 <memmove+0x24>

0800fca8 <__malloc_lock>:
 800fca8:	4801      	ldr	r0, [pc, #4]	; (800fcb0 <__malloc_lock+0x8>)
 800fcaa:	f7ff bf7d 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 800fcae:	bf00      	nop
 800fcb0:	200011b8 	.word	0x200011b8

0800fcb4 <__malloc_unlock>:
 800fcb4:	4801      	ldr	r0, [pc, #4]	; (800fcbc <__malloc_unlock+0x8>)
 800fcb6:	f7ff bf78 	b.w	800fbaa <__retarget_lock_release_recursive>
 800fcba:	bf00      	nop
 800fcbc:	200011b8 	.word	0x200011b8

0800fcc0 <_malloc_usable_size_r>:
 800fcc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcc4:	1f18      	subs	r0, r3, #4
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	bfbc      	itt	lt
 800fcca:	580b      	ldrlt	r3, [r1, r0]
 800fccc:	18c0      	addlt	r0, r0, r3
 800fcce:	4770      	bx	lr

0800fcd0 <__sread>:
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd8:	f000 f894 	bl	800fe04 <_read_r>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	bfab      	itete	ge
 800fce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fce2:	89a3      	ldrhlt	r3, [r4, #12]
 800fce4:	181b      	addge	r3, r3, r0
 800fce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcea:	bfac      	ite	ge
 800fcec:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcee:	81a3      	strhlt	r3, [r4, #12]
 800fcf0:	bd10      	pop	{r4, pc}

0800fcf2 <__swrite>:
 800fcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf6:	461f      	mov	r7, r3
 800fcf8:	898b      	ldrh	r3, [r1, #12]
 800fcfa:	05db      	lsls	r3, r3, #23
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	460c      	mov	r4, r1
 800fd00:	4616      	mov	r6, r2
 800fd02:	d505      	bpl.n	800fd10 <__swrite+0x1e>
 800fd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd08:	2302      	movs	r3, #2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f000 f868 	bl	800fde0 <_lseek_r>
 800fd10:	89a3      	ldrh	r3, [r4, #12]
 800fd12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd1a:	81a3      	strh	r3, [r4, #12]
 800fd1c:	4632      	mov	r2, r6
 800fd1e:	463b      	mov	r3, r7
 800fd20:	4628      	mov	r0, r5
 800fd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd26:	f000 b817 	b.w	800fd58 <_write_r>

0800fd2a <__sseek>:
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd32:	f000 f855 	bl	800fde0 <_lseek_r>
 800fd36:	1c43      	adds	r3, r0, #1
 800fd38:	89a3      	ldrh	r3, [r4, #12]
 800fd3a:	bf15      	itete	ne
 800fd3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd46:	81a3      	strheq	r3, [r4, #12]
 800fd48:	bf18      	it	ne
 800fd4a:	81a3      	strhne	r3, [r4, #12]
 800fd4c:	bd10      	pop	{r4, pc}

0800fd4e <__sclose>:
 800fd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd52:	f000 b813 	b.w	800fd7c <_close_r>
	...

0800fd58 <_write_r>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	4d07      	ldr	r5, [pc, #28]	; (800fd78 <_write_r+0x20>)
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	4608      	mov	r0, r1
 800fd60:	4611      	mov	r1, r2
 800fd62:	2200      	movs	r2, #0
 800fd64:	602a      	str	r2, [r5, #0]
 800fd66:	461a      	mov	r2, r3
 800fd68:	f7f7 fc73 	bl	8007652 <_write>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d102      	bne.n	800fd76 <_write_r+0x1e>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	b103      	cbz	r3, 800fd76 <_write_r+0x1e>
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	bd38      	pop	{r3, r4, r5, pc}
 800fd78:	200011b0 	.word	0x200011b0

0800fd7c <_close_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d06      	ldr	r5, [pc, #24]	; (800fd98 <_close_r+0x1c>)
 800fd80:	2300      	movs	r3, #0
 800fd82:	4604      	mov	r4, r0
 800fd84:	4608      	mov	r0, r1
 800fd86:	602b      	str	r3, [r5, #0]
 800fd88:	f7f7 fc7f 	bl	800768a <_close>
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	d102      	bne.n	800fd96 <_close_r+0x1a>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	b103      	cbz	r3, 800fd96 <_close_r+0x1a>
 800fd94:	6023      	str	r3, [r4, #0]
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
 800fd98:	200011b0 	.word	0x200011b0

0800fd9c <_fstat_r>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4d07      	ldr	r5, [pc, #28]	; (800fdbc <_fstat_r+0x20>)
 800fda0:	2300      	movs	r3, #0
 800fda2:	4604      	mov	r4, r0
 800fda4:	4608      	mov	r0, r1
 800fda6:	4611      	mov	r1, r2
 800fda8:	602b      	str	r3, [r5, #0]
 800fdaa:	f7f7 fc7a 	bl	80076a2 <_fstat>
 800fdae:	1c43      	adds	r3, r0, #1
 800fdb0:	d102      	bne.n	800fdb8 <_fstat_r+0x1c>
 800fdb2:	682b      	ldr	r3, [r5, #0]
 800fdb4:	b103      	cbz	r3, 800fdb8 <_fstat_r+0x1c>
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	bd38      	pop	{r3, r4, r5, pc}
 800fdba:	bf00      	nop
 800fdbc:	200011b0 	.word	0x200011b0

0800fdc0 <_isatty_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4d06      	ldr	r5, [pc, #24]	; (800fddc <_isatty_r+0x1c>)
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	602b      	str	r3, [r5, #0]
 800fdcc:	f7f7 fc79 	bl	80076c2 <_isatty>
 800fdd0:	1c43      	adds	r3, r0, #1
 800fdd2:	d102      	bne.n	800fdda <_isatty_r+0x1a>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	b103      	cbz	r3, 800fdda <_isatty_r+0x1a>
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	bd38      	pop	{r3, r4, r5, pc}
 800fddc:	200011b0 	.word	0x200011b0

0800fde0 <_lseek_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d07      	ldr	r5, [pc, #28]	; (800fe00 <_lseek_r+0x20>)
 800fde4:	4604      	mov	r4, r0
 800fde6:	4608      	mov	r0, r1
 800fde8:	4611      	mov	r1, r2
 800fdea:	2200      	movs	r2, #0
 800fdec:	602a      	str	r2, [r5, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	f7f7 fc72 	bl	80076d8 <_lseek>
 800fdf4:	1c43      	adds	r3, r0, #1
 800fdf6:	d102      	bne.n	800fdfe <_lseek_r+0x1e>
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	b103      	cbz	r3, 800fdfe <_lseek_r+0x1e>
 800fdfc:	6023      	str	r3, [r4, #0]
 800fdfe:	bd38      	pop	{r3, r4, r5, pc}
 800fe00:	200011b0 	.word	0x200011b0

0800fe04 <_read_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	4d07      	ldr	r5, [pc, #28]	; (800fe24 <_read_r+0x20>)
 800fe08:	4604      	mov	r4, r0
 800fe0a:	4608      	mov	r0, r1
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	2200      	movs	r2, #0
 800fe10:	602a      	str	r2, [r5, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	f7f7 fc00 	bl	8007618 <_read>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d102      	bne.n	800fe22 <_read_r+0x1e>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b103      	cbz	r3, 800fe22 <_read_r+0x1e>
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	200011b0 	.word	0x200011b0

0800fe28 <_init>:
 800fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2a:	bf00      	nop
 800fe2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe2e:	bc08      	pop	{r3}
 800fe30:	469e      	mov	lr, r3
 800fe32:	4770      	bx	lr

0800fe34 <_fini>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	bf00      	nop
 800fe38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe3a:	bc08      	pop	{r3}
 800fe3c:	469e      	mov	lr, r3
 800fe3e:	4770      	bx	lr
